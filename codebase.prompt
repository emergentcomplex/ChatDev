

/home/brandon/Projects/ChatDev/index.html

<html>
<head>
  <title>Index of /</title>
  <style type="text/css">
a, a:active {text-decoration: none; color: blue;}
a:visited {color: #48468F;}
a:hover, a:focus {text-decoration: underline; color: red;}
body {background-color: #F5F5F5;}
h2 {margin-bottom: 12px;}
th, td {font: 100% monospace; text-align: left;}
th {font-weight: bold; padding-right: 14px; padding-bottom: 3px;}
td {padding-right: 20px;}
td.s, th.s {text-align: right;}
table {background-color: white; border-top: 1px solid #646464;
   border-bottom: 1px solid #646464; padding-top: 10px; padding-bottom: 14px;}
address {color: #787878; padding-top: 10px;}
  </style>
</head>
<body>
  <h2>Index of /</h2>
  <table>
    <tr>
      <th>Filename</th>
      <th>Size</th>
      <th>Last Modified</th>
      <th>SHA256</th>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-Windows-x86_64.exe">Anaconda3-2024.10-1-Windows-x86_64.exe</a></td>
      <td class="s">950.5M</td>
      <td>2024-10-23 09:03:59</td>
      <td>c1cb433e23997c84ade4ff7241b61b2f9b10a616c230da34e641e9c96dada49d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-MacOSX-x86_64.sh">Anaconda3-2024.10-1-MacOSX-x86_64.sh</a></td>
      <td class="s">778.5M</td>
      <td>2024-10-23 09:03:59</td>
      <td>ad3eea1cc969e9dfd4d571fc266aae06ec119f651d7cb19c0dc187b73e2bfab1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-MacOSX-x86_64.pkg">Anaconda3-2024.10-1-MacOSX-x86_64.pkg</a></td>
      <td class="s">776.0M</td>
      <td>2024-10-23 09:03:59</td>
      <td>dc1e2e123431edc1add68992b2db9db40fb2d7255b0739e37c67e7f9569ccd95</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-MacOSX-arm64.sh">Anaconda3-2024.10-1-MacOSX-arm64.sh</a></td>
      <td class="s">747.2M</td>
      <td>2024-10-23 09:03:59</td>
      <td>f64ed797ce23ae1d07ead949bfb6ff630b9fa8269ca8aef8ea2efa82172ece47</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-MacOSX-arm64.pkg">Anaconda3-2024.10-1-MacOSX-arm64.pkg</a></td>
      <td class="s">744.6M</td>
      <td>2024-10-23 09:03:59</td>
      <td>1643604001b264ce51ca6c18c8cc90c6d00df55e6bba06498c698ca8e0dde82f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-Linux-x86_64.sh">Anaconda3-2024.10-1-Linux-x86_64.sh</a></td>
      <td class="s">1.0G</td>
      <td>2024-10-23 09:03:59</td>
      <td>3ba0a298155c32fbfd80cbc238298560bf69a2df511783054adfc151b76d80d8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-Linux-s390x.sh">Anaconda3-2024.10-1-Linux-s390x.sh</a></td>
      <td class="s">441.2M</td>
      <td>2024-10-23 09:03:59</td>
      <td>e00bd5e6c275695e8050a45aa85790315f504c95243dfe3632f505284310f3c4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.10-1-Linux-aarch64.sh">Anaconda3-2024.10-1-Linux-aarch64.sh</a></td>
      <td class="s">843.2M</td>
      <td>2024-10-23 09:03:59</td>
      <td>489c608e8bddd2cf29dfbdd811cf99087cd6b6a0615d41c6f9058ce340594b65</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-Windows-x86_64.exe">Anaconda3-2024.06-1-Windows-x86_64.exe</a></td>
      <td class="s">912.3M</td>
      <td>2024-06-26 15:40:09</td>
      <td>45eef9132b70e3d5a493c26429ddb4e2c9278a32097fd4bc729f860685633a3b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-MacOSX-x86_64.sh">Anaconda3-2024.06-1-MacOSX-x86_64.sh</a></td>
      <td class="s">737.2M</td>
      <td>2024-06-26 15:40:09</td>
      <td>9b2aa48bfc58e337176d8b5f3776692815807e1346ec12ebcc46a01801bb4ee0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-MacOSX-x86_64.pkg">Anaconda3-2024.06-1-MacOSX-x86_64.pkg</a></td>
      <td class="s">734.7M</td>
      <td>2024-06-26 15:40:09</td>
      <td>9204bfd53baa9ae9a95cf15cbe0a11048c538163d7e50b7f0a2eece45a3f45f6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-MacOSX-arm64.sh">Anaconda3-2024.06-1-MacOSX-arm64.sh</a></td>
      <td class="s">707.3M</td>
      <td>2024-06-26 15:40:09</td>
      <td>f9e0795431910ee4ac341c0cc2a0b62e6c497440789b4117c20736db45b34204</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-MacOSX-arm64.pkg">Anaconda3-2024.06-1-MacOSX-arm64.pkg</a></td>
      <td class="s">704.7M</td>
      <td>2024-06-26 15:40:09</td>
      <td>5cba46cfbc9574247ef0d063b357e72fa58a88be7aedbb90600674f40992cf8f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-Linux-x86_64.sh">Anaconda3-2024.06-1-Linux-x86_64.sh</a></td>
      <td class="s">1007.9M</td>
      <td>2024-06-26 15:40:09</td>
      <td>539bb43d9a52d758d0fdfa1b1b049920ec6f8c6d15ee9fe4a423355fe551a8f7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-Linux-s390x.sh">Anaconda3-2024.06-1-Linux-s390x.sh</a></td>
      <td class="s">425.8M</td>
      <td>2024-06-26 15:40:09</td>
      <td>1b3f4ef4147137fb1861f8251679ea96e651a7c405993c61e39441e43ee2dd11</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.06-1-Linux-aarch64.sh">Anaconda3-2024.06-1-Linux-aarch64.sh</a></td>
      <td class="s">800.6M</td>
      <td>2024-06-26 15:40:09</td>
      <td>b4be0ad2052236882402902a31d32cd37635d3db194a42f977be0d68a8ff1a31</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-Windows-x86_64.exe">Anaconda3-2024.02-1-Windows-x86_64.exe</a></td>
      <td class="s">904.4M</td>
      <td>2024-02-26 14:50:21</td>
      <td>087c633e355bc709222ad9e0dbad77abeed84f7e06dbdbecae84ba8b3660429e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-MacOSX-x86_64.sh">Anaconda3-2024.02-1-MacOSX-x86_64.sh</a></td>
      <td class="s">731.2M</td>
      <td>2024-02-26 14:50:21</td>
      <td>944aee9b90f7d8a2a997d0337cb37219757f22e76c10de38c7c68191c6b5b226</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-MacOSX-x86_64.pkg">Anaconda3-2024.02-1-MacOSX-x86_64.pkg</a></td>
      <td class="s">728.7M</td>
      <td>2024-02-26 14:50:21</td>
      <td>56ed87ad85b1203fad1dc7c5c4e6ac2034f3a69d676ea83f78bd1b7f10ca6a8a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-MacOSX-arm64.sh">Anaconda3-2024.02-1-MacOSX-arm64.sh</a></td>
      <td class="s">700.0M</td>
      <td>2024-02-26 14:50:21</td>
      <td>14a1c80af18c2c2e743e63cdb41228cd554a3fdb250563b6978348c80b6860f6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-MacOSX-arm64.pkg">Anaconda3-2024.02-1-MacOSX-arm64.pkg</a></td>
      <td class="s">697.4M</td>
      <td>2024-02-26 14:50:21</td>
      <td>c22f864ceb962c89b5dbb9170c64acc5ee02dd96af988b0ecc3bf2f880ce8928</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-Linux-x86_64.sh">Anaconda3-2024.02-1-Linux-x86_64.sh</a></td>
      <td class="s">997.2M</td>
      <td>2024-02-26 14:50:21</td>
      <td>c536ddb7b4ba738bddbd4e581b29308cb332fa12ae3fa2cd66814bd735dff231</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-Linux-s390x.sh">Anaconda3-2024.02-1-Linux-s390x.sh</a></td>
      <td class="s">391.8M</td>
      <td>2024-02-26 14:50:21</td>
      <td>3e2e8b17ea9a5caafd448f52e01435998b2e1ce102040a924d5bd6e05a1d735b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2024.02-1-Linux-aarch64.sh">Anaconda3-2024.02-1-Linux-aarch64.sh</a></td>
      <td class="s">798.5M</td>
      <td>2024-02-26 14:50:21</td>
      <td>28c5bed6fba84f418516e41640c7937514aabd55e929a8f66937c737303c7bba</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-Windows-x86_64.exe">Anaconda3-2023.09-0-Windows-x86_64.exe</a></td>
      <td class="s">1.0G</td>
      <td>2023-09-29 10:43:35</td>
      <td>810da8bff79c10a708b7af9e8f21e6bb47467261a31741240f27bd807f155cb9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-MacOSX-x86_64.sh">Anaconda3-2023.09-0-MacOSX-x86_64.sh</a></td>
      <td class="s">774.1M</td>
      <td>2023-09-29 10:43:34</td>
      <td>0c64a2c634fe31335079d97340c277c81b3f0c9dfe862a06599570640ac897a4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-MacOSX-x86_64.pkg">Anaconda3-2023.09-0-MacOSX-x86_64.pkg</a></td>
      <td class="s">772.0M</td>
      <td>2023-09-29 10:43:32</td>
      <td>c92dc16aa21255c5894913b4364dc29409f13828c7a0d03f8c5d5a8888d64a8b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-MacOSX-arm64.sh">Anaconda3-2023.09-0-MacOSX-arm64.sh</a></td>
      <td class="s">744.0M</td>
      <td>2023-09-29 10:43:31</td>
      <td>34121775d9e30a6ea12af0a462e1881670b0c175b426e06fd7b1581625ebd69b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-MacOSX-arm64.pkg">Anaconda3-2023.09-0-MacOSX-arm64.pkg</a></td>
      <td class="s">741.8M</td>
      <td>2023-09-29 10:43:31</td>
      <td>0466f3f82663fc581c6684daeb4c66cb303a65c992110bfd6da17a7356709cda</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-Linux-x86_64.sh">Anaconda3-2023.09-0-Linux-x86_64.sh</a></td>
      <td class="s">1.1G</td>
      <td>2023-09-29 10:43:30</td>
      <td>6c8a4abb36fbb711dc055b7049a23bbfd61d356de9468b41c5140f8a11abd851</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-Linux-s390x.sh">Anaconda3-2023.09-0-Linux-s390x.sh</a></td>
      <td class="s">366.2M</td>
      <td>2023-09-29 10:43:30</td>
      <td>ee817071a2ad94e044fb48061a721bc86606b2f4906b705e4f42177eeb3ca7c5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-Linux-ppc64le.sh">Anaconda3-2023.09-0-Linux-ppc64le.sh</a></td>
      <td class="s">525.2M</td>
      <td>2023-09-29 10:43:29</td>
      <td>5ea1ed9808af95eb2655fe6a4ffdb66bea66ecd1d053fc2ee69eacc7685ef665</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.09-0-Linux-aarch64.sh">Anaconda3-2023.09-0-Linux-aarch64.sh</a></td>
      <td class="s">838.8M</td>
      <td>2023-09-29 10:43:29</td>
      <td>69ee26361c1ec974199bce5c0369e3e9a71541de7979d2b9cfa4af556d1ae0ea</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-Windows-x86_64.exe">Anaconda3-2023.07-2-Windows-x86_64.exe</a></td>
      <td class="s">898.6M</td>
      <td>2023-08-04 10:56:07</td>
      <td>b48e103546742b2fcb77c4099660a28901476932472d16eef6c5a63de8b6a7ce</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-MacOSX-x86_64.sh">Anaconda3-2023.07-2-MacOSX-x86_64.sh</a></td>
      <td class="s">612.1M</td>
      <td>2023-08-04 10:56:07</td>
      <td>a2f7d0c19f60d00742154db21bfb3976d82215ff58396353f4dc729828bd2f49</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-MacOSX-x86_64.pkg">Anaconda3-2023.07-2-MacOSX-x86_64.pkg</a></td>
      <td class="s">610.5M</td>
      <td>2023-08-04 10:56:06</td>
      <td>f5ff78eebb4f9960acf7d99103a2012d84de3d279edafae1f098b4f617e0a7c8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-MacOSX-arm64.sh">Anaconda3-2023.07-2-MacOSX-arm64.sh</a></td>
      <td class="s">645.6M</td>
      <td>2023-08-04 10:56:06</td>
      <td>8b08ca8a94dd5fda20d134fea13fa6c55c70d20d4b5a7a1c80d311aeb0cd7a88</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-MacOSX-arm64.pkg">Anaconda3-2023.07-2-MacOSX-arm64.pkg</a></td>
      <td class="s">643.9M</td>
      <td>2023-08-04 10:56:05</td>
      <td>c95a37465f505a50bdeb22de59ea10348141bf8999b3199f6086b832aea6dd8f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-Linux-x86_64.sh">Anaconda3-2023.07-2-Linux-x86_64.sh</a></td>
      <td class="s">1015.6M</td>
      <td>2023-08-04 10:56:05</td>
      <td>589fb34fe73bc303379abbceba50f3131254e85ce4e7cd819ba4276ba29cad16</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-Linux-s390x.sh">Anaconda3-2023.07-2-Linux-s390x.sh</a></td>
      <td class="s">340.8M</td>
      <td>2023-08-04 10:56:05</td>
      <td>121743a62210249dd9fb9d6527d545d08f6bf6d2624d51ad4b5d168cb3e860d6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-Linux-ppc64le.sh">Anaconda3-2023.07-2-Linux-ppc64le.sh</a></td>
      <td class="s">473.8M</td>
      <td>2023-08-04 10:56:04</td>
      <td>7a72e301fb3b8e175a96b6457fc84654dd2eb98942528d9988760779b92847e4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-2-Linux-aarch64.sh">Anaconda3-2023.07-2-Linux-aarch64.sh</a></td>
      <td class="s">727.4M</td>
      <td>2023-08-04 10:56:04</td>
      <td>75967bc2113d9e336e670e1e557c9198d8b98e59fb9adb82cbe0e71ce5f7c2db</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-Linux-ppc64le.sh">Anaconda3-2023.07-1-Linux-ppc64le.sh</a></td>
      <td class="s">468.7M</td>
      <td>2023-07-13 15:32:26</td>
      <td>ee149f55ebdd3f15fc1db4e9cddb5126da62e7a193fa15026c9fa009a2575d0a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-Windows-x86_64.exe">Anaconda3-2023.07-1-Windows-x86_64.exe</a></td>
      <td class="s">893.8M</td>
      <td>2023-07-13 15:29:08</td>
      <td>f52d9d658e49d62754266e4e38e0dfc46fabda485de7139cef263187472f7445</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-MacOSX-x86_64.sh">Anaconda3-2023.07-1-MacOSX-x86_64.sh</a></td>
      <td class="s">595.4M</td>
      <td>2023-07-13 15:29:08</td>
      <td>803b2d0c5a142af3de14b410517c2c8889eaceb1b784d4c121512ebda13af6f8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-MacOSX-x86_64.pkg">Anaconda3-2023.07-1-MacOSX-x86_64.pkg</a></td>
      <td class="s">593.8M</td>
      <td>2023-07-13 15:29:07</td>
      <td>ecc2ed39860e6adaaf4c63bf47db1d4eed18f3e24915dfb28146da7c75db5f3a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-MacOSX-arm64.sh">Anaconda3-2023.07-1-MacOSX-arm64.sh</a></td>
      <td class="s">629.9M</td>
      <td>2023-07-13 15:29:07</td>
      <td>322045ad100dcc380decde5812db58c617901c6a8ac46dd7818080fe3ae19f8e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-MacOSX-arm64.pkg">Anaconda3-2023.07-1-MacOSX-arm64.pkg</a></td>
      <td class="s">628.1M</td>
      <td>2023-07-13 15:29:07</td>
      <td>a581f911fe6366597a8d61b03927db9889e1b82ea3107291dab4699cb3907f0c</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-Linux-x86_64.sh">Anaconda3-2023.07-1-Linux-x86_64.sh</a></td>
      <td class="s">1010.4M</td>
      <td>2023-07-13 15:29:06</td>
      <td>111ce0a7f26e606863008a9519fd608b1493e483b6f487aea71d82b13fe0967e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-Linux-s390x.sh">Anaconda3-2023.07-1-Linux-s390x.sh</a></td>
      <td class="s">336.1M</td>
      <td>2023-07-13 15:29:06</td>
      <td>49aad1bc077334f30177443c234f3c982f1c9751fc78c4c29fb4cf736e4f61ef</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-1-Linux-aarch64.sh">Anaconda3-2023.07-1-Linux-aarch64.sh</a></td>
      <td class="s">711.9M</td>
      <td>2023-07-13 15:29:06</td>
      <td>2ebe549375f3f5ffec9558a8a8405ebd697e69c8133b8f9c1c5cd4ff69d1cc74</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-uninstaller-patch-win-64-2023.07-0.exe">Anaconda3-uninstaller-patch-win-64-2023.07-0.exe</a></td>
      <td class="s">707K</td>
      <td>2023-07-11 13:17:03</td>
      <td>7c89615a41a50031227d3e0eb23dd35a1825a15057ecc1b2a6264fe8514a56bf</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-Windows-x86_64.exe">Anaconda3-2023.07-0-Windows-x86_64.exe</a></td>
      <td class="s">893.9M</td>
      <td>2023-07-11 13:17:03</td>
      <td>fc75a8843169366e47a54c58ddd28ff95f4edb6a088731dd62acfc8f955439f9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-MacOSX-x86_64.sh">Anaconda3-2023.07-0-MacOSX-x86_64.sh</a></td>
      <td class="s">595.4M</td>
      <td>2023-07-11 13:17:02</td>
      <td>b6ea24fe16544d5b2d5adf6c913c1fc89a6dbdef12a4caff76ff574b33d0f3cb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-MacOSX-x86_64.pkg">Anaconda3-2023.07-0-MacOSX-x86_64.pkg</a></td>
      <td class="s">593.8M</td>
      <td>2023-07-11 13:17:02</td>
      <td>3cce8fe03abdf23432c574ec0feb486d7e2f376bfdaf6f6cd0ea35673452bdee</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-MacOSX-arm64.sh">Anaconda3-2023.07-0-MacOSX-arm64.sh</a></td>
      <td class="s">629.9M</td>
      <td>2023-07-11 13:17:02</td>
      <td>23a9deb80acb145c65375bd73cbaa8793be81447278c4db7be50ef7c32a58635</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-MacOSX-arm64.pkg">Anaconda3-2023.07-0-MacOSX-arm64.pkg</a></td>
      <td class="s">628.2M</td>
      <td>2023-07-11 13:17:01</td>
      <td>e441647d9b655052b7008aa4357acca2ebd121c95038ce3021e28741be18f9b7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-Linux-x86_64.sh">Anaconda3-2023.07-0-Linux-x86_64.sh</a></td>
      <td class="s">1010.4M</td>
      <td>2023-07-11 13:17:01</td>
      <td>ac738639aba0b676a618911600d0a0e7825ee7fd10efb6b3d95cc2e570d9ee7b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-Linux-s390x.sh">Anaconda3-2023.07-0-Linux-s390x.sh</a></td>
      <td class="s">336.1M</td>
      <td>2023-07-11 13:17:01</td>
      <td>f6933a8b70d346d423e089843fc151c46bdaee4e3e4e4fd0fb81ca06b8766892</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-Linux-ppc64le.sh">Anaconda3-2023.07-0-Linux-ppc64le.sh</a></td>
      <td class="s">468.7M</td>
      <td>2023-07-11 13:17:00</td>
      <td>98efb73758680b84f890d818b5748d7a08e82c4b825d597f7e3c4467125da278</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.07-0-Linux-aarch64.sh">Anaconda3-2023.07-0-Linux-aarch64.sh</a></td>
      <td class="s">711.9M</td>
      <td>2023-07-11 13:17:00</td>
      <td>5f4865448c1111fb80cb49abff0f9b38b2970857dba7a4627c499ba102b82af5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-Windows-x86_64.exe">Anaconda3-2023.03-1-Windows-x86_64.exe</a></td>
      <td class="s">786.6M</td>
      <td>2023-04-24 12:41:07</td>
      <td>f13a2ae812d2069654521e7b1d897227ea4af52bff7cd8b3d80e7b2271fc79e4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-MacOSX-x86_64.sh">Anaconda3-2023.03-1-MacOSX-x86_64.sh</a></td>
      <td class="s">601.6M</td>
      <td>2023-04-24 12:41:07</td>
      <td>3593921c8a5516db82f0d7dd1c691f7ee7794236852e7da614e9ad6e93eeb342</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-MacOSX-x86_64.pkg">Anaconda3-2023.03-1-MacOSX-x86_64.pkg</a></td>
      <td class="s">600.1M</td>
      <td>2023-04-24 12:41:06</td>
      <td>561ea77b7172e15568d21b854c4de4178789ca59caca16af9a6449653bfd9a21</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-MacOSX-arm64.sh">Anaconda3-2023.03-1-MacOSX-arm64.sh</a></td>
      <td class="s">566.0M</td>
      <td>2023-04-24 12:41:06</td>
      <td>85152324c423fedbeed2e7491cb32e597eaeb1b86ae7a61ff7597b401fd053ce</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-MacOSX-arm64.pkg">Anaconda3-2023.03-1-MacOSX-arm64.pkg</a></td>
      <td class="s">564.4M</td>
      <td>2023-04-24 12:41:06</td>
      <td>d22ab7a22ab4ba3c02d6fe4e9c2a9c673ff34b80442922e4e49663287f6ace3f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-Linux-x86_64.sh">Anaconda3-2023.03-1-Linux-x86_64.sh</a></td>
      <td class="s">860.6M</td>
      <td>2023-04-24 12:41:05</td>
      <td>95102d7c732411f1458a20bdf47e4c1b0b6c8a21a2edfe4052ca370aaae57bab</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-Linux-s390x.sh">Anaconda3-2023.03-1-Linux-s390x.sh</a></td>
      <td class="s">361.2M</td>
      <td>2023-04-24 12:41:05</td>
      <td>5af1406c6350b4ba6839c49faa32a3c90f2b9845a03c35843f118dd9dd013421</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-Linux-ppc64le.sh">Anaconda3-2023.03-1-Linux-ppc64le.sh</a></td>
      <td class="s">435.1M</td>
      <td>2023-04-24 12:41:05</td>
      <td>a31f2d6da83534cff7c994403cc11fa634b31fcd10eb4153d00233345ee084b2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-1-Linux-aarch64.sh">Anaconda3-2023.03-1-Linux-aarch64.sh</a></td>
      <td class="s">618.7M</td>
      <td>2023-04-24 12:41:04</td>
      <td>54e600faa2af63a25717af30ecaddf1ee428cdfebd3721a70f41462e232e8153</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-Windows-x86_64.exe">Anaconda3-2023.03-0-Windows-x86_64.exe</a></td>
      <td class="s">786.0M</td>
      <td>2023-03-20 10:41:36</td>
      <td>849daee6c1926bb43306d0e4ce0cc50719b5bb5e43e085fc5092513ef8bf1fd5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-MacOSX-x86_64.sh">Anaconda3-2023.03-0-MacOSX-x86_64.sh</a></td>
      <td class="s">601.0M</td>
      <td>2023-03-20 10:41:36</td>
      <td>cc37b1eb85bdc2ade3f95201a746cdc63ee4fbfae48ee9d0c7a3cf319562452d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-MacOSX-x86_64.pkg">Anaconda3-2023.03-0-MacOSX-x86_64.pkg</a></td>
      <td class="s">599.7M</td>
      <td>2023-03-20 10:41:36</td>
      <td>52d1109e371856b4fca8dcd1e1916ecc31d38b834369e370127d0372f56c34c1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-MacOSX-arm64.sh">Anaconda3-2023.03-0-MacOSX-arm64.sh</a></td>
      <td class="s">565.4M</td>
      <td>2023-03-20 10:41:35</td>
      <td>d27ee5432438972e90548e3dfa89490c5dc38a723f4dcd53061f0bd9d53b1bd0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-MacOSX-arm64.pkg">Anaconda3-2023.03-0-MacOSX-arm64.pkg</a></td>
      <td class="s">564.1M</td>
      <td>2023-03-20 10:41:35</td>
      <td>b55403d2b77973ecf4ca1e3adfa09b74e871f3d99f383bcdbe2defdc08c16523</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-Linux-x86_64.sh">Anaconda3-2023.03-0-Linux-x86_64.sh</a></td>
      <td class="s">860.1M</td>
      <td>2023-03-20 10:41:35</td>
      <td>19737d5c27b23a1d8740c5cb2414bf6253184ce745d0a912bb235a212a15e075</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-Linux-s390x.sh">Anaconda3-2023.03-0-Linux-s390x.sh</a></td>
      <td class="s">360.7M</td>
      <td>2023-03-20 10:41:34</td>
      <td>2648337081c3ce4b760457c5f00fb768ecd7d1d0957051ef5252ab380bb78233</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-Linux-ppc64le.sh">Anaconda3-2023.03-0-Linux-ppc64le.sh</a></td>
      <td class="s">434.6M</td>
      <td>2023-03-20 10:41:34</td>
      <td>eafeaccca96f60ebb0aa0052d9baac8eaa2ee422358ee35b12f60f37e8a3ebb2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2023.03-0-Linux-aarch64.sh">Anaconda3-2023.03-0-Linux-aarch64.sh</a></td>
      <td class="s">618.2M</td>
      <td>2023-03-20 10:41:34</td>
      <td>613797154d9383355677f7dfee10db32b2c327cbedabddcb303598f242c79883</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-Linux-aarch64.sh">Anaconda3-2022.10-Linux-aarch64.sh</a></td>
      <td class="s">534.5M</td>
      <td>2022-10-17 16:15:40</td>
      <td>fbadbfae5992a8c96af0a4621262080eea44e22baee2172e3dfb640f5cf8d22d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-Windows-x86_64.exe">Anaconda3-2022.10-Windows-x86_64.exe</a></td>
      <td class="s">621.2M</td>
      <td>2022-10-17 16:15:39</td>
      <td>38b9d53a579843fe41fd05fd3c4f9ac3887f580e7bd9b43f220bbc3aea2367eb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-Linux-x86_64.sh">Anaconda3-2022.10-Linux-x86_64.sh</a></td>
      <td class="s">737.6M</td>
      <td>2022-10-17 16:15:39</td>
      <td>e7ecbccbc197ebd7e1f211c59df2e37bc6959d081f2235d387e08c9026666acd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-MacOSX-arm64.sh">Anaconda3-2022.10-MacOSX-arm64.sh</a></td>
      <td class="s">472.5M</td>
      <td>2022-10-17 16:15:38</td>
      <td>200700077db8eed762fbc996b830c3f8cc5a2bb7d6b20bb367147eb35f2dcc72</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-MacOSX-x86_64.pkg">Anaconda3-2022.10-MacOSX-x86_64.pkg</a></td>
      <td class="s">688.6M</td>
      <td>2022-10-17 16:15:38</td>
      <td>bd6147a59939009718ecc18ed6fd0cf1639dc1f1626af249be7c311874c3c2b4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-Linux-s390x.sh">Anaconda3-2022.10-Linux-s390x.sh</a></td>
      <td class="s">282.4M</td>
      <td>2022-10-17 16:15:37</td>
      <td>f5ccc24aedab1f3f9cccf1945ca1061bee194fa42a212ec26425f3b77fdd943a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-Linux-ppc64le.sh">Anaconda3-2022.10-Linux-ppc64le.sh</a></td>
      <td class="s">360.0M</td>
      <td>2022-10-17 16:15:37</td>
      <td>8fdebc79f63b74daad421a2674d43299fa9c5007d85cf00e8dc1a81fbf2787e4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-MacOSX-x86_64.sh">Anaconda3-2022.10-MacOSX-x86_64.sh</a></td>
      <td class="s">681.6M</td>
      <td>2022-10-17 16:15:37</td>
      <td>dfcd1431a8206506799cb142b04d2db3be8a28671e5c3672920c09c71246dde0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.10-MacOSX-arm64.pkg">Anaconda3-2022.10-MacOSX-arm64.pkg</a></td>
      <td class="s">484.1M</td>
      <td>2022-10-17 16:15:36</td>
      <td>4999ce8718c5d387940b1e213beb2c525e61eca94fd0e4e93bf5674b09ac3382</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-MacOSX-arm64.sh">Anaconda3-2022.05-MacOSX-arm64.sh</a></td>
      <td class="s">304.8M</td>
      <td>2022-06-07 12:40:25</td>
      <td>a12119931945a9a1453993582259cc67318a9a75a15731e5ccc15365e7f88a36</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-MacOSX-arm64.pkg">Anaconda3-2022.05-MacOSX-arm64.pkg</a></td>
      <td class="s">316.4M</td>
      <td>2022-06-07 12:40:24</td>
      <td>0140970944a3e6088be5995ef7ce8525c1b2f8d5080e317423b3671f38a0460e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Windows-x86_64.exe">Anaconda3-2022.05-Windows-x86_64.exe</a></td>
      <td class="s">593.9M</td>
      <td>2022-05-10 13:22:02</td>
      <td>2766eb102f9d65da36d262b651777358de39fbe5f1a74f9854a2e5e29caeeeec</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-MacOSX-x86_64.pkg">Anaconda3-2022.05-MacOSX-x86_64.pkg</a></td>
      <td class="s">591.0M</td>
      <td>2022-05-10 13:22:02</td>
      <td>e884c5c384d4e5723b7b0c9fcd9756bb48fa07f2de187eaf4ea94a8e142424cd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Linux-ppc64le.sh">Anaconda3-2022.05-Linux-ppc64le.sh</a></td>
      <td class="s">367.3M</td>
      <td>2022-05-10 13:22:01</td>
      <td>a50bf5bd26b5c5a2c24028c1aff6da2fa4d4586ca43ae3acdf7ffb9b50d7f282</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Linux-s390x.sh">Anaconda3-2022.05-Linux-s390x.sh</a></td>
      <td class="s">279.8M</td>
      <td>2022-05-10 13:22:01</td>
      <td>c14415df69e439acd7458737a84a45c6067376cbec2fccf5e2393f9837760ea7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-MacOSX-x86_64.sh">Anaconda3-2022.05-MacOSX-x86_64.sh</a></td>
      <td class="s">584.0M</td>
      <td>2022-05-10 13:22:01</td>
      <td>1a10c06660ebe1204e538b4e9d810142441af9dfd74b077eee2761ec6e675f39</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Linux-aarch64.sh">Anaconda3-2022.05-Linux-aarch64.sh</a></td>
      <td class="s">567.6M</td>
      <td>2022-05-10 13:22:00</td>
      <td>dc6bb4eab3996e0658f8bc4bbd229c18f55269badd74acc36d9e23143268b795</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Linux-x86_64.sh">Anaconda3-2022.05-Linux-x86_64.sh</a></td>
      <td class="s">658.8M</td>
      <td>2022-05-10 13:22:00</td>
      <td>a7c0afe862f6ea19a596801fc138bde0463abcbce1b753e8d5c474b506a2db2d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2022.05-Windows-x86.exe">Anaconda3-2022.05-Windows-x86.exe</a></td>
      <td class="s">487.8M</td>
      <td>2022-05-10 13:21:59</td>
      <td>cd8c688349bcd1f429e3b383620fb0d19f52be0f765b2eae78d63b41aefb2e73</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Windows-x86.exe">Anaconda3-2021.11-Windows-x86.exe</a></td>
      <td class="s">404.1M</td>
      <td>2021-11-17 12:08:45</td>
      <td>dc0746dded06cc480328c20b73369803ce98df1971bda669d93859e02c1c0664</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Windows-x86_64.exe">Anaconda3-2021.11-Windows-x86_64.exe</a></td>
      <td class="s">510.3M</td>
      <td>2021-11-17 12:08:45</td>
      <td>1b3d593d1deb22b835be5c68897075e0fc9dea240ab4191c55674aba259a78ff</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-MacOSX-x86_64.sh">Anaconda3-2021.11-MacOSX-x86_64.sh</a></td>
      <td class="s">508.4M</td>
      <td>2021-11-17 12:08:44</td>
      <td>6a9217d1a08c599f860045d56ef64fc6c3e3112b55cc97f3d07c573d7bbcdb58</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-MacOSX-x86_64.pkg">Anaconda3-2021.11-MacOSX-x86_64.pkg</a></td>
      <td class="s">515.1M</td>
      <td>2021-11-17 12:08:44</td>
      <td>203f5134d94390531b0cf1ff0f7e702abba60a77ba60559d93745c0475aefc71</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Linux-x86_64.sh">Anaconda3-2021.11-Linux-x86_64.sh</a></td>
      <td class="s">580.5M</td>
      <td>2021-11-17 12:08:44</td>
      <td>fedf9e340039557f7b5e8a8a86affa9d299f5e9820144bd7b92ae9f7ee08ac60</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Linux-s390x.sh">Anaconda3-2021.11-Linux-s390x.sh</a></td>
      <td class="s">241.7M</td>
      <td>2021-11-17 12:08:44</td>
      <td>1504e9259816c5804eff1304fe7e339517b9fc1a08bfd991bc525a7efb6568f1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Linux-ppc64le.sh">Anaconda3-2021.11-Linux-ppc64le.sh</a></td>
      <td class="s">254.9M</td>
      <td>2021-11-17 12:08:44</td>
      <td>7eb6a95925ee756240818599f8dcbba7a155adfb05ef6cd5336aa3c083de65f3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.11-Linux-aarch64.sh">Anaconda3-2021.11-Linux-aarch64.sh</a></td>
      <td class="s">487.7M</td>
      <td>2021-11-17 12:08:43</td>
      <td>4daacb88fbd3a6c14e28cd3b37004ed4c2643e2b187302e927eb81a074e837bc</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Windows-x86_64.exe">Anaconda3-2021.05-Windows-x86_64.exe</a></td>
      <td class="s">477.2M</td>
      <td>2021-05-13 22:08:48</td>
      <td>93db42390444019e98b442ab281e1091671b6dce64daf08928d337ffc83cf3d2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Linux-s390x.sh">Anaconda3-2021.05-Linux-s390x.sh</a></td>
      <td class="s">291.7M</td>
      <td>2021-05-13 22:08:48</td>
      <td>a7d1a83279f439e7d8a6c53aa725552e195c0b96ae7e7fa63baefdf0118f7942</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Windows-x86.exe">Anaconda3-2021.05-Windows-x86.exe</a></td>
      <td class="s">408.5M</td>
      <td>2021-05-13 22:08:48</td>
      <td>b95b6ada0a54fe1df06f6cde84f8fa586501ac86eeb86f760106cf87b87168e2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-MacOSX-x86_64.pkg">Anaconda3-2021.05-MacOSX-x86_64.pkg</a></td>
      <td class="s">440.3M</td>
      <td>2021-05-13 22:08:47</td>
      <td>b61e6ca9c338ed39f41408774143f582fc1e05a3aeaf0d2e986b6b16b2c5e8d7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Linux-x86_64.sh">Anaconda3-2021.05-Linux-x86_64.sh</a></td>
      <td class="s">544.4M</td>
      <td>2021-05-13 22:08:47</td>
      <td>2751ab3d678ff0277ae80f9e8a74f218cfc70fe9a9cdc7bb1c137d7e47e33d53</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-MacOSX-x86_64.sh">Anaconda3-2021.05-MacOSX-x86_64.sh</a></td>
      <td class="s">432.7M</td>
      <td>2021-05-13 22:08:47</td>
      <td>0407bee87eeecad521f1e38eb607b0a85babef4c1b47516dc5c090e152eba5d5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Linux-ppc64le.sh">Anaconda3-2021.05-Linux-ppc64le.sh</a></td>
      <td class="s">285.3M</td>
      <td>2021-05-13 22:08:47</td>
      <td>097064807a9adae3f91fc4c5852cd90df2b77fc96505929bb25bf558f1eef76f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.05-Linux-aarch64.sh">Anaconda3-2021.05-Linux-aarch64.sh</a></td>
      <td class="s">412.6M</td>
      <td>2021-05-13 22:08:46</td>
      <td>3a3d5a61df5422f7c8c7816217b926ec7e200cc6d62967541adead8ec46d935d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Linux-ppc64le.sh">Anaconda3-2021.04-Linux-ppc64le.sh</a></td>
      <td class="s">285.3M</td>
      <td>2021-05-10 14:23:03</td>
      <td>6954278e3eb85f98ad29a44b0da574156cebe365687b831d3d865969d997f517</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-MacOSX-x86_64.pkg">Anaconda3-2021.04-MacOSX-x86_64.pkg</a></td>
      <td class="s">436.9M</td>
      <td>2021-05-10 14:21:10</td>
      <td>d3fb9c189d2f7fdefe672dc454432cb822af4781f61c756ad0a332a5771e9b09</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Windows-x86.exe">Anaconda3-2021.04-Windows-x86.exe</a></td>
      <td class="s">405.0M</td>
      <td>2021-05-10 14:21:09</td>
      <td>61a4e246098886acc1b3cbb977d58ca6dd1aeb7a1cd67f4e4f11b12cf6670f87</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Windows-x86_64.exe">Anaconda3-2021.04-Windows-x86_64.exe</a></td>
      <td class="s">473.7M</td>
      <td>2021-05-10 14:21:09</td>
      <td>65fd8be6ab9aed8106bd1c9a228ecd7fd3e23d0d15b9d72415e3a884a69a8462</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Linux-x86_64.sh">Anaconda3-2021.04-Linux-x86_64.sh</a></td>
      <td class="s">539.9M</td>
      <td>2021-05-10 14:21:09</td>
      <td>2d6dcbe4360d023c3cecf6a6be8678d906c918e9afb50407a0f51558a48ca896</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-MacOSX-x86_64.sh">Anaconda3-2021.04-MacOSX-x86_64.sh</a></td>
      <td class="s">429.3M</td>
      <td>2021-05-10 14:21:08</td>
      <td>e945565945eb02fcc0755ca9d419ae36cb0f05f325790bec53d8f4ec7dedf4ca</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Linux-s390x.sh">Anaconda3-2021.04-Linux-s390x.sh</a></td>
      <td class="s">291.7M</td>
      <td>2021-05-07 10:45:26</td>
      <td>b0b857aa68964cb1388ce1657cc6f32c689cb0a0f95824e796acd1ed70cf1fd8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2021.04-Linux-aarch64.sh">Anaconda3-2021.04-Linux-aarch64.sh</a></td>
      <td class="s">407.6M</td>
      <td>2021-05-07 10:44:23</td>
      <td>4a2d3515e41660b3a0598bdd5513d388cad68b0df0397716c8b0e468c99f367f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-Linux-ppc64le.sh">Anaconda3-2020.11-Linux-ppc64le.sh</a></td>
      <td class="s">278.9M</td>
      <td>2020-11-18 16:45:36</td>
      <td>870535ada0a8ae75eeda8cd2bf7dde853ac9f4949b20e1b5641f1843a655f3b8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-Linux-x86_64.sh">Anaconda3-2020.11-Linux-x86_64.sh</a></td>
      <td class="s">528.8M</td>
      <td>2020-11-18 16:45:36</td>
      <td>cf2ff493f11eaad5d09ce2b4feaa5ea90db5174303d5b3fe030e16d29aeef7de</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-MacOSX-x86_64.sh">Anaconda3-2020.11-MacOSX-x86_64.sh</a></td>
      <td class="s">427.8M</td>
      <td>2020-11-18 16:45:35</td>
      <td>ec11e325c792a6f49dbdbe5e641991d0a29788689176d7e54da97def9532c762</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-MacOSX-x86_64.pkg">Anaconda3-2020.11-MacOSX-x86_64.pkg</a></td>
      <td class="s">435.3M</td>
      <td>2020-11-18 16:45:35</td>
      <td>b230c042237ba3e89193d3144179deddae0393facc6d8a6e599b1df1ae0b1ae9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-Windows-x86.exe">Anaconda3-2020.11-Windows-x86.exe</a></td>
      <td class="s">403.0M</td>
      <td>2020-11-18 16:45:34</td>
      <td>362de9bc1e9e368dcbcdee1a175a523983c48dd8c04f83caf8d7ceaf7956bddc</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.11-Windows-x86_64.exe">Anaconda3-2020.11-Windows-x86_64.exe</a></td>
      <td class="s">457.2M</td>
      <td>2020-11-18 16:45:34</td>
      <td>aa523115daf31c431bb392faf75e70d35ada935e36dc7b1dd8902baee240bcc1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-Windows-x86.exe">Anaconda3-2020.07-Windows-x86.exe</a></td>
      <td class="s">397.3M</td>
      <td>2020-07-23 12:16:51</td>
      <td>19803e5ccc357b57051cf7fa272e6b499dfedf13790778dc24af302f894e3281</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-Linux-x86_64.sh">Anaconda3-2020.07-Linux-x86_64.sh</a></td>
      <td class="s">550.1M</td>
      <td>2020-07-23 12:16:50</td>
      <td>38ce717758b95b3bd0b1797cc6ccfb76f29a90c25bdfa50ee45f11e583edfdbf</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-Linux-ppc64le.sh">Anaconda3-2020.07-Linux-ppc64le.sh</a></td>
      <td class="s">290.4M</td>
      <td>2020-07-23 12:16:47</td>
      <td>0df7c3784973ab46a9ef9848aced01311d08a71d79a18d5ed79dccdae8c8dea7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-Windows-x86_64.exe">Anaconda3-2020.07-Windows-x86_64.exe</a></td>
      <td class="s">467.5M</td>
      <td>2020-07-23 12:16:46</td>
      <td>66acb9bdf7d2d5925df8762311a85ad72f57dfd340447bf00636d35a28454244</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-MacOSX-x86_64.sh">Anaconda3-2020.07-MacOSX-x86_64.sh</a></td>
      <td class="s">454.1M</td>
      <td>2020-07-23 12:16:44</td>
      <td>3980c2a57fde5de2ccfdf0d7973f95ac1a3fa63351642e6735c50fc3791ef0f1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.07-MacOSX-x86_64.pkg">Anaconda3-2020.07-MacOSX-x86_64.pkg</a></td>
      <td class="s">462.3M</td>
      <td>2020-07-23 12:16:42</td>
      <td>e095c487d2837e4c984d0fcd2217be42c615504a2d7d6651095d34c2fa9807a0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-Windows-x86.exe">Anaconda3-2020.02-Windows-x86.exe</a></td>
      <td class="s">423.2M</td>
      <td>2020-03-11 10:32:58</td>
      <td>d13381d6145c47755b198662af8a5f412836adecdb68627bc297be6738a3bdac</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-MacOSX-x86_64.pkg">Anaconda3-2020.02-MacOSX-x86_64.pkg</a></td>
      <td class="s">442.2M</td>
      <td>2020-03-11 10:32:57</td>
      <td>4f7cc14b5b1d7aec3d9a5e781dede065e21cfe61915de4d3de192b9329195707</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-Linux-x86_64.sh">Anaconda3-2020.02-Linux-x86_64.sh</a></td>
      <td class="s">521.6M</td>
      <td>2020-03-11 10:32:37</td>
      <td>2b9f088b2022edb474915d9f69a803d6449d5fdb4c303041f60ac4aefcc208bb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-Windows-x86_64.exe">Anaconda3-2020.02-Windows-x86_64.exe</a></td>
      <td class="s">466.3M</td>
      <td>2020-03-11 10:32:35</td>
      <td>83c2f53c7174253adcc2de7d1293a7408c37b295abbbb8feca32cb8428a26158</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-MacOSX-x86_64.sh">Anaconda3-2020.02-MacOSX-x86_64.sh</a></td>
      <td class="s">430.1M</td>
      <td>2020-03-11 10:32:34</td>
      <td>d237e6c976eb9c58368ca156a51bd913d63a3b5fea32689342733c99d14b6f2e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2020.02-Linux-ppc64le.sh">Anaconda3-2020.02-Linux-ppc64le.sh</a></td>
      <td class="s">276.0M</td>
      <td>2020-03-11 10:32:32</td>
      <td>d6d1827a38b988cbbe714d6e0357c9e251c84641a0c70cda51861ed9abb38804</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-MacOSX-x86_64.pkg">Anaconda3-2019.10-MacOSX-x86_64.pkg</a></td>
      <td class="s">653.5M</td>
      <td>2019-10-15 09:27:33</td>
      <td>8b2192cbd586939d68bac00b0f9cbd2bfe555798c52b4cf4aecf6f9442123647</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-MacOSX-x86_64.sh">Anaconda3-2019.10-MacOSX-x86_64.sh</a></td>
      <td class="s">424.2M</td>
      <td>2019-10-15 09:27:31</td>
      <td>4f77299ff4170cda64fdfcc27ac609a37d654c158f36c9ff25048793fe8a3a49</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-Windows-x86_64.exe">Anaconda3-2019.10-Windows-x86_64.exe</a></td>
      <td class="s">461.5M</td>
      <td>2019-10-15 09:27:17</td>
      <td>9e632439ed40620b8518f11469ded7316eccb489d0dfc41770f72ca2b2202dd9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-Linux-ppc64le.sh">Anaconda3-2019.10-Linux-ppc64le.sh</a></td>
      <td class="s">320.3M</td>
      <td>2019-10-15 09:26:11</td>
      <td>118c579f625555e1b116f0c3fd3842772e8fa0254cb2262c1c94e9eb40ba5160</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-Windows-x86.exe">Anaconda3-2019.10-Windows-x86.exe</a></td>
      <td class="s">409.6M</td>
      <td>2019-10-15 09:26:10</td>
      <td>05e6738919673a6d57b5895b8b4df0b7e3f4d7ed0e30faf9c9f1b7d3399e9f52</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.10-Linux-x86_64.sh">Anaconda3-2019.10-Linux-x86_64.sh</a></td>
      <td class="s">505.7M</td>
      <td>2019-10-15 09:26:05</td>
      <td>46d762284d252e51cd58a8ca6c8adc9da2eadc82c342927b2f66ed011d1d8b53</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-MacOSX-x86_64.pkg">Anaconda3-2019.07-MacOSX-x86_64.pkg</a></td>
      <td class="s">653.1M</td>
      <td>2019-07-25 09:38:03</td>
      <td>bc1a4cb642b775159125521d1dbcf8bd1dd811b0880fd0c2a6612070d7b78476</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-Windows-x86_64.exe">Anaconda3-2019.07-Windows-x86_64.exe</a></td>
      <td class="s">485.8M</td>
      <td>2019-07-25 09:37:53</td>
      <td>37e753801a881649ceb608449b66ff9daa35a393409c6e651e56a60c5043bd46</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-Windows-x86.exe">Anaconda3-2019.07-Windows-x86.exe</a></td>
      <td class="s">418.4M</td>
      <td>2019-07-25 09:37:26</td>
      <td>3d26ddf9ddb2287822a14ac1da3359a0db6ceb302b57edb9fcc69061f39276a3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-MacOSX-x86_64.sh">Anaconda3-2019.07-MacOSX-x86_64.sh</a></td>
      <td class="s">435.4M</td>
      <td>2019-07-25 09:37:06</td>
      <td>dcbddbab37c5b5f3873fe24d2617a4325bc7da28c0cd1d23a2edc7f0ebe08b7d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-Linux-ppc64le.sh">Anaconda3-2019.07-Linux-ppc64le.sh</a></td>
      <td class="s">326.0M</td>
      <td>2019-07-25 09:36:56</td>
      <td>e788094f7a18bfe14038accb26c8809a81291ed97f1fce29425f366aa8105548</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.07-Linux-x86_64.sh">Anaconda3-2019.07-Linux-x86_64.sh</a></td>
      <td class="s">516.8M</td>
      <td>2019-07-25 09:36:20</td>
      <td>69581cf739365ec7fb95608eef694ba959d7d33b36eb961953f2b82cb25bdf5a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-Linux-ppc64le.sh">Anaconda3-2019.03-Linux-ppc64le.sh</a></td>
      <td class="s">314.5M</td>
      <td>2019-04-04 16:00:58</td>
      <td>b4ecfca3b6d6c284a3f9370f6a5ccfac1b6be7fa75af9f6750a98fb315601ebb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-MacOSX-x86_64.pkg">Anaconda3-2019.03-MacOSX-x86_64.pkg</a></td>
      <td class="s">637.4M</td>
      <td>2019-04-04 16:00:33</td>
      <td>1d89450ec2b8236404bab5a47aaa9c69fd85b63c6a9b8c35960dfa11f7550538</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-Linux-x86_64.sh">Anaconda3-2019.03-Linux-x86_64.sh</a></td>
      <td class="s">654.1M</td>
      <td>2019-04-04 16:00:31</td>
      <td>45c851b7497cc14d5ca060064394569f724b67d9b5f98a926ed49b834a6bb73a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-Windows-x86_64.exe">Anaconda3-2019.03-Windows-x86_64.exe</a></td>
      <td class="s">661.7M</td>
      <td>2019-04-04 16:00:30</td>
      <td>d2c90169879f40816eac91bec585a1f9f788016fe0a8215ca066299e4b6531b9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-Windows-x86.exe">Anaconda3-2019.03-Windows-x86.exe</a></td>
      <td class="s">545.7M</td>
      <td>2019-04-04 16:00:28</td>
      <td>03d94f55c4c5e1187382ff414c78e66244893170fa7aacd0deb71536b7a925e5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2019.03-MacOSX-x86_64.sh">Anaconda3-2019.03-MacOSX-x86_64.sh</a></td>
      <td class="s">541.6M</td>
      <td>2019-04-04 16:00:27</td>
      <td>b232f0b16181f48667d2ca89c04a4ee4b3932475282b41c52acb87b4cdafcaaf</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-Windows-x86_64.exe">Anaconda3-2018.12-Windows-x86_64.exe</a></td>
      <td class="s">614.3M</td>
      <td>2018-12-21 13:14:34</td>
      <td>09d84a789013d5e2bfb0148bdd9f5d69a6baa2127edabb9a8e50e77c6fc57ecc</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-MacOSX-x86_64.pkg">Anaconda3-2018.12-MacOSX-x86_64.pkg</a></td>
      <td class="s">652.7M</td>
      <td>2018-12-21 13:14:32</td>
      <td>e40e076194df57f3fce8734acd5b2e3f60901ceeaea8ddbf5bd42284a2bce626</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-Linux-x86.sh">Anaconda3-2018.12-Linux-x86.sh</a></td>
      <td class="s">542.7M</td>
      <td>2018-12-21 13:13:14</td>
      <td>7895052814921d45ed0585d1fb19f8edd6fbd02b61639310f770e2ebe85cd975</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-MacOSX-x86_64.sh">Anaconda3-2018.12-MacOSX-x86_64.sh</a></td>
      <td class="s">557.0M</td>
      <td>2018-12-21 13:13:13</td>
      <td>4ccd3944d994fd47e5701c341725a63e984f8c042bf4dc19c9dfc7c135e7d8e4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-Windows-x86.exe">Anaconda3-2018.12-Windows-x86.exe</a></td>
      <td class="s">509.7M</td>
      <td>2018-12-21 13:13:12</td>
      <td>3f2955c1874ca452b985627a10859f6906eb21d4f6a4c055b78049cf6822b46d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-Linux-x86_64.sh">Anaconda3-2018.12-Linux-x86_64.sh</a></td>
      <td class="s">652.5M</td>
      <td>2018-12-21 13:13:06</td>
      <td>1019d0857e5865f8a6861eaf15bfe535b87e92b72ce4f531000dc672be7fce00</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2018.12-Linux-ppc64le.sh">Anaconda3-2018.12-Linux-ppc64le.sh</a></td>
      <td class="s">313.6M</td>
      <td>2018-12-21 13:13:03</td>
      <td>f636f747d5b581ea05e5f20edb1c9ae5db7d9a7923f404761495dfc75966a4f3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-Windows-x86.exe">Anaconda3-5.3.1-Windows-x86.exe</a></td>
      <td class="s">509.5M</td>
      <td>2018-11-19 13:39:54</td>
      <td>a028d0550bf307c69af7c3210f487e23004fcb6384f94523e216cc8021390da6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-Windows-x86_64.exe">Anaconda3-5.3.1-Windows-x86_64.exe</a></td>
      <td class="s">632.5M</td>
      <td>2018-11-19 13:38:59</td>
      <td>295fed5940369d4ea1e2c6d04d418619d9942c19d925921cbeb941bbc5bd7659</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-MacOSX-x86_64.sh">Anaconda3-5.3.1-MacOSX-x86_64.sh</a></td>
      <td class="s">543.7M</td>
      <td>2018-11-19 13:38:57</td>
      <td>23c373abce2463d4df495f5a1c7e8b0faec6eda09542d98f41ed65a0fa0dbde0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-MacOSX-x86_64.pkg">Anaconda3-5.3.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">634.0M</td>
      <td>2018-11-19 13:38:54</td>
      <td>ee9fb23d4beb30e5ed9d27d5703b46a02e23a93601373bc0de18bf6282116de0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-Linux-x86.sh">Anaconda3-5.3.1-Linux-x86.sh</a></td>
      <td class="s">527.3M</td>
      <td>2018-11-19 13:38:49</td>
      <td>5dab8b2c95595df7fa55b88643f8372135c14faabd9ec05a34021551bb0999a1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.1-Linux-x86_64.sh">Anaconda3-5.3.1-Linux-x86_64.sh</a></td>
      <td class="s">637.0M</td>
      <td>2018-11-19 13:38:46</td>
      <td>d4c4256a8f46173b675dd6a62d12f566ed3487f932bab6bb7058f06c124bcc27</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-MacOSX-x86_64.sh">Anaconda3-5.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">543.6M</td>
      <td>2018-09-27 16:01:41</td>
      <td>bc073b6e6d3b2ef29d01a2caf1de7c206c95968231ef0492d958eae1a314b4e9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-Linux-x86.sh">Anaconda3-5.3.0-Linux-x86.sh</a></td>
      <td class="s">527.2M</td>
      <td>2018-09-27 16:01:37</td>
      <td>c15ffac2ae35179a15dc5872e5bb405b4027a0fd76c6817e9cee39545bc5ca0b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-Linux-x86_64.sh">Anaconda3-5.3.0-Linux-x86_64.sh</a></td>
      <td class="s">636.9M</td>
      <td>2018-09-27 16:01:35</td>
      <td>cfbf5fe70dd1b797ec677e63c61f8efc92dad930fd1c94d60390bb07fdc09959</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-Linux-ppc64le.sh">Anaconda3-5.3.0-Linux-ppc64le.sh</a></td>
      <td class="s">305.1M</td>
      <td>2018-09-27 16:01:33</td>
      <td>550dd67626172a42eb0dd02a08bc78a67e8c8e97a08a5914e402f31e14f4875a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-Windows-x86.exe">Anaconda3-5.3.0-Windows-x86.exe</a></td>
      <td class="s">508.7M</td>
      <td>2018-09-27 16:00:05</td>
      <td>1dceb687efbf5a609a66d19dc2528ef78a54439a74c98b239041744174c6a461</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-Windows-x86_64.exe">Anaconda3-5.3.0-Windows-x86_64.exe</a></td>
      <td class="s">631.4M</td>
      <td>2018-09-27 15:59:20</td>
      <td>1083d05eeec45707940a6c7afb375a5f330d7a24a9de1e6f8d86b4f4e49be3fb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.3.0-MacOSX-x86_64.pkg">Anaconda3-5.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">633.9M</td>
      <td>2018-09-27 15:59:18</td>
      <td>013e9968f437f91f7a1dfdfe4c7d6f9d3b7f7aeab5c6766a867ecb01c13ee163</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-MacOSX-x86_64.sh">Anaconda3-5.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">523.3M</td>
      <td>2018-05-30 13:07:03</td>
      <td>c8089121dc89ffe8f9a0c01205bab75a112821a13d413152d6690f5eef094afa</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-MacOSX-x86_64.pkg">Anaconda3-5.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">613.1M</td>
      <td>2018-05-30 13:07:00</td>
      <td>dae8befc73d32b480faef31fa6fb73332579442a524bc68f6d475743f5bb84c0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-Linux-x86.sh">Anaconda3-5.2.0-Linux-x86.sh</a></td>
      <td class="s">507.3M</td>
      <td>2018-05-30 13:05:46</td>
      <td>f3527d085d06f35b6aeb96be2a9253ff9ec9ced3dc913c8e27e086329f3db588</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-Linux-x86_64.sh">Anaconda3-5.2.0-Linux-x86_64.sh</a></td>
      <td class="s">621.6M</td>
      <td>2018-05-30 13:05:43</td>
      <td>09f53738b0cd3bb96f5b1bac488e5528df9906be2480fe61df40e0e0d19e3d48</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-Linux-ppc64le.sh">Anaconda3-5.2.0-Linux-ppc64le.sh</a></td>
      <td class="s">288.3M</td>
      <td>2018-05-30 13:05:40</td>
      <td>024c811526ffc40ed6fa243a25795fbab5b41413372cd5a276aca69a930ef722</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-Windows-x86.exe">Anaconda3-5.2.0-Windows-x86.exe</a></td>
      <td class="s">506.3M</td>
      <td>2018-05-30 13:04:19</td>
      <td>64305a4c0041aaf4a3fd0fee4466d7b7f238fddd9e44a4c8c10f5fa059e826c6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.2.0-Windows-x86_64.exe">Anaconda3-5.2.0-Windows-x86_64.exe</a></td>
      <td class="s">631.3M</td>
      <td>2018-05-30 13:04:18</td>
      <td>2672f6537e2c8a79ae9540cf3c49b18bb9ba35caec649191b5fa1e759f15b4c3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-Windows-x86.exe">Anaconda3-5.1.0-Windows-x86.exe</a></td>
      <td class="s">435.5M</td>
      <td>2018-02-15 09:10:28</td>
      <td>7a05da21fd592991d181ac8467faac51345fb64acca6553609b53c9825e5e42d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-Windows-x86_64.exe">Anaconda3-5.1.0-Windows-x86_64.exe</a></td>
      <td class="s">537.1M</td>
      <td>2018-02-15 09:10:26</td>
      <td>7d192e58915d7e7fbfd0c987ddc4db38a22d5fc47a22db71ac5873ef9ba8a503</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-MacOSX-x86_64.sh">Anaconda3-5.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">511.3M</td>
      <td>2018-02-15 09:10:24</td>
      <td>be705b3c3a0ca29ee32ce7658890bb5edb32a9eadedc09dec3d7e3cfbfd23cb7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-MacOSX-x86_64.pkg">Anaconda3-5.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">594.7M</td>
      <td>2018-02-15 09:09:06</td>
      <td>d6bf6309ccafa84314d85ca7421fddc16057ac2d824d698a213ccd597e896897</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-Linux-x86.sh">Anaconda3-5.1.0-Linux-x86.sh</a></td>
      <td class="s">449.7M</td>
      <td>2018-02-15 09:08:58</td>
      <td>0e940272517d8f8a6f26316a19e4be2bdaea8477a3a32cc2ecee7b48fd0fae84</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-Linux-x86_64.sh">Anaconda3-5.1.0-Linux-x86_64.sh</a></td>
      <td class="s">551.2M</td>
      <td>2018-02-15 09:08:57</td>
      <td>7e6785caad25e33930bc03fac4994a434a21bc8401817b7efa28f53619fa9c29</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.1.0-Linux-ppc64le.sh">Anaconda3-5.1.0-Linux-ppc64le.sh</a></td>
      <td class="s">285.7M</td>
      <td>2018-02-15 09:08:56</td>
      <td>58d1d093450dabefef9279694c9345afed78acf1c334d64a9241bc725f45aa5f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-Windows-x86_64.exe">Anaconda3-5.0.1-Windows-x86_64.exe</a></td>
      <td class="s">514.8M</td>
      <td>2017-10-24 12:37:59</td>
      <td>0b1ec18b7425f8c8518d6dc2fc0bc8ec2f06ba57f15727aee4731a4f98278174</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-Windows-x86.exe">Anaconda3-5.0.1-Windows-x86.exe</a></td>
      <td class="s">420.4M</td>
      <td>2017-10-24 12:37:10</td>
      <td>9edc3012324c9c8c9aa5257688bd793277ee25bc99cffc8da6610b5f45585354</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-MacOSX-x86_64.pkg">Anaconda3-5.0.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">568.9M</td>
      <td>2017-10-23 20:01:19</td>
      <td>50c28594c785f5828990c95053468488563c775038b6744951847f9853ed0bbf</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-MacOSX-x86_64.sh">Anaconda3-5.0.1-MacOSX-x86_64.sh</a></td>
      <td class="s">491.0M</td>
      <td>2017-10-23 19:51:10</td>
      <td>f438a0af923bc1edc7bca53f496c59a668d1a08b48c768f443ad7f5ea2b8b3f8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-Linux-x86.sh">Anaconda3-5.0.1-Linux-x86.sh</a></td>
      <td class="s">431.0M</td>
      <td>2017-10-23 18:07:51</td>
      <td>991a4b656fcb0236864fbb27ff03bb7f3d98579205829b76b66f65cfa6734240</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.1-Linux-x86_64.sh">Anaconda3-5.0.1-Linux-x86_64.sh</a></td>
      <td class="s">525.3M</td>
      <td>2017-10-23 17:52:55</td>
      <td>55e4db1919f49c92d5abbf27a4be5986ae157f074bf9f8238963cd4582a4068a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0.1-Linux-x86.sh">Anaconda3-5.0.0.1-Linux-x86.sh</a></td>
      <td class="s">429.8M</td>
      <td>2017-10-02 10:50:15</td>
      <td>407576899d3aa546bc3c2c4a13cbc18ab5bab372c3388ea80087f29b32184bee</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0.1-Linux-x86_64.sh">Anaconda3-5.0.0.1-Linux-x86_64.sh</a></td>
      <td class="s">524.0M</td>
      <td>2017-10-02 10:50:14</td>
      <td>092c92427f44687d789a41922ce8426fbdc3c529cc9d6d4ee6de5b62954b93b2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-Windows-x86.exe">Anaconda3-5.0.0-Windows-x86.exe</a></td>
      <td class="s">415.8M</td>
      <td>2017-09-26 16:25:12</td>
      <td>a0d5d8e328b1d3a1ed921cadeecda659c49b6042980558f5c5f491e884bf842a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-MacOSX-x86_64.sh">Anaconda3-5.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">489.9M</td>
      <td>2017-09-26 16:25:11</td>
      <td>23df1e3a38a6b4aaa0ab559d0c1e51be76eca5d75cb595d473d223c8d17e762d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-MacOSX-x86_64.pkg">Anaconda3-5.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">567.2M</td>
      <td>2017-09-26 16:25:10</td>
      <td>06d959384869290845bc61346bb33a18dd02573836f50ba263b72028d2a6a5b1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-Linux-x86.sh">Anaconda3-5.0.0-Linux-x86.sh</a></td>
      <td class="s">429.3M</td>
      <td>2017-09-26 14:48:02</td>
      <td>634d2dfa97d19f2cc15e941cb4d059bc83a31facedfb9d02a980c4fa74f2776a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-Linux-x86_64.sh">Anaconda3-5.0.0-Linux-x86_64.sh</a></td>
      <td class="s">523.4M</td>
      <td>2017-09-26 14:37:22</td>
      <td>67f5c20232a3e493ea3f19a8e273e0618ab678fa14b03b59b1783613062143e9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-Windows-x86_64.exe">Anaconda3-5.0.0-Windows-x86_64.exe</a></td>
      <td class="s">510.0M</td>
      <td>2017-09-26 14:14:53</td>
      <td>53bd80727099b5767b9f20f99e908f9c19cea7572c14f9538dc1c8ca7ab5e742</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-5.0.0-Linux-ppc64le.sh">Anaconda3-5.0.0-Linux-ppc64le.sh</a></td>
      <td class="s">296.3M</td>
      <td>2017-09-25 14:39:31</td>
      <td>3574d423084e604a9d85a9f38ea481e0fc9e678923e2d3b9c4ec7340e16447ad</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0.1-Linux-ppc64le.sh">Anaconda3-4.4.0.1-Linux-ppc64le.sh</a></td>
      <td class="s">285.6M</td>
      <td>2017-07-26 16:08:42</td>
      <td>d7c367c9c4fffec37c31c6570218c9944867c96fde5e9b0249673beda24ba2d9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-MacOSX-x86_64.pkg">Anaconda3-4.4.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">442.5M</td>
      <td>2017-05-26 18:36:17</td>
      <td>c5fc645f11505ac3ef710023b4072b7fb24ad31634b48e793e50b067dc30154a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-MacOSX-x86_64.sh">Anaconda3-4.4.0-MacOSX-x86_64.sh</a></td>
      <td class="s">380.4M</td>
      <td>2017-05-26 18:35:59</td>
      <td>10fe58f09ae524df2548d17b8bb1e75db17da597a6ec10d695ce01387a2d7422</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-Linux-x86.sh">Anaconda3-4.4.0-Linux-x86.sh</a></td>
      <td class="s">428.7M</td>
      <td>2017-05-26 18:23:45</td>
      <td>b0e492206d43067314b25963bc7d1f012096ca0323b7629f4ebcd071b03905b5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-Linux-x86_64.sh">Anaconda3-4.4.0-Linux-x86_64.sh</a></td>
      <td class="s">499.0M</td>
      <td>2017-05-26 18:23:04</td>
      <td>3301b37e402f3ff3df216fe0458f1e6a4ccbb7e67b4d626eae9651de5ea3ab63</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-Windows-x86_64.exe">Anaconda3-4.4.0-Windows-x86_64.exe</a></td>
      <td class="s">437.6M</td>
      <td>2017-05-26 17:55:34</td>
      <td>ea582602541e748053df550514460426202fb4507edf9af4d7d706bc41044dca</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-Windows-x86.exe">Anaconda3-4.4.0-Windows-x86.exe</a></td>
      <td class="s">362.2M</td>
      <td>2017-05-26 17:54:21</td>
      <td>37afe00b8305cc09b7bd8dd07f65cec3f4e1534966c275eb55df7c91fb6601f1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.4.0-Linux-ppc64le.sh">Anaconda3-4.4.0-Linux-ppc64le.sh</a></td>
      <td class="s">290.7M</td>
      <td>2017-05-17 15:45:50</td>
      <td>605251829edecd0c39df8db856d4f09e406454468c3f128c14a7446a4efdf686</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-MacOSX-x86_64.pkg">Anaconda3-4.3.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">424.1M</td>
      <td>2017-03-06 16:26:27</td>
      <td>ca608d58b1acf77b5c77d10e937b9084e5997b8706445bac3754459e54c43f39</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-MacOSX-x86_64.sh">Anaconda3-4.3.1-MacOSX-x86_64.sh</a></td>
      <td class="s">363.4M</td>
      <td>2017-03-06 16:26:09</td>
      <td>a42267203e207cb5e0f539e0d879ead12e436311825c7114d0edd880d001b539</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-Windows-x86_64.exe">Anaconda3-4.3.1-Windows-x86_64.exe</a></td>
      <td class="s">422.1M</td>
      <td>2017-03-06 16:20:48</td>
      <td>65ce6d7c09884935fee9eb8d318b30e95f75f6efe8a8ba221df282cf22c390cd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-Windows-x86.exe">Anaconda3-4.3.1-Windows-x86.exe</a></td>
      <td class="s">348.1M</td>
      <td>2017-03-06 16:19:46</td>
      <td>adf322f49542cf509d4f72152cea24e54edfb4ff279ba3ab19582a5f27461329</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-Linux-x86.sh">Anaconda3-4.3.1-Linux-x86.sh</a></td>
      <td class="s">399.3M</td>
      <td>2017-03-06 16:12:47</td>
      <td>7b70bdba282a18ddbdc167afe8131f7532076cb1df8d3fbbd13e79ca3afaa2c1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.1-Linux-x86_64.sh">Anaconda3-4.3.1-Linux-x86_64.sh</a></td>
      <td class="s">474.3M</td>
      <td>2017-03-06 16:12:24</td>
      <td>4447b93d2c779201e5fb50cfc45de0ec96c3804e7ad0fe201ab6b99f73e90302</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0.1-Windows-x86_64.exe">Anaconda3-4.3.0.1-Windows-x86_64.exe</a></td>
      <td class="s">421.2M</td>
      <td>2017-02-02 14:22:10</td>
      <td>b5954bf7da9a92d351d905dfdfa0e7bee1cfdf8c74ed0532a29416849a92bb2f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0.1-Windows-x86.exe">Anaconda3-4.3.0.1-Windows-x86.exe</a></td>
      <td class="s">347.2M</td>
      <td>2017-02-02 14:21:02</td>
      <td>7f8ffce6b2c3a968ce19171c9dc332dec61741113f7cac4b52953596f9e200d7</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-MacOSX-x86_64.pkg">Anaconda3-4.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">423.1M</td>
      <td>2017-01-27 14:26:32</td>
      <td>f4522ac099ba292940bb47429e8e53eb9a0fe2ad3421513b2d618d0766337c17</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-MacOSX-x86_64.sh">Anaconda3-4.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">362.6M</td>
      <td>2017-01-27 14:26:15</td>
      <td>c53059b810c5e7a9a5ef9c46a7ed76675dfc7183f4ea867b4d81449cbd5a093d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-Windows-x86_64.exe">Anaconda3-4.3.0-Windows-x86_64.exe</a></td>
      <td class="s">421.2M</td>
      <td>2017-01-27 14:19:41</td>
      <td>324568dbef777a6ac8a25c1e8ae1975ffbd95bb621dc91cb3869606cc5924353</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-Windows-x86.exe">Anaconda3-4.3.0-Windows-x86.exe</a></td>
      <td class="s">347.2M</td>
      <td>2017-01-27 14:18:45</td>
      <td>4a5dfea30b926074b4d6e0f1cea3e9765799fd33532b4347fa0d3d9aaacfe889</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-Linux-x86_64.sh">Anaconda3-4.3.0-Linux-x86_64.sh</a></td>
      <td class="s">473.4M</td>
      <td>2017-01-27 14:15:21</td>
      <td>e9169c3a5029aa820393ac92704eb9ee0701778a085ca7bdc3c57b388ac1beb6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.3.0-Linux-x86.sh">Anaconda3-4.3.0-Linux-x86.sh</a></td>
      <td class="s">398.4M</td>
      <td>2017-01-27 14:14:29</td>
      <td>f7ce2eeec3e42c2ba1ee3b9fcd670478fd30f4be547c6e0a675d183c4ca9dd9b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-MacOSX-x86_64.pkg">Anaconda3-4.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">407.1M</td>
      <td>2016-10-17 19:33:47</td>
      <td>44fe57910aa10967c4afe41ab5663cb49235bc718a9b7c8912d3ec7f95485152</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-Windows-x86_64.exe">Anaconda3-4.2.0-Windows-x86_64.exe</a></td>
      <td class="s">391.4M</td>
      <td>2016-09-27 15:57:21</td>
      <td>84e30c99833e142a27fc9ee2c748b03f16c8b1a3ced765024d5db4e68bfbfeeb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-Windows-x86.exe">Anaconda3-4.2.0-Windows-x86.exe</a></td>
      <td class="s">333.4M</td>
      <td>2016-09-27 15:56:30</td>
      <td>e7b79a9886da3f840b52882c47ecab3eda0c97505019c1f8f0c8b7eb15c2d638</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-Linux-x86.sh">Anaconda3-4.2.0-Linux-x86.sh</a></td>
      <td class="s">373.9M</td>
      <td>2016-09-27 15:50:34</td>
      <td>1a8320635f2f06ec9d8610e77d6d0f9cb2c5d11d20a4ff7fcda113e04b0a8a50</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-MacOSX-x86_64.sh">Anaconda3-4.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">349.5M</td>
      <td>2016-09-27 15:50:07</td>
      <td>95448921601e1952e01a17ba9767cd3621c154af7fc52dd6b7f57d462155a358</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.2.0-Linux-x86_64.sh">Anaconda3-4.2.0-Linux-x86_64.sh</a></td>
      <td class="s">455.9M</td>
      <td>2016-09-27 15:50:04</td>
      <td>73b51715a12b6382dd4df3dd1905b531bd6792d4aa7273b2377a0436d45f0e78</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-Windows-x86.exe">Anaconda3-4.1.1-Windows-x86.exe</a></td>
      <td class="s">293.8M</td>
      <td>2016-07-08 11:21:18</td>
      <td>224e3dd90850651ae0d1c9216b4c317d1d553d8c118a83c9bc7e315daf85f063</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-Windows-x86_64.exe">Anaconda3-4.1.1-Windows-x86_64.exe</a></td>
      <td class="s">352.9M</td>
      <td>2016-07-08 11:21:17</td>
      <td>b4889513dc574f9d6f96db089315d69d293f8b17635da4d2e6eee118dc105f38</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-MacOSX-x86_64.sh">Anaconda3-4.1.1-MacOSX-x86_64.sh</a></td>
      <td class="s">298.7M</td>
      <td>2016-07-08 11:21:17</td>
      <td>7c3c06e9281c41f1213d357cb5f233fd99d6d0db6bdba8d9fd7cfad1f1a85df9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-MacOSX-x86_64.pkg">Anaconda3-4.1.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">347.9M</td>
      <td>2016-07-08 11:21:15</td>
      <td>b5e8cf44958d0aa03a7cc2da15fa835b1e14612b43b9772aef3270079d9b5a72</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-Linux-x86_64.sh">Anaconda3-4.1.1-Linux-x86_64.sh</a></td>
      <td class="s">406.3M</td>
      <td>2016-07-08 11:20:02</td>
      <td>4f5c95feb0e7efeadd3d348dcef117d7787c799f24b0429e45017008f3534e55</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.1-Linux-x86.sh">Anaconda3-4.1.1-Linux-x86.sh</a></td>
      <td class="s">329.1M</td>
      <td>2016-07-08 11:20:02</td>
      <td>931626363f4030c7a1e8897549b1d3589dc3f429874dc3dd8a79869ecf5c895c</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-Windows-x86.exe">Anaconda3-4.1.0-Windows-x86.exe</a></td>
      <td class="s">292.6M</td>
      <td>2016-06-28 11:28:34</td>
      <td>4f444ed9400505e822bb475e986800fac058ef6f23298c2b00d285d05df0a4e4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-Windows-x86_64.exe">Anaconda3-4.1.0-Windows-x86_64.exe</a></td>
      <td class="s">351.4M</td>
      <td>2016-06-28 11:28:33</td>
      <td>9acde60b591233452dba23ac15800f39f2de9b7a180a89916dfa3b6edb326250</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-MacOSX-x86_64.sh">Anaconda3-4.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">297.6M</td>
      <td>2016-06-28 11:28:33</td>
      <td>4c45c8d75665fa5194ebe4e355d3427f5aa385f77eb2b5002c0c78d8ae7f2200</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-MacOSX-x86_64.pkg">Anaconda3-4.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">346.7M</td>
      <td>2016-06-28 11:28:32</td>
      <td>83772b5fcd3d6deb945316ec96ecc7b0cdcd58c2c7a23f8f616771704e75aea6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-Linux-x86.sh">Anaconda3-4.1.0-Linux-x86.sh</a></td>
      <td class="s">328.4M</td>
      <td>2016-06-28 11:28:32</td>
      <td>7764093f337a43e4962b12d01508c1a385f0f62c1ddc006b69af95ae763fc4c2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.1.0-Linux-x86_64.sh">Anaconda3-4.1.0-Linux-x86_64.sh</a></td>
      <td class="s">405.0M</td>
      <td>2016-06-28 11:28:31</td>
      <td>11d32cf4026603d3b327dc4299863be6b815905ff51a80329085e1bb9f96c8bd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-Windows-x86_64.exe">Anaconda3-4.0.0-Windows-x86_64.exe</a></td>
      <td class="s">345.4M</td>
      <td>2016-03-29 11:16:22</td>
      <td>39bf467cd142c1f8fdb7d673fdea273d87ec011af1dbf4b4804c2b0994c61c56</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-Windows-x86.exe">Anaconda3-4.0.0-Windows-x86.exe</a></td>
      <td class="s">283.1M</td>
      <td>2016-03-29 11:16:22</td>
      <td>b5a31a9d130a40c3110c0592a6c8fbd43a51522e32fdddf20afe15595db8019f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-MacOSX-x86_64.sh">Anaconda3-4.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">292.7M</td>
      <td>2016-03-29 11:16:21</td>
      <td>704a776c0cf3fcca6e0c5a1e6b6043728229cfac813bff28f003157771824036</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-MacOSX-x86_64.pkg">Anaconda3-4.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">341.5M</td>
      <td>2016-03-29 11:16:08</td>
      <td>32a089b1be465a8b03c837041bbfbcb761d644893719329ee59b253221456be1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-Linux-x86.sh">Anaconda3-4.0.0-Linux-x86.sh</a></td>
      <td class="s">336.9M</td>
      <td>2016-03-29 11:15:03</td>
      <td>e1469fa0d24de12f33661ce3d7a06d77968be8822f366a61a0018a3850ab56b0</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-4.0.0-Linux-x86_64.sh">Anaconda3-4.0.0-Linux-x86_64.sh</a></td>
      <td class="s">398.4M</td>
      <td>2016-03-29 11:15:02</td>
      <td>36a558a1109868661a5735f5f32607643f6dc05cf581fefb1c10fb8abbe22f39</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-MacOSX-x86_64.pkg">Anaconda3-2.5.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">369.8M</td>
      <td>2016-02-03 15:56:04</td>
      <td>b1a6945f0f025086806624c59de5d92e5234bb39a18b5517d8b1e0dc30b3bde9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-Windows-x86_64.exe">Anaconda3-2.5.0-Windows-x86_64.exe</a></td>
      <td class="s">361.1M</td>
      <td>2016-02-03 15:47:40</td>
      <td>4728044d77da715e48d4c95d7f2e3c2a02c4ea7de9d2c69acc851bf2945005b2</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-Windows-x86.exe">Anaconda3-2.5.0-Windows-x86.exe</a></td>
      <td class="s">296.3M</td>
      <td>2016-02-03 15:46:53</td>
      <td>4a3441aaaa269d06f39e1430155f9f25a8a24122cf48b9fc6bdccb0e96a82819</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-Linux-x86.sh">Anaconda3-2.5.0-Linux-x86.sh</a></td>
      <td class="s">334.4M</td>
      <td>2016-02-03 15:42:07</td>
      <td>22ac26c8bde7c4153ea859f6f6d8aca93bbf1e213d800167ad5ea530c62959af</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-MacOSX-x86_64.sh">Anaconda3-2.5.0-MacOSX-x86_64.sh</a></td>
      <td class="s">318.3M</td>
      <td>2016-02-03 15:41:27</td>
      <td>9bb0f926927db210f8c2a8de881213d1a44c7b3d6dbcb93dfa6b99ed4bbd3e61</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.5.0-Linux-x86_64.sh">Anaconda3-2.5.0-Linux-x86_64.sh</a></td>
      <td class="s">395.6M</td>
      <td>2016-02-03 15:41:27</td>
      <td>addadcb927f15cb0b5b6e36890563d3352a8ff6a901ea753d389047d274a29a9</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-Windows-x86.exe">Anaconda3-2.4.1-Windows-x86.exe</a></td>
      <td class="s">299.1M</td>
      <td>2015-12-08 15:00:56</td>
      <td>dfe50d13473547b5230f6194dfe6bdff961a8b7f5e3c22edef8c7788194b7129</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-Windows-x86_64.exe">Anaconda3-2.4.1-Windows-x86_64.exe</a></td>
      <td class="s">363.7M</td>
      <td>2015-12-08 15:00:55</td>
      <td>21d155a4b43805042499b8d008835bcdfd9c3a45fe53d1183de9e0a937170679</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-MacOSX-x86_64.sh">Anaconda3-2.4.1-MacOSX-x86_64.sh</a></td>
      <td class="s">213.9M</td>
      <td>2015-12-08 15:00:54</td>
      <td>22a3267638da9b7d64210d7da90d8762da7948234c21c0010a74f2621ee0ef68</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-MacOSX-x86_64.pkg">Anaconda3-2.4.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">247.6M</td>
      <td>2015-12-08 15:00:54</td>
      <td>95e9f2d370f7816ed72b862c9413c973efb2ca17edd4d84550ce33e0d16d8774</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-Linux-x86_64.sh">Anaconda3-2.4.1-Linux-x86_64.sh</a></td>
      <td class="s">270.7M</td>
      <td>2015-12-08 15:00:53</td>
      <td>0735e69199fc37135930ea2fd4fb6ad0adef215a2a7ba9fd6b0a0a4daaadb1cf</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.1-Linux-x86.sh">Anaconda3-2.4.1-Linux-x86.sh</a></td>
      <td class="s">253.2M</td>
      <td>2015-12-08 15:00:53</td>
      <td>00d13413f5b8129e863dabcc2296a181c697056c5ed210739a0aa06454ab7038</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-Windows-x86.exe">Anaconda3-2.4.0-Windows-x86.exe</a></td>
      <td class="s">316.4M</td>
      <td>2015-11-02 16:22:25</td>
      <td>a69a9fe00ce337b0cfd7d024b79ba5141cd04b1d51982196658df26c0d3707fc</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-Windows-x86_64.exe">Anaconda3-2.4.0-Windows-x86_64.exe</a></td>
      <td class="s">392.3M</td>
      <td>2015-11-02 16:22:24</td>
      <td>beaa1b803dd30022c6aca1c6f05182beaea3cd8a17130f73906851269dfe0783</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-MacOSX-x86_64.sh">Anaconda3-2.4.0-MacOSX-x86_64.sh</a></td>
      <td class="s">233.8M</td>
      <td>2015-11-02 16:22:23</td>
      <td>f0cd785dbed0bab28dfc08a391c9de1b01633422fa317cb8365513a1ae5ae074</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-MacOSX-x86_64.pkg">Anaconda3-2.4.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">267.4M</td>
      <td>2015-11-02 16:22:23</td>
      <td>791f045258bd39bbcdbb4c5425dce082ecd194074edd99fb401d746ad58dae4f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-Linux-x86_64.sh">Anaconda3-2.4.0-Linux-x86_64.sh</a></td>
      <td class="s">285.2M</td>
      <td>2015-11-02 16:22:22</td>
      <td>fb4e480059e991f2fa632b5a9bcdd284c7f0677814cd719c11d524453f96a40d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.4.0-Linux-x86.sh">Anaconda3-2.4.0-Linux-x86.sh</a></td>
      <td class="s">277.4M</td>
      <td>2015-11-02 16:22:22</td>
      <td>f6080c6493cefc603cfeb67aaf6c3c4c6b80a66788f03db48ffd3cfa52017c0a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-Windows-x86.exe">Anaconda3-2.3.0-Windows-x86.exe</a></td>
      <td class="s">281.1M</td>
      <td>2015-07-01 13:35:15</td>
      <td>02d5f84da308f96d1a252a6669f3ca91e125c011d1b89ae33f05f6ebe49031a8</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-Windows-x86_64.exe">Anaconda3-2.3.0-Windows-x86_64.exe</a></td>
      <td class="s">336.4M</td>
      <td>2015-07-01 13:35:14</td>
      <td>bd693b61cf191666ae0473327f3c15bcf32b7d09961a0aa0284c10e7ea7240fb</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-MacOSX-x86_64.sh">Anaconda3-2.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">257.4M</td>
      <td>2015-07-01 13:35:14</td>
      <td>6a0c94a49f41f9fda0138c8e966bd7b0a8965d6648fd21ffbd645d1453848ba5</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-MacOSX-x86_64.pkg">Anaconda3-2.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">292.8M</td>
      <td>2015-07-01 13:35:13</td>
      <td>0b936ab3067bbf32b5a52768f31ff437f0e01fbcee028698444d1a964209cc1c</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-Linux-x86.sh">Anaconda3-2.3.0-Linux-x86.sh</a></td>
      <td class="s">322.6M</td>
      <td>2015-07-01 13:35:13</td>
      <td>4cc10d65c303191004ada2b6d75562c8ed84e42bf9871af06440dd956077b555</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.3.0-Linux-x86_64.sh">Anaconda3-2.3.0-Linux-x86_64.sh</a></td>
      <td class="s">336.7M</td>
      <td>2015-07-01 13:35:12</td>
      <td>3be5410b2d9db45882c7de07c554cf4f1034becc274ec9074b23fd37a5c87a6f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-Windows-x86_64.exe">Anaconda3-2.2.0-Windows-x86_64.exe</a></td>
      <td class="s">332.6M</td>
      <td>2015-03-25 15:32:30</td>
      <td>28c5a13b27a9dbd57c7c633316c5f4beb0cd32cf19b148debd1a81eac86f3c7a</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-Windows-x86.exe">Anaconda3-2.2.0-Windows-x86.exe</a></td>
      <td class="s">277.7M</td>
      <td>2015-03-25 15:31:19</td>
      <td>20c46fff048fb313aaf1a49171c1a7b96a42f5be09e1e1e7052800dcec7ac85f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-MacOSX-x86_64.pkg">Anaconda3-2.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">288.8M</td>
      <td>2015-03-25 15:28:12</td>
      <td>16a5154267d7d52d3e7e0d12ec3405077df799c77ce382a3358238352656a1b4</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-Linux-x86_64.sh">Anaconda3-2.2.0-Linux-x86_64.sh</a></td>
      <td class="s">326.9M</td>
      <td>2015-03-25 15:20:14</td>
      <td>4aac68743e7706adb93f042f970373a6e7e087dbf4b02ac467c94ca4ce33d2d1</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-Linux-x86.sh">Anaconda3-2.2.0-Linux-x86.sh</a></td>
      <td class="s">313.3M</td>
      <td>2015-03-25 15:20:07</td>
      <td>223655cd256aa912dfc83ab24570e47bb3808bc3b0c6bd21b5db0fcf2750883e</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.2.0-MacOSX-x86_64.sh">Anaconda3-2.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">254.5M</td>
      <td>2015-03-25 15:17:44</td>
      <td>81a2089ea6127717f146454e99ea0be2bd595193e4151bb05b4c15749b1d8124</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-MacOSX-x86_64.pkg">Anaconda3-2.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">277.3M</td>
      <td>2014-09-25 11:40:54</td>
      <td>2780df02f400e44c0adcd209825fdcf955559fe42f5b3689d5c46a01bdec2145</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-Windows-x86_64.exe">Anaconda3-2.1.0-Windows-x86_64.exe</a></td>
      <td class="s">363.3M</td>
      <td>2014-09-25 11:11:03</td>
      <td>ea4059469b1820069f62bd6c256def6259d801d7382be70523e081c5adbedcfd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-Windows-x86.exe">Anaconda3-2.1.0-Windows-x86.exe</a></td>
      <td class="s">308.7M</td>
      <td>2014-09-25 11:09:01</td>
      <td>8ffa252aa2b4f63889888ae85a81626ce952a1f9ac20d4c065070514acfad400</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-MacOSX-x86_64.sh">Anaconda3-2.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">243.5M</td>
      <td>2014-09-25 10:53:23</td>
      <td>efdb7e9d1e539cbed62dc3874b0de6a141f36684e6fbc05018e072b217e24077</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-Linux-x86.sh">Anaconda3-2.1.0-Linux-x86.sh</a></td>
      <td class="s">317.7M</td>
      <td>2014-09-25 10:50:35</td>
      <td>657cb599004c21e37ce693515ea33922e0084fd7c159ef1b96b57c86eed8385f</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.1.0-Linux-x86_64.sh">Anaconda3-2.1.0-Linux-x86_64.sh</a></td>
      <td class="s">332.8M</td>
      <td>2014-09-25 10:50:20</td>
      <td>af3225ccbe8df0ffb918939e009aa57740e35058ebf9dfcf5fec794a77556c3c</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-Windows-x86.exe">Anaconda3-2.0.1-Windows-x86.exe</a></td>
      <td class="s">265.7M</td>
      <td>2014-06-12 15:00:27</td>
      <td>b08803296d7439413d590fd1f967b20127916c8d766802a27badc15a3a81b0c3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-Windows-x86_64.exe">Anaconda3-2.0.1-Windows-x86_64.exe</a></td>
      <td class="s">319.8M</td>
      <td>2014-06-12 15:00:15</td>
      <td>e2b6d3d6a9e378fc0d0dd63342417c02bdf6a9676040e05ff8017396d6449c11</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-MacOSX-x86_64.sh">Anaconda3-2.0.1-MacOSX-x86_64.sh</a></td>
      <td class="s">203.3M</td>
      <td>2014-06-12 15:00:09</td>
      <td>7a08509d4e45efcc7055a6d06d8406a773716500bd869a4e85312ff131155bd6</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-MacOSX-x86_64.pkg">Anaconda3-2.0.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">230.7M</td>
      <td>2014-06-12 15:00:05</td>
      <td>0d53815a83a50bdcfcb5ada686f582730bcc93b95295dd04572ee5162724ec9b</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-Linux-x86.sh">Anaconda3-2.0.1-Linux-x86.sh</a></td>
      <td class="s">287.7M</td>
      <td>2014-06-12 15:00:00</td>
      <td>21293fabbd3d5cfbb1afe0c9a8b39e0bc4d283cd7dbe3c84a60b335481a41ef3</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.1-Linux-x86_64.sh">Anaconda3-2.0.1-Linux-x86_64.sh</a></td>
      <td class="s">304.8M</td>
      <td>2014-06-12 14:59:53</td>
      <td>3c3b834793e461f3316ad1d9a9178c67859a9d74aaf7bcade076f04134dd1e26</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-MacOSX-x86_64.sh">Anaconda3-2.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">195.3M</td>
      <td>2014-05-27 17:02:53</td>
      <td>776a1cf8a8e898b41bb6558c093632cc922698dc48486fee35d1e8eae3f604fa</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-Windows-x86_64.exe">Anaconda3-2.0.0-Windows-x86_64.exe</a></td>
      <td class="s">310.9M</td>
      <td>2014-05-27 17:01:42</td>
      <td>a8046fc82da7463ef53cdeaba97c72433c37b211c50fa87f1bc19bdfe5163328</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-Windows-x86.exe">Anaconda3-2.0.0-Windows-x86.exe</a></td>
      <td class="s">256.9M</td>
      <td>2014-05-27 16:59:13</td>
      <td>37986ce4c104ed3c82838de74b3a4de17918cc2f408235b9de9d4283d3a5561d</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-Linux-x86.sh">Anaconda3-2.0.0-Linux-x86.sh</a></td>
      <td class="s">277.5M</td>
      <td>2014-05-27 16:35:55</td>
      <td>439761159d5604e182951650a478dd53caff52e9dccf17c20ae66689b7b289dd</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-MacOSX-x86_64.pkg">Anaconda3-2.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">222.9M</td>
      <td>2014-05-27 16:30:16</td>
      <td>4d4189ec0c514d344389e216b3ad4eeacd667426d902c5da416ebd7caa54d253</td>
    </tr>
    <tr>
      <td><a href="Anaconda3-2.0.0-Linux-x86_64.sh">Anaconda3-2.0.0-Linux-x86_64.sh</a></td>
      <td class="s">294.4M</td>
      <td>2014-05-27 16:26:59</td>
      <td>57ce4f97e300cf94c5724f72d992e9eecef708fdaa13bc672ae9779773056540</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-MacOSX-x86_64.sh">Anaconda2-2019.10-MacOSX-x86_64.sh</a></td>
      <td class="s">408.8M</td>
      <td>2019-10-15 09:27:31</td>
      <td>463cbd0b90c47d02ec341377110653870c7cc9d65572c655c5e44aaf2ccb280d</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-MacOSX-x86_64.pkg">Anaconda2-2019.10-MacOSX-x86_64.pkg</a></td>
      <td class="s">635.7M</td>
      <td>2019-10-15 09:27:30</td>
      <td>d82b6aa37b41782b7823ff712b0899374cf2ac4f87e0ccf85d0a79089ecb61a6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-Windows-x86.exe">Anaconda2-2019.10-Windows-x86.exe</a></td>
      <td class="s">355.6M</td>
      <td>2019-10-15 09:26:15</td>
      <td>b4731acd02f96923922d995bb16984d71b4a934b7af6737984dd9eb5d8cc6389</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-Linux-ppc64le.sh">Anaconda2-2019.10-Linux-ppc64le.sh</a></td>
      <td class="s">295.3M</td>
      <td>2019-10-15 09:26:13</td>
      <td>0521743829c1b3c301542a20fa0daecda20ee85a69e57b5751a07c629001587b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-Windows-x86_64.exe">Anaconda2-2019.10-Windows-x86_64.exe</a></td>
      <td class="s">412.8M</td>
      <td>2019-10-15 09:26:08</td>
      <td>3e09c8e95e10f077be1e1d26f26df8d6a13356449e06d7d47ddc066fbaf435f5</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.10-Linux-x86_64.sh">Anaconda2-2019.10-Linux-x86_64.sh</a></td>
      <td class="s">477.4M</td>
      <td>2019-10-15 09:26:03</td>
      <td>8b2e7dea2da7d8cc18e822e8ec1804052102f4eefb94c1b3d0e586e126e8cd2f</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-MacOSX-x86_64.sh">Anaconda2-2019.07-MacOSX-x86_64.sh</a></td>
      <td class="s">407.8M</td>
      <td>2019-07-25 09:37:45</td>
      <td>3e63919eed116826e683ed7d480d06517de79564788fbc27cb8d8879697eb654</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-MacOSX-x86_64.pkg">Anaconda2-2019.07-MacOSX-x86_64.pkg</a></td>
      <td class="s">634.1M</td>
      <td>2019-07-25 09:37:04</td>
      <td>7f8a0defa2905bd5e3ca679d6772c896befe2fcf27cb3d6dfc211e596796a3fa</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-Windows-x86.exe">Anaconda2-2019.07-Windows-x86.exe</a></td>
      <td class="s">360.5M</td>
      <td>2019-07-25 09:36:49</td>
      <td>1bd676a51ccdee57c2c01a2bc87fa8b1bd48cf7a6c0b16c44a241374f798f919</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-Linux-ppc64le.sh">Anaconda2-2019.07-Linux-ppc64le.sh</a></td>
      <td class="s">298.2M</td>
      <td>2019-07-25 09:36:29</td>
      <td>ee7f61dab233cdd0acb376ad55e977b16fdc03602f87a98dafb10d5fe9f5a190</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-Windows-x86_64.exe">Anaconda2-2019.07-Windows-x86_64.exe</a></td>
      <td class="s">427.2M</td>
      <td>2019-07-25 09:36:11</td>
      <td>fb7493a5c40d28ab47e54c57f025186dc26309183b21c8a0df733837e86b1aad</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.07-Linux-x86_64.sh">Anaconda2-2019.07-Linux-x86_64.sh</a></td>
      <td class="s">476.1M</td>
      <td>2019-07-25 09:36:01</td>
      <td>189e16e7adf9ba4b7b7d06ecdc10ce4ad4153e5e3505b9331f3d142243e18e97</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-MacOSX-x86_64.pkg">Anaconda2-2019.03-MacOSX-x86_64.pkg</a></td>
      <td class="s">624.3M</td>
      <td>2019-04-04 16:01:08</td>
      <td>4e335d60fc9dcfb31caee809143352e28d49e4b2df93a6eeed97ee5a97045366</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-Windows-x86_64.exe">Anaconda2-2019.03-Windows-x86_64.exe</a></td>
      <td class="s">586.9M</td>
      <td>2019-04-04 16:00:53</td>
      <td>96c21ae0d152755e8f4ac4a593da4063e0f3796064dbe25dbbad163e926f94ec</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-Windows-x86.exe">Anaconda2-2019.03-Windows-x86.exe</a></td>
      <td class="s">492.5M</td>
      <td>2019-04-04 16:00:43</td>
      <td>76be4b3d1f7a1207b786cbb54b3ed526126ee0d4facf41e662b4136224581860</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-Linux-ppc64le.sh">Anaconda2-2019.03-Linux-ppc64le.sh</a></td>
      <td class="s">291.3M</td>
      <td>2019-04-04 16:00:36</td>
      <td>3ab35c11b50ff26965266655d7dc76cf229336ee11b8b0c364ec1ba596ba9e07</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-Linux-x86_64.sh">Anaconda2-2019.03-Linux-x86_64.sh</a></td>
      <td class="s">629.5M</td>
      <td>2019-04-04 16:00:35</td>
      <td>cedfee5b5a3f62fcdac0a1d2d12396d0f232d2213d24d6dc893df5d8e64b8773</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2019.03-MacOSX-x86_64.sh">Anaconda2-2019.03-MacOSX-x86_64.sh</a></td>
      <td class="s">530.2M</td>
      <td>2019-04-04 16:00:34</td>
      <td>414917d00deaeefa38719992e6437470f54793718ef4bedcd66b0e5a30dbe4b6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-Windows-x86.exe">Anaconda2-2018.12-Windows-x86.exe</a></td>
      <td class="s">458.6M</td>
      <td>2018-12-21 13:16:27</td>
      <td>d75d51c8f9a7c345128805a55db3856f6999dd6aa11f31c0009c640fe0e8da61</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-Windows-x86_64.exe">Anaconda2-2018.12-Windows-x86_64.exe</a></td>
      <td class="s">560.6M</td>
      <td>2018-12-21 13:16:17</td>
      <td>7571d334eac3b9bd4f3e199fc5f493f0601890620c22e6d487246bde90497425</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-Linux-ppc64le.sh">Anaconda2-2018.12-Linux-ppc64le.sh</a></td>
      <td class="s">289.7M</td>
      <td>2018-12-21 13:14:33</td>
      <td>4ff037544f9191e24887176b44b04100c27b846220d978ae35daa85507f5c263</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-MacOSX-x86_64.sh">Anaconda2-2018.12-MacOSX-x86_64.sh</a></td>
      <td class="s">547.1M</td>
      <td>2018-12-21 13:14:31</td>
      <td>5c590b1b3cdc2eedd52edce0caabbce6665d84084d31b913e789e8c46a94859d</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-MacOSX-x86_64.pkg">Anaconda2-2018.12-MacOSX-x86_64.pkg</a></td>
      <td class="s">640.7M</td>
      <td>2018-12-21 13:14:30</td>
      <td>f07fb39c41f9cc7839adababdece209d9da209a935418082f9a6270e9e56ee3f</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-Linux-x86.sh">Anaconda2-2018.12-Linux-x86.sh</a></td>
      <td class="s">518.6M</td>
      <td>2018-12-21 13:13:15</td>
      <td>e086c041695c0e50642aee8f4e7adad3185c6ce1d11737665653497d2edd78fd</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2018.12-Linux-x86_64.sh">Anaconda2-2018.12-Linux-x86_64.sh</a></td>
      <td class="s">628.2M</td>
      <td>2018-12-21 13:13:10</td>
      <td>1821d4b623ed449e0acb6df3ecbabd3944cffa98f96a5234b7a102a7c0853dc6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-Windows-x86.exe">Anaconda2-5.3.1-Windows-x86.exe</a></td>
      <td class="s">458.1M</td>
      <td>2018-11-19 13:38:32</td>
      <td>59680be839aa8b58477a24519a7575756bead26b300eb7aae8c82086781bd3a8</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-Windows-x86_64.exe">Anaconda2-5.3.1-Windows-x86_64.exe</a></td>
      <td class="s">580.1M</td>
      <td>2018-11-19 13:37:47</td>
      <td>63b8a687cddcf462f9f61993d07ba88389c413265d3035a1b1bdb2c481592f1c</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-MacOSX-x86_64.sh">Anaconda2-5.3.1-MacOSX-x86_64.sh</a></td>
      <td class="s">539.0M</td>
      <td>2018-11-19 13:37:43</td>
      <td>df81e9d5d7d4c6595609a8d353eab80102a83b49cf8c19e5c1e5ad4ac0f39328</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-MacOSX-x86_64.pkg">Anaconda2-5.3.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">628.4M</td>
      <td>2018-11-19 13:37:38</td>
      <td>7dc614e281df33f09fa006b245a955b94883d37fdecea6bbdaee18ee421473cb</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-Linux-x86.sh">Anaconda2-5.3.1-Linux-x86.sh</a></td>
      <td class="s">507.6M</td>
      <td>2018-11-19 13:37:35</td>
      <td>a38017dfa59141c63ec9882a15bd35e7ce63810ae0d1bcf47c79b7fb9f83e969</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.1-Linux-x86_64.sh">Anaconda2-5.3.1-Linux-x86_64.sh</a></td>
      <td class="s">617.8M</td>
      <td>2018-11-19 13:37:31</td>
      <td>f0650ad2f9ca4ae3f3162d7204a32950bc794f37f322eb47b5ad9412454f998c</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-MacOSX-x86_64.sh">Anaconda2-5.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">538.9M</td>
      <td>2018-09-27 16:00:31</td>
      <td>bea3eb7667d265c8fe678ddde8432ac1f8286224baae498d092bb068b8185e88</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-Linux-x86.sh">Anaconda2-5.3.0-Linux-x86.sh</a></td>
      <td class="s">507.5M</td>
      <td>2018-09-27 16:00:27</td>
      <td>58d4229ad7097e1f3387d7f6582dcf2bbc684bffea284cd25096bd87530ba590</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-Linux-x86_64.sh">Anaconda2-5.3.0-Linux-x86_64.sh</a></td>
      <td class="s">617.6M</td>
      <td>2018-09-27 16:00:25</td>
      <td>50eeaab24bfa2472bc6485fe8f0e612ed67e561eda1ff9fbf07b62c96443c1be</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-Linux-ppc64le.sh">Anaconda2-5.3.0-Linux-ppc64le.sh</a></td>
      <td class="s">285.7M</td>
      <td>2018-09-27 16:00:22</td>
      <td>b71cdf75ca10875d49170eb64a02920f47a69167d168fad694bb95ab91dbbd34</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-Windows-x86.exe">Anaconda2-5.3.0-Windows-x86.exe</a></td>
      <td class="s">457.2M</td>
      <td>2018-09-27 15:59:15</td>
      <td>f18bdb9a38e5c444a3cb79c5c6bc927fbcd863683b4197713337216af7300a68</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-Windows-x86_64.exe">Anaconda2-5.3.0-Windows-x86_64.exe</a></td>
      <td class="s">579.0M</td>
      <td>2018-09-27 15:59:14</td>
      <td>30bf9131df2314c00a9cd5e5f0b7d6184c3aec38e4068eaafc962f62018110a1</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.3.0-MacOSX-x86_64.pkg">Anaconda2-5.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">628.3M</td>
      <td>2018-09-27 15:59:12</td>
      <td>834c221b413bdcbbce434f0a3008511f5bd5532d6b3e7f482d03c11bd0dc8163</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-MacOSX-x86_64.sh">Anaconda2-5.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">527.1M</td>
      <td>2018-05-30 13:05:34</td>
      <td>d7d46e566306da5979cd5632079497fe6103b980e3a089ccf27a9f30cbee84dc</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-MacOSX-x86_64.pkg">Anaconda2-5.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">616.8M</td>
      <td>2018-05-30 13:05:32</td>
      <td>f7695a3571eb8e8ae71fe9f413c36f57c92bc8882174c0dbf778e17550ff3e2f</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-Linux-x86.sh">Anaconda2-5.2.0-Linux-x86.sh</a></td>
      <td class="s">488.7M</td>
      <td>2018-05-30 13:05:30</td>
      <td>402758c24767e9eb3b77312c388725a058f76e03316464797c3ca404e6eebc2c</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-Linux-x86_64.sh">Anaconda2-5.2.0-Linux-x86_64.sh</a></td>
      <td class="s">603.4M</td>
      <td>2018-05-30 13:04:33</td>
      <td>cb0d7a08b0e2cec4372033d3269979b4e72e2353ffd1444f57cb38bc9621219f</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-Linux-ppc64le.sh">Anaconda2-5.2.0-Linux-ppc64le.sh</a></td>
      <td class="s">269.6M</td>
      <td>2018-05-30 13:04:31</td>
      <td>a8fcac3f0884520c35103e76549fcc45d64d8806517ba02d8ade4028e1f771f8</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-Windows-x86.exe">Anaconda2-5.2.0-Windows-x86.exe</a></td>
      <td class="s">443.4M</td>
      <td>2018-05-30 13:04:17</td>
      <td>2b81916c477e64db917821bb48a97000fad78cd1041022b343cec3cebf9e9efa</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.2.0-Windows-x86_64.exe">Anaconda2-5.2.0-Windows-x86_64.exe</a></td>
      <td class="s">564.0M</td>
      <td>2018-05-30 13:04:16</td>
      <td>e5ff95332d08a7b006a5bb723e0a5124c4c4c9a9e4289afdd05941791a79ec81</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-Windows-x86.exe">Anaconda2-5.1.0-Windows-x86.exe</a></td>
      <td class="s">419.8M</td>
      <td>2018-02-15 09:08:55</td>
      <td>fa78c71d88b01e6367f0c3cbd23da1f82e86e02088b0d281437789bfeba59d53</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-Windows-x86_64.exe">Anaconda2-5.1.0-Windows-x86_64.exe</a></td>
      <td class="s">522.6M</td>
      <td>2018-02-15 09:08:54</td>
      <td>3674c8d8c233dbea30842f14dc76cc3feaf4badf7d9dfe4145aa5b6679fabf2e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-MacOSX-x86_64.sh">Anaconda2-5.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">505.9M</td>
      <td>2018-02-15 09:08:53</td>
      <td>b686e01aeadb33526d9c154a0ac6f691dfad135080df96fb44d3ae1e4b128521</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-MacOSX-x86_64.pkg">Anaconda2-5.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">588.0M</td>
      <td>2018-02-15 09:08:52</td>
      <td>edbe9ef1ee5cfe62e131d7650e07c031ab14fd0e8bd12c15a095b73039eb8377</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-Linux-x86.sh">Anaconda2-5.1.0-Linux-x86.sh</a></td>
      <td class="s">431.3M</td>
      <td>2018-02-15 09:08:51</td>
      <td>5af0c7a09a5f3aaf3666c0b362246d342d80e782128ef043998c9ead5ad41df7</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-Linux-x86_64.sh">Anaconda2-5.1.0-Linux-x86_64.sh</a></td>
      <td class="s">533.0M</td>
      <td>2018-02-15 09:08:50</td>
      <td>5f26ee92860d1dffdcd20910ff2cf75572c39d2892d365f4e867a611cca2af5b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.1.0-Linux-ppc64le.sh">Anaconda2-5.1.0-Linux-ppc64le.sh</a></td>
      <td class="s">267.3M</td>
      <td>2018-02-15 09:08:49</td>
      <td>ff9baa4d3710bb24bc3a6a40c0f4ef69150f7608af5be6ada1ff99d01d1befae</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-Linux-x86_64.sh">Anaconda2-5.0.1-Linux-x86_64.sh</a></td>
      <td class="s">507.7M</td>
      <td>2017-10-24 12:13:52</td>
      <td>23c676510bc87c95184ecaeb327c0b2c88007278e0d698622e2dd8fb14d9faa4</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-Linux-x86.sh">Anaconda2-5.0.1-Linux-x86.sh</a></td>
      <td class="s">413.2M</td>
      <td>2017-10-24 12:13:07</td>
      <td>88c8d698fff16af15862daca10e94a0a46380dcffda45f8d89f5fe03f6bd2528</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-Windows-x86.exe">Anaconda2-5.0.1-Windows-x86.exe</a></td>
      <td class="s">403.4M</td>
      <td>2017-10-24 12:08:14</td>
      <td>1a50fac8644f2128e318337b218299e53e92ee20ddaf47911ff2be22255c63ad</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-Windows-x86_64.exe">Anaconda2-5.0.1-Windows-x86_64.exe</a></td>
      <td class="s">499.8M</td>
      <td>2017-10-23 21:57:22</td>
      <td>c43f94c51623850b0c1a826710fe9c8e50b0d73708874c9cf9b6ef03806ba2b7</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-MacOSX-x86_64.pkg">Anaconda2-5.0.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">562.8M</td>
      <td>2017-10-23 20:01:12</td>
      <td>22350fe830e6786a263d7727e537f066b13fd9f4646982796bd20248da3f3257</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.1-MacOSX-x86_64.sh">Anaconda2-5.0.1-MacOSX-x86_64.sh</a></td>
      <td class="s">486.5M</td>
      <td>2017-10-23 19:51:04</td>
      <td>e3a9a5c84cb89ff079b0781ba773a3433d490fe0cfc24042c613a5674748d87b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0.1-Linux-x86.sh">Anaconda2-5.0.0.1-Linux-x86.sh</a></td>
      <td class="s">411.9M</td>
      <td>2017-10-02 10:50:13</td>
      <td>00fbd979c815ede0bbad48fb4ef62cda333c7ad6330184962862a3072479267b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0.1-Linux-x86_64.sh">Anaconda2-5.0.0.1-Linux-x86_64.sh</a></td>
      <td class="s">506.3M</td>
      <td>2017-10-02 10:50:12</td>
      <td>18730808d863a5c194ab3f59dd395c1a63cbd769c9bfb1df65efe61ee62fc6d6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-Windows-x86.exe">Anaconda2-5.0.0-Windows-x86.exe</a></td>
      <td class="s">402.2M</td>
      <td>2017-09-26 16:25:09</td>
      <td>078551cfb0df72779897026724f375671e12a5fd384cabeaede5cc325cac12e3</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-MacOSX-x86_64.sh">Anaconda2-5.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">485.3M</td>
      <td>2017-09-26 16:25:09</td>
      <td>d85198c63657924fae11b6ea5961f50d81d09a1185d6f0a9a9d5bc69eb788ccc</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-MacOSX-x86_64.pkg">Anaconda2-5.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">561.3M</td>
      <td>2017-09-26 16:25:08</td>
      <td>3ee5cfe80d51685d6f374f83a9b76fa7ecbf7dc1a20f49a506e963641f2e1066</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-Linux-ppc64le.sh">Anaconda2-5.0.0-Linux-ppc64le.sh</a></td>
      <td class="s">282.3M</td>
      <td>2017-09-26 16:25:07</td>
      <td>e0512f3c81251e5dcd48fcf02fe2044a66071dc8681269b1375ac5443f971971</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-Linux-x86.sh">Anaconda2-5.0.0-Linux-x86.sh</a></td>
      <td class="s">411.4M</td>
      <td>2017-09-26 14:48:02</td>
      <td>a3ed8769d20d55a41c04cf7c04e81c95974ea8eb614afab7bbc0c06fa6a52437</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-Linux-x86_64.sh">Anaconda2-5.0.0-Linux-x86_64.sh</a></td>
      <td class="s">505.7M</td>
      <td>2017-09-26 14:37:21</td>
      <td>58a7117f89c40275114bf7e824a613a963da2b0fe63f2ec3c1175fea785b468e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-5.0.0-Windows-x86_64.exe">Anaconda2-5.0.0-Windows-x86_64.exe</a></td>
      <td class="s">498.2M</td>
      <td>2017-09-26 14:30:49</td>
      <td>5fb73395cdf003613f5d44844da9870dbdc2a35cede0f928b02c38b5ee2ebb55</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0.1-Linux-ppc64le.sh">Anaconda2-4.4.0.1-Linux-ppc64le.sh</a></td>
      <td class="s">271.4M</td>
      <td>2017-07-26 16:10:02</td>
      <td>e14acab146181699e47ca108fc624ecebaaaac52851312962c649899459d98e0</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-MacOSX-x86_64.pkg">Anaconda2-4.4.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">438.0M</td>
      <td>2017-05-26 18:36:08</td>
      <td>e5acf026892eaebb055e6317af96f295d39cf1d1a06ce6a1c6ca154ae3cabdf6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-MacOSX-x86_64.sh">Anaconda2-4.4.0-MacOSX-x86_64.sh</a></td>
      <td class="s">375.4M</td>
      <td>2017-05-26 18:35:52</td>
      <td>ab95aef1110c2a385fd39a17e5f11dfbaabce25c1a5944598de164d7a2772969</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-Linux-x86.sh">Anaconda2-4.4.0-Linux-x86.sh</a></td>
      <td class="s">415.0M</td>
      <td>2017-05-26 18:23:30</td>
      <td>452aa91ac83d3b6a68b79cea3042170ec591d468d6966307ff9af18fdbce9fbf</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-Linux-x86_64.sh">Anaconda2-4.4.0-Linux-x86_64.sh</a></td>
      <td class="s">485.2M</td>
      <td>2017-05-26 18:22:48</td>
      <td>2d30b91ed4d215b6b4a15162a3389e9057b15445a0c02da71bd7bd272e7b824e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-Windows-x86_64.exe">Anaconda2-4.4.0-Windows-x86_64.exe</a></td>
      <td class="s">430.7M</td>
      <td>2017-05-26 17:53:22</td>
      <td>7a8ec1a36f385ebf28a1a8cf63b8b03ac0f7744e1531f5d359ce6a6d903913e0</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-Windows-x86.exe">Anaconda2-4.4.0-Windows-x86.exe</a></td>
      <td class="s">354.4M</td>
      <td>2017-05-26 17:52:15</td>
      <td>0decd861f8839fdf2cbe4fa306c127f69e50b54374e56d7960ba5217087bf943</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.4.0-Linux-ppc64le.sh">Anaconda2-4.4.0-Linux-ppc64le.sh</a></td>
      <td class="s">276.6M</td>
      <td>2017-05-17 15:45:20</td>
      <td>c19edfd9a3bd2fcb37ddb0c3aa09339c9e23145269957fac75e9b2abca4089af</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-MacOSX-x86_64.pkg">Anaconda2-4.3.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">419.4M</td>
      <td>2017-03-06 16:26:18</td>
      <td>f5d950451c038f9a7ca80d4036b6a8152c35d48fee685df3de486729dbae0de3</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-MacOSX-x86_64.sh">Anaconda2-4.3.1-MacOSX-x86_64.sh</a></td>
      <td class="s">358.2M</td>
      <td>2017-03-06 16:26:02</td>
      <td>35261360f2b01793f441b29715a94052dceaef1137866b7323c76be83c5bcc1a</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-Windows-x86_64.exe">Anaconda2-4.3.1-Windows-x86_64.exe</a></td>
      <td class="s">413.7M</td>
      <td>2017-03-06 16:18:59</td>
      <td>c0e13a756a856d7b7757b10d65bee577d8c9826317050eecec42d2e48d2ea6fc</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-Windows-x86.exe">Anaconda2-4.3.1-Windows-x86.exe</a></td>
      <td class="s">339.0M</td>
      <td>2017-03-06 16:18:12</td>
      <td>fc363cea3c321c17b43a0bf2137aa845fef349c534fcf511dc285ebb8ae57316</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-Linux-x86.sh">Anaconda2-4.3.1-Linux-x86.sh</a></td>
      <td class="s">387.7M</td>
      <td>2017-03-06 16:12:31</td>
      <td>4519ac724d5120d21bb80289c5509c0d1fd9f99c6e9b9a4c6fb352d8bda4aede</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.1-Linux-x86_64.sh">Anaconda2-4.3.1-Linux-x86_64.sh</a></td>
      <td class="s">462.0M</td>
      <td>2017-03-06 16:12:14</td>
      <td>e9b8f2645df6b1527ba56d61343162e0794acc3ee8dde2a6bba353719e2d878d</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0.1-Windows-x86_64.exe">Anaconda2-4.3.0.1-Windows-x86_64.exe</a></td>
      <td class="s">412.8M</td>
      <td>2017-02-02 14:20:08</td>
      <td>2198e28e9e8e3c43ab72a8371e5b2d0a9aa6574391aebbcb94bf768a50a57aaa</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0.1-Windows-x86.exe">Anaconda2-4.3.0.1-Windows-x86.exe</a></td>
      <td class="s">338.1M</td>
      <td>2017-02-02 14:19:05</td>
      <td>863702665aa2b55ede2103a8ca7d26435efef614e9d201909c21ec572878fc0e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-MacOSX-x86_64.pkg">Anaconda2-4.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">418.4M</td>
      <td>2017-01-27 14:26:23</td>
      <td>3e1d1026d2c0b87213a8b4a5f28431060b0cfe5cdc8a368b39248dbb66b53175</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-MacOSX-x86_64.sh">Anaconda2-4.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">357.3M</td>
      <td>2017-01-27 14:26:08</td>
      <td>834ac0287062929ab5930661735ee617fd379bdfe79f3e0a20aebd614835b6c5</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-Windows-x86_64.exe">Anaconda2-4.3.0-Windows-x86_64.exe</a></td>
      <td class="s">412.8M</td>
      <td>2017-01-27 14:17:59</td>
      <td>1117839746a8eabf7ed26ff311fc74e44a58e319555e306f241e04b32363aeda</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-Windows-x86.exe">Anaconda2-4.3.0-Windows-x86.exe</a></td>
      <td class="s">338.1M</td>
      <td>2017-01-27 14:17:06</td>
      <td>a98767acefdeda02fe8d3ef9dadda1a3439fec110ede9bf5d0e359be76ac173b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-Linux-x86_64.sh">Anaconda2-4.3.0-Linux-x86_64.sh</a></td>
      <td class="s">461.1M</td>
      <td>2017-01-27 14:15:08</td>
      <td>7c52e6e99aabb24a49880130615a48e685da444c3c14eb48d6a65f3313bf745c</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.3.0-Linux-x86.sh">Anaconda2-4.3.0-Linux-x86.sh</a></td>
      <td class="s">386.8M</td>
      <td>2017-01-27 14:14:15</td>
      <td>b80d471839e8cf7b100e59308720cc13c141deb1ba903a4776c9a05f613e5078</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-MacOSX-x86_64.pkg">Anaconda2-4.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">403.9M</td>
      <td>2016-10-17 19:33:11</td>
      <td>4a74d34c3a3a82df31673ab49497816b03547bab7054525fdd92eef63c8bcdb2</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-Windows-x86_64.exe">Anaconda2-4.2.0-Windows-x86_64.exe</a></td>
      <td class="s">381.0M</td>
      <td>2016-09-27 15:55:47</td>
      <td>6254b150edee53000c94e9abfc9c51a2d2e5ef3453d8e7cc7ef0a848d6d3b422</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-Windows-x86.exe">Anaconda2-4.2.0-Windows-x86.exe</a></td>
      <td class="s">324.1M</td>
      <td>2016-09-27 15:54:50</td>
      <td>a97ca79cb771568d051ef7773d25c0dda407c63e7ec91305f35dff790aeda042</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-Linux-x86.sh">Anaconda2-4.2.0-Linux-x86.sh</a></td>
      <td class="s">365.0M</td>
      <td>2016-09-27 15:50:20</td>
      <td>618b720f309fe8da4f235415f11b6ce3db0a16d702ca67fdceeecf6bec78c32a</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-MacOSX-x86_64.sh">Anaconda2-4.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">346.4M</td>
      <td>2016-09-27 15:50:02</td>
      <td>a8b3ef86233635d9dcc3499dc384980762a0b42d354a318f8307029c399db452</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.2.0-Linux-x86_64.sh">Anaconda2-4.2.0-Linux-x86_64.sh</a></td>
      <td class="s">446.0M</td>
      <td>2016-09-27 15:49:54</td>
      <td>beee286d24fb37dd6555281bba39b3deb5804baec509a9dc5c69185098cf661a</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-Windows-x86_64.exe">Anaconda2-4.1.1-Windows-x86_64.exe</a></td>
      <td class="s">341.2M</td>
      <td>2016-07-08 11:20:01</td>
      <td>7be13a69df254b86e47612c726b0b2ba9ffa35c060b4d28edb348004c1f729a9</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-Windows-x86.exe">Anaconda2-4.1.1-Windows-x86.exe</a></td>
      <td class="s">286.0M</td>
      <td>2016-07-08 11:20:01</td>
      <td>4708d73952a0a8040bf1594ea42027a30e9bacb4d6760cc5d3e4414b6bfd9161</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-MacOSX-x86_64.sh">Anaconda2-4.1.1-MacOSX-x86_64.sh</a></td>
      <td class="s">295.8M</td>
      <td>2016-07-08 11:20:00</td>
      <td>3b2fb323eb26c1c58788f63c41e164c20c417f7f24e30b8057e92ab4d6102b70</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-MacOSX-x86_64.pkg">Anaconda2-4.1.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">345.0M</td>
      <td>2016-07-08 11:19:59</td>
      <td>879385461cc65bd9dbf9639bbf4471ecf1713611617eda8d3a05f33a45682400</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-Linux-x86.sh">Anaconda2-4.1.1-Linux-x86.sh</a></td>
      <td class="s">324.6M</td>
      <td>2016-07-08 11:19:57</td>
      <td>1ab001c7a469345a90d549ebf4afa3376f0f3a57a0df5f042cac7d773b0e0b0d</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.1-Linux-x86_64.sh">Anaconda2-4.1.1-Linux-x86_64.sh</a></td>
      <td class="s">399.6M</td>
      <td>2016-07-08 11:19:56</td>
      <td>9413b1d3ca9498ba6f53913df9c43d685dd973440ff10b7fe0c45b1cbdcb582e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-Windows-x86.exe">Anaconda2-4.1.0-Windows-x86.exe</a></td>
      <td class="s">285.1M</td>
      <td>2016-06-28 11:28:31</td>
      <td>c4ad4eefdffb6d838424c62c8b524352d8b8e4752382b0a09e9d8b7e9e44b9d4</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-Windows-x86_64.exe">Anaconda2-4.1.0-Windows-x86_64.exe</a></td>
      <td class="s">340.2M</td>
      <td>2016-06-28 11:28:30</td>
      <td>7a62880ff9bb7f747d70f518f024dfd1795a26d4130a20d1ff30043d05ec712f</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-MacOSX-x86_64.sh">Anaconda2-4.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">295.1M</td>
      <td>2016-06-28 11:28:30</td>
      <td>8b2c2a32f5e0da75cf8c81c568124cc1ea701a58cd46b7816133573a7f5b7b45</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-MacOSX-x86_64.pkg">Anaconda2-4.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">344.2M</td>
      <td>2016-06-28 11:28:29</td>
      <td>a97840be50d8c86b28caf8be1786bbe7485770b14501911e3e7331d33f2a3bc2</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-Linux-x86_64.sh">Anaconda2-4.1.0-Linux-x86_64.sh</a></td>
      <td class="s">398.8M</td>
      <td>2016-06-28 11:28:28</td>
      <td>3b7e504ca0132fb555d1f10e174cae07007f1bc6898cad0f7d416a68aca01f45</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.1.0-Linux-x86.sh">Anaconda2-4.1.0-Linux-x86.sh</a></td>
      <td class="s">324.4M</td>
      <td>2016-06-28 11:28:28</td>
      <td>54c06cd1b11cb687db6ba3613df443c057f769cdb87693e11674d956d8e5d081</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-Windows-x86.exe">Anaconda2-4.0.0-Windows-x86.exe</a></td>
      <td class="s">281.0M</td>
      <td>2016-03-29 11:15:00</td>
      <td>f8185ad2fe89356ab001e55a463b663bcbc9e7699ab7f7c1775a98d5332dbd93</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-Windows-x86_64.exe">Anaconda2-4.0.0-Windows-x86_64.exe</a></td>
      <td class="s">334.6M</td>
      <td>2016-03-29 11:14:59</td>
      <td>213c7d94bdb6f0931edd31bb14ae33ab557cee52c4ac949300e512397a29e03e</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-MacOSX-x86_64.sh">Anaconda2-4.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">290.2M</td>
      <td>2016-03-29 11:14:59</td>
      <td>aa7ba6e1a40e08e672660c00c3151f0124faa61b598d75bdd07ebe1d24873ef6</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-MacOSX-x86_64.pkg">Anaconda2-4.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">339.2M</td>
      <td>2016-03-29 11:14:57</td>
      <td>242691c7dc9e20143d7620fd9e0cc344fec7a2a534d1dba5f3b6522f04648261</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-Linux-x86.sh">Anaconda2-4.0.0-Linux-x86.sh</a></td>
      <td class="s">332.3M</td>
      <td>2016-03-29 11:14:57</td>
      <td>41341c840cea4185ef5bd82520c1de72b42e7dc43c703fb13b032f04dc0e3573</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-4.0.0-Linux-x86_64.sh">Anaconda2-4.0.0-Linux-x86_64.sh</a></td>
      <td class="s">392.5M</td>
      <td>2016-03-29 11:14:55</td>
      <td>ae312143952ca00e061a656c2080e0e4fd3532721282ba8e2978177cad71a5f0</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-MacOSX-x86_64.pkg">Anaconda2-2.5.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">367.9M</td>
      <td>2016-02-03 15:55:31</td>
      <td>0f546ed4f388299824e98a31ca9e3fe9823a49a2143d1cbd982caeb536e3de02</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-Windows-x86_64.exe">Anaconda2-2.5.0-Windows-x86_64.exe</a></td>
      <td class="s">348.6M</td>
      <td>2016-02-03 15:46:14</td>
      <td>4423b43eb23184b4239abc426a564760d6ddf0187ce451468546b88931de4023</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-Windows-x86.exe">Anaconda2-2.5.0-Windows-x86.exe</a></td>
      <td class="s">296.2M</td>
      <td>2016-02-03 15:45:21</td>
      <td>a0336729f0400ff12fe18a7d5e20c3f9b45f14cd07fe654029daa1ec611e2266</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-Linux-x86.sh">Anaconda2-2.5.0-Linux-x86.sh</a></td>
      <td class="s">330.4M</td>
      <td>2016-02-03 15:41:54</td>
      <td>4911047df51c46661f551d6022aee21a7e5d31df051d3433b8ff3ea3c2e771bb</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-MacOSX-x86_64.sh">Anaconda2-2.5.0-MacOSX-x86_64.sh</a></td>
      <td class="s">316.1M</td>
      <td>2016-02-03 15:41:22</td>
      <td>e7aa3b41210ee7ccf3c12e5b5ea43190d1811b58eaeca8584ccffa468ac8a346</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.5.0-Linux-x86_64.sh">Anaconda2-2.5.0-Linux-x86_64.sh</a></td>
      <td class="s">390.9M</td>
      <td>2016-02-03 15:41:18</td>
      <td>e10abf459cde4a838bd6fc5ca03023c3401b81ad470627acde5a298d56715321</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-Windows-x86.exe">Anaconda2-2.4.1-Windows-x86.exe</a></td>
      <td class="s">287.8M</td>
      <td>2015-12-08 15:00:52</td>
      <td>65fb15559b0ddb5055c110ecdb84823a6fbc8d3938932fbfa0110bb6d3395275</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-Windows-x86_64.exe">Anaconda2-2.4.1-Windows-x86_64.exe</a></td>
      <td class="s">354.2M</td>
      <td>2015-12-08 15:00:51</td>
      <td>cfbe5539cb7f2e5807ec3d2fa2e59db3a419caa1ef8f0497516dd0c861f92bfe</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-MacOSX-x86_64.sh">Anaconda2-2.4.1-MacOSX-x86_64.sh</a></td>
      <td class="s">212.0M</td>
      <td>2015-12-08 15:00:51</td>
      <td>f4bd45a21e0dff106e36d11cfd532f2b5050d3b792cc0627ab231089341d2040</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-MacOSX-x86_64.pkg">Anaconda2-2.4.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">245.8M</td>
      <td>2015-12-08 15:00:50</td>
      <td>1e2445aaf9faf84e801404bf89091fbf4a018709712a3901490fb3f45d44c23b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-Linux-x86.sh">Anaconda2-2.4.1-Linux-x86.sh</a></td>
      <td class="s">248.5M</td>
      <td>2015-12-08 15:00:50</td>
      <td>2388cc714567afe7697bf43b4063ff0ea2150a71b9beb17f75bc7e4879d9bf28</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.1-Linux-x86_64.sh">Anaconda2-2.4.1-Linux-x86_64.sh</a></td>
      <td class="s">265.0M</td>
      <td>2015-12-08 15:00:49</td>
      <td>2de682c96edf8cca2852071a84ff860025fbe8c502218e1995acd5ab47e8c9ac</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-Windows-x86_64.exe">Anaconda2-2.4.0-Windows-x86_64.exe</a></td>
      <td class="s">388.0M</td>
      <td>2015-11-02 16:22:21</td>
      <td>7a40484e58e91f62d91961c8607de586d3ef14645319c0395683e5f7182551bd</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-Windows-x86.exe">Anaconda2-2.4.0-Windows-x86.exe</a></td>
      <td class="s">321.4M</td>
      <td>2015-11-02 16:22:21</td>
      <td>2a05db81a0fe4155bc2dd83a689294d3ac7fa1d1a68a5ec6bdafaac9140d451a</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-MacOSX-x86_64.sh">Anaconda2-2.4.0-MacOSX-x86_64.sh</a></td>
      <td class="s">239.5M</td>
      <td>2015-11-02 16:22:20</td>
      <td>53c9123c9d508555100805fdb44d9845511c937e7a34f237beb19168d655e070</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-MacOSX-x86_64.pkg">Anaconda2-2.4.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">274.3M</td>
      <td>2015-11-02 16:22:20</td>
      <td>d6842135062f3c3d2f8bd33318133376d4f2c789c32818b24f9010ca2240b29c</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-Linux-x86_64.sh">Anaconda2-2.4.0-Linux-x86_64.sh</a></td>
      <td class="s">288.4M</td>
      <td>2015-11-02 16:22:19</td>
      <td>49d19834da06b1b82b6fa85bc647d2e78fa5957d0cbae3ccd6c695a541befa6b</td>
    </tr>
    <tr>
      <td><a href="Anaconda2-2.4.0-Linux-x86.sh">Anaconda2-2.4.0-Linux-x86.sh</a></td>
      <td class="s">279.9M</td>
      <td>2015-11-02 16:22:19</td>
      <td>478a8fdde3a6e4040a68c57d7bdd6fab1a4f7f6e813948d46dad54867014c124</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-Windows-x86.exe">Anaconda-2.3.0-Windows-x86.exe</a></td>
      <td class="s">277.4M</td>
      <td>2015-07-01 13:35:11</td>
      <td>3b60ddfb84533539e767889706bd64298a73d07a7bfe944a3c5c7f951e395190</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-Windows-x86_64.exe">Anaconda-2.3.0-Windows-x86_64.exe</a></td>
      <td class="s">334.7M</td>
      <td>2015-07-01 13:35:10</td>
      <td>70b4a84e78c721bd46f3de39c75acb37d1980a3afa23cf3cef387569606f7ca3</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-MacOSX-x86_64.sh">Anaconda-2.3.0-MacOSX-x86_64.sh</a></td>
      <td class="s">249.9M</td>
      <td>2015-07-01 13:35:10</td>
      <td>c4bb59a57bf44dde80612041bbbcfd2e5cab8534842209ef456da7a46f919c33</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-MacOSX-x86_64.pkg">Anaconda-2.3.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">283.7M</td>
      <td>2015-07-01 13:35:09</td>
      <td>f920ae6211d9da3288b5e160100543667cf1ceb21fa09b16d6cda82f113e8445</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-Linux-x86.sh">Anaconda-2.3.0-Linux-x86.sh</a></td>
      <td class="s">309.6M</td>
      <td>2015-07-01 13:35:09</td>
      <td>73fdbbb3e38207ed18e5059f71676d18d48fdccbc455a1272eb45a60376cd818</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.3.0-Linux-x86_64.sh">Anaconda-2.3.0-Linux-x86_64.sh</a></td>
      <td class="s">323.9M</td>
      <td>2015-07-01 13:35:08</td>
      <td>7c02499e9511c127d225992cfe1cd815e88fd46cd8a5b3cdf764f3fb4d8d4576</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-Windows-x86_64.exe">Anaconda-2.2.0-Windows-x86_64.exe</a></td>
      <td class="s">331.2M</td>
      <td>2015-03-25 15:30:13</td>
      <td>1e01d7e1560668f4c05d1cfafcb59b79da1b352671dc913a5ec8b766dde12190</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-Windows-x86.exe">Anaconda-2.2.0-Windows-x86.exe</a></td>
      <td class="s">274.2M</td>
      <td>2015-03-25 15:28:48</td>
      <td>247e8e7e386224a3df736ffe607596546f4bdd64b44a945fd831db5603782dab</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-MacOSX-x86_64.pkg">Anaconda-2.2.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">279.7M</td>
      <td>2015-03-25 15:27:27</td>
      <td>65784323db94b0c297e998bc81db5978e8951801c44808589e2b9665ad199c7b</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-Linux-x86_64.sh">Anaconda-2.2.0-Linux-x86_64.sh</a></td>
      <td class="s">317.3M</td>
      <td>2015-03-25 15:20:08</td>
      <td>ca2582cb2188073b0f348ad42207211a2b85c10b244265b5b27bab04481b88a2</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-Linux-x86.sh">Anaconda-2.2.0-Linux-x86.sh</a></td>
      <td class="s">303.2M</td>
      <td>2015-03-25 15:19:54</td>
      <td>6437d5b08a19c3501f2f5dc3ae1ae16f91adf6bed0f067ef0806a9911b1bef15</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.2.0-MacOSX-x86_64.sh">Anaconda-2.2.0-MacOSX-x86_64.sh</a></td>
      <td class="s">247.1M</td>
      <td>2015-03-25 15:17:33</td>
      <td>20570e2f3911e38a78d8f888f3ff445d6c0cf97a2fca40d6956b48d12aaef339</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-MacOSX-x86_64.pkg">Anaconda-2.1.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">275.0M</td>
      <td>2014-09-25 11:33:13</td>
      <td>d8001bae990e7024b81e74c6b06d0f488dd8717a9e0779db20d3e8831435b7e6</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-Windows-x86_64.exe">Anaconda-2.1.0-Windows-x86_64.exe</a></td>
      <td class="s">367.0M</td>
      <td>2014-09-25 11:07:11</td>
      <td>d9d7c8ed1c914312848407f08fff3d19350c20d754c8872d36ef45ce7541c5aa</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-Windows-x86.exe">Anaconda-2.1.0-Windows-x86.exe</a></td>
      <td class="s">310.2M</td>
      <td>2014-09-25 11:05:03</td>
      <td>c39193c9018a9c1e9e8f3c1d2692ac635133e9b68e72d7864c758410863378ff</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-MacOSX-x86_64.sh">Anaconda-2.1.0-MacOSX-x86_64.sh</a></td>
      <td class="s">241.0M</td>
      <td>2014-09-25 10:53:13</td>
      <td>128fd4f53e0895e0d23f33e924ae32e01171c2914b044d2b157a9497108109cf</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-Linux-x86.sh">Anaconda-2.1.0-Linux-x86.sh</a></td>
      <td class="s">321.2M</td>
      <td>2014-09-25 10:50:30</td>
      <td>fd70c08719e6b5caae45b7c8402c6975a8cbc0e3e2a9c4c977554d1784f28b72</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.1.0-Linux-x86_64.sh">Anaconda-2.1.0-Linux-x86_64.sh</a></td>
      <td class="s">337.4M</td>
      <td>2014-09-25 10:50:15</td>
      <td>191fbf290747614929d0bdd576e330c944b22a67585d1c185e0d2b3a3e65e1c0</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-Windows-x86.exe">Anaconda-2.0.1-Windows-x86.exe</a></td>
      <td class="s">287.3M</td>
      <td>2014-06-12 15:03:27</td>
      <td>be5a341bc3f9bf8386c686cfc9ad253f3074670c96f130b345b731370ce89d5a</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-Windows-x86_64.exe">Anaconda-2.0.1-Windows-x86_64.exe</a></td>
      <td class="s">343.7M</td>
      <td>2014-06-12 15:03:07</td>
      <td>5b27e7de356312da711a19ae6a4438c1c857b9c4e357c4aa3275d014db73c80a</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-MacOSX-x86_64.sh">Anaconda-2.0.1-MacOSX-x86_64.sh</a></td>
      <td class="s">214.4M</td>
      <td>2014-06-12 15:02:56</td>
      <td>4ecda163c6f46e70cc6a1fe62dece4c6ecd6474845129cc95a1d4e18c42f8015</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-MacOSX-x86_64.pkg">Anaconda-2.0.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">244.3M</td>
      <td>2014-06-12 15:02:50</td>
      <td>d6a0ce0422daa004929a4aef6b485d94f5e60b67f6d727047719815949fd59bf</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-Linux-x86.sh">Anaconda-2.0.1-Linux-x86.sh</a></td>
      <td class="s">309.1M</td>
      <td>2014-06-12 15:02:41</td>
      <td>e8ffc63f31673b5ce41a95796a1f729ddcf4c7db19d6dbe29bedaeaaf8478505</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.1-Linux-x86_64.sh">Anaconda-2.0.1-Linux-x86_64.sh</a></td>
      <td class="s">327.9M</td>
      <td>2014-06-12 15:02:33</td>
      <td>074204fa26872b4a946123071d15b8390c0e5441352c6b65b2abd32511bff240</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-Windows-x86.exe">Anaconda-2.0.0-Windows-x86.exe</a></td>
      <td class="s">278.2M</td>
      <td>2014-05-28 16:51:02</td>
      <td>d86cc7100b4c04ec25768267b81798f70a8563a2bdb6dacfe6ec7e45bfbbbad0</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-Windows-x86_64.exe">Anaconda-2.0.0-Windows-x86_64.exe</a></td>
      <td class="s">334.4M</td>
      <td>2014-05-28 16:50:53</td>
      <td>60078f8677e62e435e5a53f1084e6f39df7f4874892b77d04fbd819033c44ef5</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-MacOSX-x86_64.sh">Anaconda-2.0.0-MacOSX-x86_64.sh</a></td>
      <td class="s">206.1M</td>
      <td>2014-05-28 16:50:45</td>
      <td>ad6271ad21403166bf54d0734ba8c7f7eb65bb78a70d67c58c15b6874cddc81e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-MacOSX-x86_64.pkg">Anaconda-2.0.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">236.2M</td>
      <td>2014-05-28 16:50:41</td>
      <td>e2eb3805451a26235b2ed7f3e63535fc39bf32b46bfa8407f8b6240924cf8007</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-Linux-x86.sh">Anaconda-2.0.0-Linux-x86.sh</a></td>
      <td class="s">298.4M</td>
      <td>2014-05-28 16:50:36</td>
      <td>efb9d3987134d484d88a9d915437b1bd568d065b4fefbd538e0281694bd90888</td>
    </tr>
    <tr>
      <td><a href="Anaconda-2.0.0-Linux-x86_64.sh">Anaconda-2.0.0-Linux-x86_64.sh</a></td>
      <td class="s">316.9M</td>
      <td>2014-05-28 16:50:30</td>
      <td>3aa27ddf4a0ba5046ba52b97da99e20eb0614273d905bd73e016852451908917</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-MacOSX-x86_64.pkg">Anaconda-1.9.2-MacOSX-x86_64.pkg</a></td>
      <td class="s">281.0M</td>
      <td>2014-04-10 10:05:32</td>
      <td>2fff6dca12507f675b04ed1f303d0ee99d755402c3b2b64c131d93c3b4f14f75</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-Windows-x86_64.exe">Anaconda-1.9.2-Windows-x86_64.exe</a></td>
      <td class="s">367.3M</td>
      <td>2014-04-08 17:41:16</td>
      <td>ef9cfb69c831210fc9000ee5482d2d98ba609d4fbe9e05746f93f569045bad04</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-Windows-x86.exe">Anaconda-1.9.2-Windows-x86.exe</a></td>
      <td class="s">311.8M</td>
      <td>2014-04-08 17:39:25</td>
      <td>fe005aeacd1345b856c73d640856b79ed94a6694245ea8df8cbf94aa7bac776d</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-MacOSX-x86_64.sh">Anaconda-1.9.2-MacOSX-x86_64.sh</a></td>
      <td class="s">245.4M</td>
      <td>2014-04-08 17:34:03</td>
      <td>be4611ca671f80b984fa330d4ecf82244c388abbdb5c7679a4e6e806b4dca52f</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-Linux-x86.sh">Anaconda-1.9.2-Linux-x86.sh</a></td>
      <td class="s">411.8M</td>
      <td>2014-04-08 17:33:09</td>
      <td>1f7c850d0b98c011a717b3b757d82077accf0704dd7627f6962267bfb4476aad</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.2-Linux-x86_64.sh">Anaconda-1.9.2-Linux-x86_64.sh</a></td>
      <td class="s">484.0M</td>
      <td>2014-04-08 17:32:38</td>
      <td>7181d399833a2549a9584255bb477487f2fde1fda4c7f7215d6034ea2fcfa21e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-MacOSX-x86_64.pkg">Anaconda-1.9.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">280.9M</td>
      <td>2014-02-20 15:44:04</td>
      <td>2aa707b162e71d488495085fd13232f8c30ac0f5003e6dd983c99897813d2796</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-Windows-x86_64.exe">Anaconda-1.9.1-Windows-x86_64.exe</a></td>
      <td class="s">367.3M</td>
      <td>2014-02-20 15:10:34</td>
      <td>d0c3c2faca03b3820ff8fc39688f500bd140f207aab7553c50005484ff755505</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-Windows-x86.exe">Anaconda-1.9.1-Windows-x86.exe</a></td>
      <td class="s">311.7M</td>
      <td>2014-02-20 15:08:42</td>
      <td>46cbe29a30cfcd56018f7f69a35525708f2d14211a613e7344f91ad4171a84c7</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-Linux-x86_64.sh">Anaconda-1.9.1-Linux-x86_64.sh</a></td>
      <td class="s">483.9M</td>
      <td>2014-02-20 13:35:16</td>
      <td>f6455e06a72b8cc11c8a96fb88a85518a2f7b2a1d6f1065f777d7ab4386f022d</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-Linux-x86.sh">Anaconda-1.9.1-Linux-x86.sh</a></td>
      <td class="s">411.8M</td>
      <td>2014-02-20 13:34:56</td>
      <td>9aa39c05f723fee18c54a9cc1729986193216affedbae125ca5faa067403030a</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.1-MacOSX-x86_64.sh">Anaconda-1.9.1-MacOSX-x86_64.sh</a></td>
      <td class="s">245.3M</td>
      <td>2014-02-20 13:02:05</td>
      <td>7e4358adbaae2db9e17d1e0e4263b9a0174394c8f115c89d285c3f0f9206f75b</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-Windows-x86.exe">Anaconda-1.9.0-Windows-x86.exe</a></td>
      <td class="s">308.6M</td>
      <td>2014-02-10 10:24:52</td>
      <td>2c8c58cf21e537e930535df5a0e8fd4b6d60d4dbe87f13b5964bf2f5f4d27cb3</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-Windows-x86_64.exe">Anaconda-1.9.0-Windows-x86_64.exe</a></td>
      <td class="s">365.1M</td>
      <td>2014-02-10 10:24:18</td>
      <td>265c7e849688164f7a7fe9df541be018675772f2e91be39d116e6d0e07181c25</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-MacOSX-x86_64.sh">Anaconda-1.9.0-MacOSX-x86_64.sh</a></td>
      <td class="s">244.4M</td>
      <td>2014-02-10 10:23:47</td>
      <td>722fe4d4406e88c5023e7ee21dc1401bb2a540d6c031d303f0330a95e60131fd</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-MacOSX-x86_64.pkg">Anaconda-1.9.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">279.8M</td>
      <td>2014-02-10 10:23:46</td>
      <td>b74134e7626f10fc4d86209a3ebbb19de3c4404d0aecf071bedfa184bab22fae</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-Linux-x86.sh">Anaconda-1.9.0-Linux-x86.sh</a></td>
      <td class="s">545.3M</td>
      <td>2014-02-10 10:23:30</td>
      <td>16471e90b3deb7be1b3d449d8883983d81f035dfaa1a3391497de20577de6f66</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.9.0-Linux-x86_64.sh">Anaconda-1.9.0-Linux-x86_64.sh</a></td>
      <td class="s">618.8M</td>
      <td>2014-02-10 10:23:05</td>
      <td>855f1265e4c0b40d50f5a3a0fe7bae05b1cccb0a5301b378a19e0a8f7262913a</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-Linux-x86.sh">Anaconda-1.8.0-Linux-x86.sh</a></td>
      <td class="s">393.0M</td>
      <td>2013-11-04 15:37:29</td>
      <td>2c08a5cd6ccaa9dc84063b0ee9b007aa82e35a75c340fb272b394896de853608</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-Linux-x86_64.sh">Anaconda-1.8.0-Linux-x86_64.sh</a></td>
      <td class="s">465.7M</td>
      <td>2013-11-04 15:37:12</td>
      <td>69f42966d918f4197040e4dd126d2e3cc3c267bb49869dbf2d6ef277ed5de8b7</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-MacOSX-x86_64.pkg">Anaconda-1.8.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">263.0M</td>
      <td>2013-11-04 13:57:20</td>
      <td>fb92afc7750bc58ac12f3cbd65c18ee0f80ec22b80f07e236e739bf5ec5e7b85</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-Windows-x86_64.exe">Anaconda-1.8.0-Windows-x86_64.exe</a></td>
      <td class="s">342.1M</td>
      <td>2013-11-04 13:55:59</td>
      <td>434c2b325a368958b66d52cee4cc710f5ea40e45657854a9be2b54dd50b9c661</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-Windows-x86.exe">Anaconda-1.8.0-Windows-x86.exe</a></td>
      <td class="s">290.0M</td>
      <td>2013-11-04 13:54:14</td>
      <td>719bc0987be80b46f9c6b745822777fa1f0cb7386ff746fa8e71763bfd997c44</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.8.0-MacOSX-x86_64.sh">Anaconda-1.8.0-MacOSX-x86_64.sh</a></td>
      <td class="s">228.8M</td>
      <td>2013-11-04 13:10:16</td>
      <td>5844ca595b5930399a1213db64ab53e9b7e2fc1c26d8f11769c161fe4f5661e6</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-MacOSX-x86_64.pkg">Anaconda-1.7.0-MacOSX-x86_64.pkg</a></td>
      <td class="s">256.7M</td>
      <td>2013-09-09 12:15:34</td>
      <td>d277f7e162c77043e416d03a754389a0d9fb83636dc78bbb67e7433e29097fca</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-MacOSX-x86_64.sh">Anaconda-1.7.0-MacOSX-x86_64.sh</a></td>
      <td class="s">223.3M</td>
      <td>2013-09-09 11:52:45</td>
      <td>046b592245bc2c11e733acb9700dc50947f2eff0f30fec4a4a5bf79368dfa14b</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-Windows-x86_64.exe">Anaconda-1.7.0-Windows-x86_64.exe</a></td>
      <td class="s">330.1M</td>
      <td>2013-09-08 17:12:00</td>
      <td>59a3667fd33f8de1ed476d7ff07917d726be51de239deaf7ce13ab277bb4153d</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-Windows-x86.exe">Anaconda-1.7.0-Windows-x86.exe</a></td>
      <td class="s">280.6M</td>
      <td>2013-09-08 17:10:23</td>
      <td>b434776dfeac98f37328c6e538f5a1a53199e0c6ca2ef3a39cb3cd2e64db2edb</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-Linux-x86.sh">Anaconda-1.7.0-Linux-x86.sh</a></td>
      <td class="s">381.0M</td>
      <td>2013-09-08 17:02:26</td>
      <td>af372a27a1887e11061485e2a854c535775fd519713e028c38901f90c869cd83</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.7.0-Linux-x86_64.sh">Anaconda-1.7.0-Linux-x86_64.sh</a></td>
      <td class="s">452.6M</td>
      <td>2013-09-08 17:01:59</td>
      <td>6115cfae55a0746b4ae4128be839c99db39d02124160d9c531ca086c4d606582</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.2-Windows-x86_64.exe">Anaconda-1.6.2-Windows-x86_64.exe</a></td>
      <td class="s">289.9M</td>
      <td>2013-07-09 13:46:28</td>
      <td>641fc25c1d13e49cc030df5f4040170d123072e54b439e7097531a61cc38542e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.2-Windows-x86.exe">Anaconda-1.6.2-Windows-x86.exe</a></td>
      <td class="s">244.4M</td>
      <td>2013-07-09 13:44:58</td>
      <td>0873576bbd979e3b7859808bccc2311edaea3d34f4d6ed1f6b44b1ba1cf1a700</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-MacOSX-x86_64.pkg">Anaconda-1.6.1-MacOSX-x86_64.pkg</a></td>
      <td class="s">197.3M</td>
      <td>2013-07-02 17:30:12</td>
      <td>7c79819dd40a14e52439664c3e88e89ecba29c5f4d2fd72726124d7a138f5df4</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-Windows-x86_64.exe">Anaconda-1.6.1-Windows-x86_64.exe</a></td>
      <td class="s">289.9M</td>
      <td>2013-07-02 12:04:26</td>
      <td>8cad320d4d6981644fbd1741bd5589d198f5e4ca1e1f66a10d57c704ee485c3e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-Windows-x86.exe">Anaconda-1.6.1-Windows-x86.exe</a></td>
      <td class="s">244.4M</td>
      <td>2013-07-02 12:02:59</td>
      <td>a823dc7688cec49499bb5922783377c262cbf456830ff8db7c0d4018a2321dc0</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-MacOSX-x86_64.sh">Anaconda-1.6.1-MacOSX-x86_64.sh</a></td>
      <td class="s">170.0M</td>
      <td>2013-07-02 11:59:25</td>
      <td>bbc15de34208ce8af5aceedeea1334636fe94c578b9890896729f1a61ace5e4f</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-Linux-x86.sh">Anaconda-1.6.1-Linux-x86.sh</a></td>
      <td class="s">247.1M</td>
      <td>2013-07-02 11:59:07</td>
      <td>745b9452fd18720deefb465a6687c0d66df8f11edceadcee758082dea1b8e812</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.1-Linux-x86_64.sh">Anaconda-1.6.1-Linux-x86_64.sh</a></td>
      <td class="s">317.6M</td>
      <td>2013-07-02 11:57:42</td>
      <td>81d1819ba08069343f228b9c819cdba0e4d15f2142c0c033657599808c3960fb</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.0-Windows-x86_64.exe">Anaconda-1.6.0-Windows-x86_64.exe</a></td>
      <td class="s">290.4M</td>
      <td>2013-06-21 14:38:20</td>
      <td>6e95dc3612ed430ded28bb48fa1671b32a185c976eba905796707f9b5b44e984</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.0-Windows-x86.exe">Anaconda-1.6.0-Windows-x86.exe</a></td>
      <td class="s">244.9M</td>
      <td>2013-06-21 14:36:46</td>
      <td>3dc2588557455484b3b38feb14fa95d941de732e06678365860cd4961c19feac</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.0-MacOSX-x86_64.sh">Anaconda-1.6.0-MacOSX-x86_64.sh</a></td>
      <td class="s">169.0M</td>
      <td>2013-06-21 14:26:14</td>
      <td>e03317888c36c07451a349577b426f435a75075d1ee71e204eb9d5dd23936f5e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.0-Linux-x86_64.sh">Anaconda-1.6.0-Linux-x86_64.sh</a></td>
      <td class="s">309.5M</td>
      <td>2013-06-21 14:23:51</td>
      <td>20f5b70193af4b0b8f10aa0e66aabca552846ec8f4958757ff3f4b79ef7b3160</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.6.0-Linux-x86.sh">Anaconda-1.6.0-Linux-x86.sh</a></td>
      <td class="s">241.6M</td>
      <td>2013-06-21 14:23:39</td>
      <td>d6aeedfcb39d648fdfb5bd72c4d0b3063a9d4f4866baf5052aa0645bf5d2c07a</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.1-MacOSX-x86_64.sh">Anaconda-1.5.1-MacOSX-x86_64.sh</a></td>
      <td class="s">166.2M</td>
      <td>2013-05-09 14:26:20</td>
      <td>6d3c86a2fdbaeeec2a6c251d5c9034a32b7c68a0437f2fac0b8f25125fe6866f</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.0-Windows-x86_64.exe">Anaconda-1.5.0-Windows-x86_64.exe</a></td>
      <td class="s">280.4M</td>
      <td>2013-05-08 09:20:08</td>
      <td>7edbe2e51b71c69e7e7a1ec01d8d83954ada9e885e08adfffdd624b9e1b10fb3</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.0-Windows-x86.exe">Anaconda-1.5.0-Windows-x86.exe</a></td>
      <td class="s">236.0M</td>
      <td>2013-05-08 09:18:44</td>
      <td>d3dd92fa00d999a94638513daf2d4aeed15a387b820eb08b1907387a4f2e8388</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.0-MacOSX-x86_64.sh">Anaconda-1.5.0-MacOSX-x86_64.sh</a></td>
      <td class="s">166.2M</td>
      <td>2013-05-08 09:18:44</td>
      <td>c69609f0f48f33ca5a12d425a9e4d0fc91b2c09d0345a590e1d77726446727aa</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.0-Linux-x86.sh">Anaconda-1.5.0-Linux-x86.sh</a></td>
      <td class="s">238.8M</td>
      <td>2013-05-08 09:18:43</td>
      <td>ca7e356dc1b8c8ef27dfb74b32c77563df704c6ddb39e69cac65ec416ebfe8e5</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.5.0-Linux-x86_64.sh">Anaconda-1.5.0-Linux-x86_64.sh</a></td>
      <td class="s">306.7M</td>
      <td>2013-05-08 09:18:36</td>
      <td>f4cdc194f076e1b438c8a34e7e5f53e70c2200b411b2d0af719e23fe35c6411e</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.4.0-Windows-x86_64.exe">Anaconda-1.4.0-Windows-x86_64.exe</a></td>
      <td class="s">241.4M</td>
      <td>2013-03-09 16:57:09</td>
      <td>6ff0a3bf82fdf5c6f0568d12ff030237ee90825bb0ea60e4cf3833db847535f9</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.4.0-Windows-x86.exe">Anaconda-1.4.0-Windows-x86.exe</a></td>
      <td class="s">210.1M</td>
      <td>2013-03-09 16:55:45</td>
      <td>e590e45d36d3f164fcaf58cda6a3cb09252a502af5942e0909324b394710f212</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.4.0-MacOSX-x86_64.sh">Anaconda-1.4.0-MacOSX-x86_64.sh</a></td>
      <td class="s">156.4M</td>
      <td>2013-03-09 16:46:57</td>
      <td>e5d5dae6e93bb7df528abc19f5ed3a69cc4bc867836bdc56886c5a3768fccde7</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.4.0-Linux-x86.sh">Anaconda-1.4.0-Linux-x86.sh</a></td>
      <td class="s">220.5M</td>
      <td>2013-03-09 16:46:53</td>
      <td>065284c5de369c9b89dcae79e7169ce9b734dc3bbe6c409a67a5ec6480cc0f40</td>
    </tr>
    <tr>
      <td><a href="Anaconda-1.4.0-Linux-x86_64.sh">Anaconda-1.4.0-Linux-x86_64.sh</a></td>
      <td class="s">286.9M</td>
      <td>2013-03-09 16:46:38</td>
      <td>85ae8a0a6e3a41cf7845be3def36ed40582d3dc6e6a50e99063eaf6f1abee24e</td>
    </tr>
  </table>
  <address>Updated: 2024-10-23 09:04:15 CDT - Files: 516</address>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'90bc4fcebd3b2e2a',t:'MTczODUyMTY0OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>


/home/brandon/Projects/ChatDev/run.py

import argparse
import logging
import os
import sys
from camel.typing import ModelType
root = os.path.dirname(__file__)
sys.path.append(root)
from chatdev.chat_chain import ChatChain
try:
    from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall
    from openai.types.chat.chat_completion_message import FunctionCall
    openai_new_api = True  except ImportError:
    openai_new_api = False      print(
        "Warning: Your OpenAI version is outdated. \n "
        "Please update as specified in requirement.txt. \n "
        "The old API interface is deprecated and will no longer be supported.")
def get_config(company):
    """
    return configuration json files for ChatChain
    user can customize only parts of configuration json files, other files will be left for default
    Args:
        company: customized configuration name under CompanyConfig/
    Returns:
        path to three configuration jsons: [config_path, config_phase_path, config_role_path]
    """
    config_dir = os.path.join(root, "CompanyConfig", company)
    default_config_dir = os.path.join(root, "CompanyConfig", "Default")
    config_files = [
        "ChatChainConfig.json",
        "PhaseConfig.json",
        "RoleConfig.json"
    ]
    config_paths = []
    for config_file in config_files:
        company_config_path = os.path.join(config_dir, config_file)
        default_config_path = os.path.join(default_config_dir, config_file)
        if os.path.exists(company_config_path):
            config_paths.append(company_config_path)
        else:
            config_paths.append(default_config_path)
    return tuple(config_paths)
parser = argparse.ArgumentParser(description='argparse')
parser.add_argument('--config', type=str, default="Default",
                    help="Name of config, which is used to load configuration under CompanyConfig/")
parser.add_argument('--org', type=str, default="DefaultOrganization",
                    help="Name of organization, your software will be generated in WareHouse/name_org_timestamp")
parser.add_argument('--task', type=str, default="Develop a basic Gomoku game.",
                    help="Prompt of software")
parser.add_argument('--name', type=str, default="Gomoku",
                    help="Name of software, your software will be generated in WareHouse/name_org_timestamp")
parser.add_argument('--model', type=str, default="GPT_3_5_TURBO",
                    help="GPT Model, choose from {'GPT_3_5_TURBO', 'GPT_4', 'GPT_4_TURBO', 'GPT_4O', 'GPT_4O_MINI'}")
parser.add_argument('--path', type=str, default="",
                    help="Your file directory, ChatDev will build upon your software in the Incremental mode")
args = parser.parse_args()
config_path, config_phase_path, config_role_path = get_config(args.config)
args2type = {'GPT_3_5_TURBO': ModelType.GPT_3_5_TURBO,
             'GPT_4': ModelType.GPT_4,
             'GPT_4_TURBO': ModelType.GPT_4_TURBO,
            'GPT_4O': ModelType.GPT_4O,
            'GPT_4O_MINI': ModelType.GPT_4O_MINI,
            'O1_PREVIEW': ModelType.O1_PREVIEW,
             }
if openai_new_api:
    args2type['GPT_3_5_TURBO'] = ModelType.GPT_3_5_TURBO_NEW
chat_chain = ChatChain(config_path=config_path,
                       config_phase_path=config_phase_path,
                       config_role_path=config_role_path,
                       task_prompt=args.task,
                       project_name=args.name,
                       org_name=args.org,
                       model_type=args2type[args.model],
                       code_path=args.path)
logging.basicConfig(filename=chat_chain.log_filepath, level=logging.INFO,
                    format='[%(asctime)s %(levelname)s] %(message)s',
                    datefmt='%Y-%d-%m %H:%M:%S', encoding="utf-8")
chat_chain.pre_processing()
chat_chain.make_recruitment()
chat_chain.execute_chain()
chat_chain.post_processing()


/home/brandon/Projects/ChatDev/visualizer/app.py

import logging
import requests
import os
from flask import Flask, send_from_directory, request, jsonify
import argparse
app = Flask(__name__, static_folder='static')
app.logger.setLevel(logging.ERROR)
log = logging.getLogger('werkzeug')
log.setLevel(logging.ERROR)
messages = []
port = [8000]
def send_msg(role, text):
    try:
        data = {"role": role, "text": text}
        response = requests.post(f"http://127.0.0.1:{port[-1]}/send_message", json=data)
    except:
        logging.info("flask app.py did not start for online log")
@app.route("/")
def index():
    return send_from_directory("static", "index.html")
@app.route("/chain_visualizer")
def chain_visualizer():
    return send_from_directory("static", "chain_visualizer.html")
@app.route("/replay")
def replay():
    return send_from_directory("static", "replay.html")
@app.route("/get_messages")
def get_messages():
    return jsonify(messages)
@app.route("/send_message", methods=["POST"])
def send_message():
    data = request.get_json()
    role = data.get("role")
    text = data.get("text")
    avatarUrl = find_avatar_url(role)
    message = {"role": role, "text": text, "avatarUrl": avatarUrl}
    messages.append(message)
    return jsonify(message)
def find_avatar_url(role):
    role = role.replace(" ", "%20")
    avatar_filename = f"avatars/{role}.png"
    avatar_url = f"/static/{avatar_filename}"
    return avatar_url
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='argparse')
    parser.add_argument('--port', type=int, default=8000, help="port")
    args = parser.parse_args()
    port.append(args.port)
    print(f"Please visit http://127.0.0.1:{port[-1]}/ for the front-end display page. \nIn the event of a port conflict, please modify the port argument (e.g., python3 app.py --port 8012).")
    app.run(host='0.0.0.0', debug=False, port=port[-1])


/home/brandon/Projects/ChatDev/visualizer/static/index.html

<!DOCTYPE html>
<html>
<head>
    <title>ChatDev</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@3.0.7/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
    <script src="static/js/main.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/themes/prism-okaidia.min.css">
    <link rel="stylesheet" href="static/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/monokai-sublime.min.css">
    <style>
        .custom-text-block {
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
            font-size: 16px;
            color: #333;
        }
        .visualizer-container {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .visualizer-box {
            width: 30%;
            text-align: center;
        }
        .visualizer-info {
            text-align: center;
            font-size: 14px;
            color: #666;
        }
    </style>
    <script>
        hljs.initHighlightingOnLoad();
    </script>
</head>
<body>
    <div class="d-flex justify-content-center">
        <img src="static/figures/title.png" alt="ChatDev Title" id="title-image" style="width: 100%; max-width: 300px;">
    </div>
    <div class="visualizer-container">
        <div class="visualizer-box">
            <br>
            <a href="static/chain_visualizer.html">
                <button>ChatChain Visualizer</button>
            </a>
            <p class="visualizer-info">Explore all the phases  and settings in ChatChain.</p>
        </div>
        <div class="visualizer-box">
            <br>
            <a href="static/replay.html">
                <button>Replay Visualizer</button>
            </a>
            <p class="visualizer-info">Replay the agents' dialog from other ChatDev-generated software.</p>
        </div>
    </div>
    <div class="custom-text-block">
        Log Visualizer <br> Visualize the log in real-time when generating software, in agent dialog-style. Execute "python3 run.py" to start.
    </div>
    <div class="container d-flex flex-column" id="chat-box"></div>
    <script src="static/js/main.js"></script>
</body>
</html>


/home/brandon/Projects/ChatDev/visualizer/static/chain_visualizer.html

<!DOCTYPE html>
<html>
<head>
    <title>ChatChain Visualizer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        #visualization {
            display: flex;
            flex-wrap: nowrap;
            overflow-x: visible;
            overflow-y: visible;
            max-width: 1800px;
            max-height: 1600px;
            margin: 20px;
        }
        .card {
            margin-right: 10px;
            display: inline-block;
            min-width: 300px;
            vertical-align: top;
            font-size: 14px;
        }
        .simple-phase {
            background-color: #E8ECEB; 
        }
        .composed-phase {
            background-color: #A3B4C8; 
        }
        .nested-simple-phase {
            background-color: #E3DCD2; 
        }
        .card-content {
            padding: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>ChatChain Visualizer</h2>
        <p>Select your ChatChainConfig.json under CompanyConfig/ to visualize</p>
        <input type="file" id="fileInput" accept=".json">
        <button id="exportButton">Export as Image</button>
        <div id="visualization"></div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
    <script>
        document.getElementById('fileInput').addEventListener('change', handleFileSelect, false);
        document.getElementById('exportButton').addEventListener('click', exportAsImage, false);
        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = function(event) {
                try {
                    const jsonContent = JSON.parse(event.target.result);
                    visualizeChain(jsonContent.chain);
                } catch (error) {
                    alert('Error parsing JSON file.');
                }
            };
            reader.readAsText(file);
        }
        function createCard(element) {
            const card = document.createElement('div');
            card.className = 'card';
            const cardContent = document.createElement('div');
            cardContent.className = 'card-content';
            if (element.phaseType === "ComposedPhase") {
                delete element.Composition;
            }
            const phase = document.createElement('span');
            phase.innerHTML = `<strong>PhaseName: </strong>${element.phase || 'No PhaseName'}`;
            const phaseType = document.createElement('p');
            phaseType.innerHTML = `<strong>PhaseType: </strong>${element.phaseType || 'No phaseType'}`;
            delete element.phase;
            delete element.phaseType;
            const jsonContent = document.createElement('pre');
            jsonContent.innerText = JSON.stringify(element, null, 2);
            cardContent.appendChild(phase);
            cardContent.appendChild(phaseType);
            cardContent.appendChild(jsonContent);
            card.appendChild(cardContent);
            return card;
        }
        function visualizeChain(chain) {
            const visualization = document.getElementById('visualization');
            visualization.innerHTML = '';
            chain.forEach(element => {
                if (element.phaseType === "ComposedPhase") {
                    const composition = element.Composition || [];
                    const card = createCard(element);
                    const nestedCards = composition.map(composedElement => {
                        return createCard(composedElement);
                    });
                    const nestedCardWrapper = document.createElement('div');
                    nestedCardWrapper.style.marginTop = '10px';
                    nestedCards.forEach(nestedCard => {
                        nestedCard.classList.add('nested-simple-phase');
                        nestedCardWrapper.appendChild(nestedCard);
                    });
                    card.classList.add('composed-phase');
                    card.appendChild(nestedCardWrapper);
                    visualization.appendChild(card);
                } else {
                    const card = createCard(element);
                    card.classList.add('simple-phase');
                    visualization.appendChild(card);
                }
            });
        }
        function exportAsImage() {
            const visualization = document.getElementById('visualization');
            const totalWidth = visualization.scrollWidth;
            const totalHeight = visualization.scrollHeight;
            console.log(totalWidth, totalHeight)
            const canvas = document.createElement('canvas');
            canvas.width = totalWidth + 100;
            canvas.height = totalHeight + 100;
            html2canvas(visualization, { scrollX: 0, scrollY: 0, width: totalWidth, height: totalHeight, useCORS: true }).then(canvas => {
                const link = document.createElement('a');
                link.href = canvas.toDataURL();
                link.download = 'ChatChain_Visualization.png';
                link.click();
            });
        }
    </script>
</body>
</html>

/home/brandon/Projects/ChatDev/visualizer/static/replay.html

<!DOCTYPE html>
<html>
<script src="https://libs.baidu.com/jquery/2.1.4/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js"></script>
<link rel="stylesheet" href="replay/css/use.css">
<link rel="stylesheet" href="replay/css/github-markdown-dark.css">
<head>
    <title>chatdev demo </title>
    <link rel="icon" type="image/png" href="figures/ceo.png">
</head>
<body style="display: flex;flex: auto; ">
    <div id="operation">
        <div id="title" style="display: block;position: relative;height: 100px;">
            <img src="figures/chatdev.png" style="width: 364px;height: 128px; position: relative;top:40px;left:75px;">
            <p style="color:aliceblue; font-size: larger;font-weight: bolder;position: relative;top:20px;left:40px;text-shadow: 0px 0px 0px rgb(252, 252, 252);">
                Communicative Agents for Software Development</p>
        </div>
        <div id="imgShow">
            <img src="figures/company.png" alt="chatdev-company" id="chatdev-company">
            <img src="figures/right.png" id="right" class="blinking-animation" style="display: none;position: relative; width: 40px;height: 40px;top: -360px;left: 420px">
            <img src="figures/left.png" id="left" class="blinking-animation" style="display: none;width: 40px;height: 40px;position: relative; top: -465px;left: 125px">
        </div>
        <div style="position: relative;top:200px;display: flex;">
            <div> <input type="file" id="fileInput" accept=".log" onchange="watchfileInput(this.files)">
                <button id="filebutton" class="button">File Upload</button>
            </div>
            <div><button id="replay" class="button">Replay</button></div>
        </div>
        <div class="markdown-body"><label for="filebutton" id="successupload">
            </label>
        </div>
    </div>
    <div id="show" style="display: grid;">
        <div id="humanRequest" style="position: relative; overflow: auto; padding: 0 10px">
            <p id="Requesttext" style=" color:aliceblue; display: block;font-weight: 900; max-height: 18px; max-width: 800px;">Task: </p>
        </div>
        <div id="dialogBody" style="top:20px;display: flex;flex-direction: column;">
        </div>
        <div id="speedcontrol">
            <input type="range" id="speed" name="speed" min="0" max="100" onchange="speedchange()">
            <label for="speed">Replaying Speed</label>
        </div>
        <div id="dialogStatistic" style="display: flex;flex-direction: column;">
            <div style="display: flex;width: 2800px;flex-direction: row;height: 60px;">
                <div class="info">
                    <label for="version_updates" style="position: relative;">🔨version_updates</label>
                    <p id="version_updates"></p>
                </div>
                <div class="info">
                    <label for="num_code_files" style="position: relative;">📃num_code_files</label>
                    <p id="num_code_files"></p>
                </div>
                <div class="info">
                    <label for="num_png_files" style="position: relative;"> 🏞num_png_files</label>
                    <p id="num_png_files"></p>
                </div>
                <div class="info">
                    <label for="num_doc_files" style="position: relative;">📚num_doc_files</label>
                    <p id="num_doc_files"></p>
                </div>
                <div class="info">
                    <label for="code_lines" style="position: relative;">📃code_lines</label>
                    <p id="code_lines"></p>
                </div>
                <div class="info">
                    <label for="env_lines" style="position: relative;">📋env_lines</label>
                    <p id="env_lines"></p>
                </div>
                <div class="info">
                    <label for="manual_lines" style="position: relative;">📒manual_lines</label>
                    <p id="manual_lines"></p>
                </div>
                <div class="info">
                    <label for="num_utterances" style="position: relative;">🗣num_utterances</label>
                    <p id="num_utterances"></p>
                </div>
                <div class="info">
                    <label for="num_self_reflections" style="position: relative;">🤔num_self_reflections</label>
                    <p id="num_self_reflections"></p>
                </div>
                <div class="info">
                    <label for="num_prompt_tokens" style="position: relative;">❓num_prompt_tokens</label>
                    <p id="num_prompt_tokens"></p>
                </div>
                <div class="info">
                    <label for="num_completion_tokens" style="position: relative;">❗num_completion_tokens</label>
                    <p id="num_completion_tokens"></p>
                </div>
                <div class="info">
                    <label for="num_total_tokens" style="position: relative;">⁉️num_total_tokens</label>
                    <p id="num_total_tokens"></p>
                </div>
                <div class="info">
                    <label for="cost" style="position: relative;">💰cost</label>
                    <p id="cost"></p>
                </div>
                <div class="info">
                    <label for="duration" style="position: relative;">🕑duration</label>
                    <p id="duration"></p>
                </div>
            </div>
        </div>
    </div>
    <script src="replay/js/app.js"></script>
</body>
</html>


/home/brandon/Projects/ChatDev/visualizer/static/css/style.css

.container {
    margin-top: 20px;
    margin-bottom: 20px;
    width: 2500px;
    height: 700px;
    border: 1px solid black;
    overflow-y: scroll;
    background-color: white;
    position: relative;
}
.message-container {
  position: relative;
  display: flex;
  margin: 20px;
  max-width: 95%;
  word-wrap: break-word;
  padding-top: 0px; 
}
.message-text {
    background-color: #D2D4D3;
    border-radius: 10px;
    padding: 8px;
    margin-left: 40px;
    font-size: 10px;
    width: 100%;
}
.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    position: absolute;
    top: 0px;
    left: -30px;
    margin-left: 20px;
    background-color: green;
    background-size: cover;
}
.role {
    font-size: 12px;
    font-weight: bold;
    position: absolute;
    bottom: 0;
    top: -30px;
    margin-top: 10px;
    margin-left: 40px;
}
.code-block pre {
    margin: 0;
}
.dark {
    color: #000000;
}
.line-numbers .line-numbers-rows {
    border-right-color: #44475a;
    display: block; 
}
.code-block-header {
    background-color: #5b5656;
    color: #ffffff;
    padding: 5px;
    font-size: 14px;
    font-weight: bold;
}
.code-block {
    background-color: #000000 !important;
    border-radius: 4px;
    margin-top: 10px;
    position: relative;
    overflow: hidden;
    color: #000000; 
}
table {
  border-collapse: collapse;
  width: 100%;
}
th, td {
  border: 1px solid black;
  padding: 8px;
  text-align: left;
  white-space: pre-line;
}
.expand-button {
  position: absolute;
  top: 3px;
  right: 65px;
  border-radius: 4px;
  background-color: #95A1A1;
  color: #f8f8f2;
  border: none;
  padding: 5px;
  cursor: pointer;
  font-size: 8px;
  width: 50px;
  height: 20px;
  line-height: 10px;
  font-weight: bold;
}
.expand-button:hover {
  background-color: #6B9297; 
}
.copy-button {
    position: absolute;
    top: 3px;
    right: 3px;
    background-color: #A9A9A7;
    color: #f8f8f2;
    border: none;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
    width: 55px;
    height: 20px;
    line-height: 10px;
    font-size: 8px;
    font-weight: bold;
    transition: background-color 0.3s ease;
}
.copy-button:hover {
  background-color: #866753; 
}


/home/brandon/Projects/ChatDev/visualizer/static/js/main.js

function append_message(role, text, avatarUrl) {
  var message_container = $("<div></div>").addClass("message-container");
  var avatar_element = $("<span></span>").addClass("avatar");
  var role_element = $("<p></p>").addClass("role").text(role);
  if (avatarUrl) {
    avatar_element.css("background-image", `url(${avatarUrl})`);
  } else {
    avatar_element.css("background-color", "green");
  }
  message_container.append(role_element);
  message_container.append(avatar_element);
  var parsedText = role === 'System' ? parseSystemMessage(text) : parseCodeBlocks(text, role);
  message_container.append(parsedText);
  var copyButton = $("<button></button>")
    .addClass("copy-button")
    .text("Copy")
    .click(function () {
      copyToClipboard(parsedText);     });
  copyButton.click(function () {
    copyToClipboard(parsedText);
    copyButton.text("Copied"); 
    setTimeout(function () {
      copyButton.text("Copy"); 
    }, 5000); 
  });
  message_container.append(copyButton);   $("#chat-box").append(message_container);
}
function parseCodeBlocks(text, role) {
  var parts = text.split(/(```[\s\S]*?```)/g);
  var parsedText = $("<div></div>").addClass("message-text");
  parts.forEach(part => {
    if (part.startsWith("```") && role != "System") {
      var trimmedBlock = part.trim();
      var language = trimmedBlock.match(/^```(\w+)/);
      if (language) {
        language = language[1];
        var codeContent = trimmedBlock.replace(/^```(\w+)/, '').replace(/```$/, '');
        var codeBlockHTML = `
          <div class="code-block">
            <div class="code-block-header">${role} - ${language}</div>
            <pre class="language-${language} dark line-numbers" data-line><code>${hljs.highlightAuto(codeContent, [language]).value}</code></pre>
          </div>
        `;
        parsedText.append(codeBlockHTML);
      }
    } else {
      parsedText.append(marked(_.escape(part), {breaks: true}));
    }
  });
  return parsedText;
}
function get_new_messages() {
  $.getJSON("/get_messages", function (data) {
    var lastDisplayedMessageIndex = $("#chat-box .message-container").length;
    for (var i = lastDisplayedMessageIndex; i < data.length; i++) {
      var role = data[i].role;
      var text = data[i].text;
      var avatarUrl = data[i].avatarUrl;
      append_message(role, text, avatarUrl);
    }
  });
}
function parseSystemMessage(text) {
  var message = $("<div></div>").addClass("message-text").addClass("system-message");
  var firstLine = text.split('\n')[0];
  var collapsed = true;
  var messageContent = $("<div></div>").html(marked(firstLine, { breaks: true })).addClass("original-markdown");
  var originalMarkdown = $("<div></div>").html(marked(text, { breaks: true })).addClass("original-markdown");
  var expandButton = $("<button></button>")
    .addClass("expand-button")
    .text("Expand")
    .click(function () {
      if (collapsed) {
        messageContent.hide();
        originalMarkdown.show();
        expandButton.text("Collapse");
      } else {
        messageContent.show();
        originalMarkdown.hide();
        expandButton.text("Expand");
      }
      collapsed = !collapsed;
    });
  message.append(messageContent);
  message.append(originalMarkdown);
  message.append(expandButton);
  originalMarkdown.hide();
  return message;
}
function copyToClipboard(element) {
  var tempTextArea = document.createElement("textarea");
  tempTextArea.value = element.text();
  document.body.appendChild(tempTextArea);
  tempTextArea.select();
  document.execCommand("copy");
  document.body.removeChild(tempTextArea);
}
$(document).ready(function () {
  get_new_messages();
  setInterval(function () {
    get_new_messages();
  }, 1000);
});


/home/brandon/Projects/ChatDev/visualizer/static/replay/css/github-markdown-dark.css

.markdown-body {
  color-scheme: dark;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  margin: 0;
  color: #c9d1d9;
  background-color: #0d1117;
  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
  font-size: 16px;
  line-height: 1.5;
  word-wrap: break-word;
}
.markdown-body .octicon {
  display: inline-block;
  fill: currentColor;
  vertical-align: text-bottom;
}
.markdown-body h1:hover .anchor .octicon-link:before,
.markdown-body h2:hover .anchor .octicon-link:before,
.markdown-body h3:hover .anchor .octicon-link:before,
.markdown-body h4:hover .anchor .octicon-link:before,
.markdown-body h5:hover .anchor .octicon-link:before,
.markdown-body h6:hover .anchor .octicon-link:before {
  width: 16px;
  height: 16px;
  content: ' ';
  display: inline-block;
  background-color: currentColor;
  -webkit-mask-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>");
  mask-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>");
}
.markdown-body details,
.markdown-body figcaption,
.markdown-body figure {
  display: block;
}
.markdown-body summary {
  display: list-item;
}
.markdown-body [hidden] {
  display: none !important;
}
.markdown-body a {
  background-color: transparent;
  color: #58a6ff;
  text-decoration: none;
}
.markdown-body abbr[title] {
  border-bottom: none;
  text-decoration: underline dotted;
}
.markdown-body b,
.markdown-body strong {
  font-weight: 600;
}
.markdown-body dfn {
  font-style: italic;
}
.markdown-body h1 {
  margin: .67em 0;
  font-weight: 600;
  padding-bottom: .3em;
  font-size: 2em;
  border-bottom: 1px solid #21262d;
}
.markdown-body mark {
  background-color: rgba(187,128,9,0.15);
  color: #c9d1d9;
}
.markdown-body small {
  font-size: 90%;
}
.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sub {
  bottom: -0.25em;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body img {
  border-style: none;
  max-width: 100%;
  box-sizing: content-box;
  background-color: #0d1117;
}
.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace;
  font-size: 1em;
}
.markdown-body figure {
  margin: 1em 40px;
}
.markdown-body hr {
  box-sizing: content-box;
  overflow: hidden;
  background: transparent;
  border-bottom: 1px solid #21262d;
  height: .25em;
  padding: 0;
  margin: 24px 0;
  background-color: #30363d;
  border: 0;
}
.markdown-body input {
  font: inherit;
  margin: 0;
  overflow: visible;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}
.markdown-body [type=button],
.markdown-body [type=reset],
.markdown-body [type=submit] {
  -webkit-appearance: button;
}
.markdown-body [type=checkbox],
.markdown-body [type=radio] {
  box-sizing: border-box;
  padding: 0;
}
.markdown-body [type=number]::-webkit-inner-spin-button,
.markdown-body [type=number]::-webkit-outer-spin-button {
  height: auto;
}
.markdown-body [type=search]::-webkit-search-cancel-button,
.markdown-body [type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}
.markdown-body ::-webkit-input-placeholder {
  color: inherit;
  opacity: .54;
}
.markdown-body ::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}
.markdown-body a:hover {
  text-decoration: underline;
}
.markdown-body ::placeholder {
  color: #6e7681;
  opacity: 1;
}
.markdown-body hr::before {
  display: table;
  content: "";
}
.markdown-body hr::after {
  display: table;
  clear: both;
  content: "";
}
.markdown-body table {
  border-spacing: 0;
  border-collapse: collapse;
  display: block;
  width: max-content;
  max-width: 100%;
  overflow: auto;
}
.markdown-body td,
.markdown-body th {
  padding: 0;
}
.markdown-body details summary {
  cursor: pointer;
}
.markdown-body details:not([open])>*:not(summary) {
  display: none !important;
}
.markdown-body a:focus,
.markdown-body [role=button]:focus,
.markdown-body input[type=radio]:focus,
.markdown-body input[type=checkbox]:focus {
  outline: 2px solid #58a6ff;
  outline-offset: -2px;
  box-shadow: none;
}
.markdown-body a:focus:not(:focus-visible),
.markdown-body [role=button]:focus:not(:focus-visible),
.markdown-body input[type=radio]:focus:not(:focus-visible),
.markdown-body input[type=checkbox]:focus:not(:focus-visible) {
  outline: solid 1px transparent;
}
.markdown-body a:focus-visible,
.markdown-body [role=button]:focus-visible,
.markdown-body input[type=radio]:focus-visible,
.markdown-body input[type=checkbox]:focus-visible {
  outline: 2px solid #58a6ff;
  outline-offset: -2px;
  box-shadow: none;
}
.markdown-body a:not([class]):focus,
.markdown-body a:not([class]):focus-visible,
.markdown-body input[type=radio]:focus,
.markdown-body input[type=radio]:focus-visible,
.markdown-body input[type=checkbox]:focus,
.markdown-body input[type=checkbox]:focus-visible {
  outline-offset: 0;
}
.markdown-body kbd {
  display: inline-block;
  padding: 3px 5px;
  font: 11px ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
  line-height: 10px;
  color: #c9d1d9;
  vertical-align: middle;
  background-color: #161b22;
  border: solid 1px rgba(110,118,129,0.4);
  border-bottom-color: rgba(110,118,129,0.4);
  border-radius: 6px;
  box-shadow: inset 0 -1px 0 rgba(110,118,129,0.4);
}
.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 24px;
  margin-bottom: 16px;
  font-weight: 600;
  line-height: 1.25;
}
.markdown-body h2 {
  font-weight: 600;
  padding-bottom: .3em;
  font-size: 1.5em;
  border-bottom: 1px solid #21262d;
}
.markdown-body h3 {
  font-weight: 600;
  font-size: 1.25em;
}
.markdown-body h4 {
  font-weight: 600;
  font-size: 1em;
}
.markdown-body h5 {
  font-weight: 600;
  font-size: .875em;
}
.markdown-body h6 {
  font-weight: 600;
  font-size: .85em;
  color: #8b949e;
}
.markdown-body p {
  margin-top: 0;
  margin-bottom: 10px;
}
.markdown-body blockquote {
  margin: 0;
  padding: 0 1em;
  color: #8b949e;
  border-left: .25em solid #30363d;
}
.markdown-body ul,
.markdown-body ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 2em;
}
.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}
.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}
.markdown-body dd {
  margin-left: 0;
}
.markdown-body tt,
.markdown-body code,
.markdown-body samp {
  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
  font-size: 12px;
}
.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
  font-size: 12px;
  word-wrap: normal;
}
.markdown-body .octicon {
  display: inline-block;
  overflow: visible !important;
  vertical-align: text-bottom;
  fill: currentColor;
}
.markdown-body input::-webkit-outer-spin-button,
.markdown-body input::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
  appearance: none;
}
.markdown-body::before {
  display: table;
  content: "";
}
.markdown-body::after {
  display: table;
  clear: both;
  content: "";
}
.markdown-body>*:first-child {
  margin-top: 0 !important;
}
.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}
.markdown-body a:not([href]) {
  color: inherit;
  text-decoration: none;
}
.markdown-body .absent {
  color: #f85149;
}
.markdown-body .anchor {
  float: left;
  padding-right: 4px;
  margin-left: -20px;
  line-height: 1;
}
.markdown-body .anchor:focus {
  outline: none;
}
.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body details {
  margin-top: 0;
  margin-bottom: 16px;
}
.markdown-body blockquote>:first-child {
  margin-top: 0;
}
.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}
.markdown-body h1 .octicon-link,
.markdown-body h2 .octicon-link,
.markdown-body h3 .octicon-link,
.markdown-body h4 .octicon-link,
.markdown-body h5 .octicon-link,
.markdown-body h6 .octicon-link {
  color: #c9d1d9;
  vertical-align: middle;
  visibility: hidden;
}
.markdown-body h1:hover .anchor,
.markdown-body h2:hover .anchor,
.markdown-body h3:hover .anchor,
.markdown-body h4:hover .anchor,
.markdown-body h5:hover .anchor,
.markdown-body h6:hover .anchor {
  text-decoration: none;
}
.markdown-body h1:hover .anchor .octicon-link,
.markdown-body h2:hover .anchor .octicon-link,
.markdown-body h3:hover .anchor .octicon-link,
.markdown-body h4:hover .anchor .octicon-link,
.markdown-body h5:hover .anchor .octicon-link,
.markdown-body h6:hover .anchor .octicon-link {
  visibility: visible;
}
.markdown-body h1 tt,
.markdown-body h1 code,
.markdown-body h2 tt,
.markdown-body h2 code,
.markdown-body h3 tt,
.markdown-body h3 code,
.markdown-body h4 tt,
.markdown-body h4 code,
.markdown-body h5 tt,
.markdown-body h5 code,
.markdown-body h6 tt,
.markdown-body h6 code {
  padding: 0 .2em;
  font-size: inherit;
}
.markdown-body summary h1,
.markdown-body summary h2,
.markdown-body summary h3,
.markdown-body summary h4,
.markdown-body summary h5,
.markdown-body summary h6 {
  display: inline-block;
}
.markdown-body summary h1 .anchor,
.markdown-body summary h2 .anchor,
.markdown-body summary h3 .anchor,
.markdown-body summary h4 .anchor,
.markdown-body summary h5 .anchor,
.markdown-body summary h6 .anchor {
  margin-left: -40px;
}
.markdown-body summary h1,
.markdown-body summary h2 {
  padding-bottom: 0;
  border-bottom: 0;
}
.markdown-body ul.no-list,
.markdown-body ol.no-list {
  padding: 0;
  list-style-type: none;
}
.markdown-body ol[type=a] {
  list-style-type: lower-alpha;
}
.markdown-body ol[type=A] {
  list-style-type: upper-alpha;
}
.markdown-body ol[type=i] {
  list-style-type: lower-roman;
}
.markdown-body ol[type=I] {
  list-style-type: upper-roman;
}
.markdown-body ol[type="1"] {
  list-style-type: decimal;
}
.markdown-body div>ol:not([type]) {
  list-style-type: decimal;
}
.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}
.markdown-body li>p {
  margin-top: 16px;
}
.markdown-body li+li {
  margin-top: .25em;
}
.markdown-body dl {
  padding: 0;
}
.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: 600;
}
.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}
.markdown-body table th {
  font-weight: 600;
}
.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #30363d;
}
.markdown-body table tr {
  background-color: #0d1117;
  border-top: 1px solid #21262d;
}
.markdown-body table tr:nth-child(2n) {
  background-color: #161b22;
}
.markdown-body table img {
  background-color: transparent;
}
.markdown-body img[align=right] {
  padding-left: 20px;
}
.markdown-body img[align=left] {
  padding-right: 20px;
}
.markdown-body .emoji {
  max-width: none;
  vertical-align: text-top;
  background-color: transparent;
}
.markdown-body span.frame {
  display: block;
  overflow: hidden;
}
.markdown-body span.frame>span {
  display: block;
  float: left;
  width: auto;
  padding: 7px;
  margin: 13px 0 0;
  overflow: hidden;
  border: 1px solid #30363d;
}
.markdown-body span.frame span img {
  display: block;
  float: left;
}
.markdown-body span.frame span span {
  display: block;
  padding: 5px 0 0;
  clear: both;
  color: #c9d1d9;
}
.markdown-body span.align-center {
  display: block;
  overflow: hidden;
  clear: both;
}
.markdown-body span.align-center>span {
  display: block;
  margin: 13px auto 0;
  overflow: hidden;
  text-align: center;
}
.markdown-body span.align-center span img {
  margin: 0 auto;
  text-align: center;
}
.markdown-body span.align-right {
  display: block;
  overflow: hidden;
  clear: both;
}
.markdown-body span.align-right>span {
  display: block;
  margin: 13px 0 0;
  overflow: hidden;
  text-align: right;
}
.markdown-body span.align-right span img {
  margin: 0;
  text-align: right;
}
.markdown-body span.float-left {
  display: block;
  float: left;
  margin-right: 13px;
  overflow: hidden;
}
.markdown-body span.float-left span {
  margin: 13px 0 0;
}
.markdown-body span.float-right {
  display: block;
  float: right;
  margin-left: 13px;
  overflow: hidden;
}
.markdown-body span.float-right>span {
  display: block;
  margin: 13px auto 0;
  overflow: hidden;
  text-align: right;
}
.markdown-body code,
.markdown-body tt {
  padding: .2em .4em;
  margin: 0;
  font-size: 85%;
  white-space: break-spaces;
  background-color: rgba(110,118,129,0.4);
  border-radius: 6px;
}
.markdown-body code br,
.markdown-body tt br {
  display: none;
}
.markdown-body del code {
  text-decoration: inherit;
}
.markdown-body samp {
  font-size: 85%;
}
.markdown-body pre code {
  font-size: 100%;
}
.markdown-body pre>code {
  padding: 0;
  margin: 0;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}
.markdown-body .highlight {
  margin-bottom: 16px;
}
.markdown-body .highlight pre {
  margin-bottom: 0;
  word-break: normal;
}
.markdown-body .highlight pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #161b22;
  border-radius: 6px;
}
.markdown-body pre code,
.markdown-body pre tt {
  display: inline;
  max-width: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}
.markdown-body .csv-data td,
.markdown-body .csv-data th {
  padding: 5px;
  overflow: hidden;
  font-size: 12px;
  line-height: 1;
  text-align: left;
  white-space: nowrap;
}
.markdown-body .csv-data .blob-num {
  padding: 10px 8px 9px;
  text-align: right;
  background: #0d1117;
  border: 0;
}
.markdown-body .csv-data tr {
  border-top: 0;
}
.markdown-body .csv-data th {
  font-weight: 600;
  background: #161b22;
  border-top: 0;
}
.markdown-body [data-footnote-ref]::before {
  content: "[";
}
.markdown-body [data-footnote-ref]::after {
  content: "]";
}
.markdown-body .footnotes {
  font-size: 12px;
  color: #8b949e;
  border-top: 1px solid #30363d;
}
.markdown-body .footnotes ol {
  padding-left: 16px;
}
.markdown-body .footnotes ol ul {
  display: inline-block;
  padding-left: 16px;
  margin-top: 16px;
}
.markdown-body .footnotes li {
  position: relative;
}
.markdown-body .footnotes li:target::before {
  position: absolute;
  top: -8px;
  right: -8px;
  bottom: -8px;
  left: -24px;
  pointer-events: none;
  content: "";
  border: 2px solid #1f6feb;
  border-radius: 6px;
}
.markdown-body .footnotes li:target {
  color: #c9d1d9;
}
.markdown-body .footnotes .data-footnote-backref g-emoji {
  font-family: monospace;
}
.markdown-body .pl-c {
  color: #8b949e;
}
.markdown-body .pl-c1,
.markdown-body .pl-s .pl-v {
  color: #79c0ff;
}
.markdown-body .pl-e,
.markdown-body .pl-en {
  color: #d2a8ff;
}
.markdown-body .pl-smi,
.markdown-body .pl-s .pl-s1 {
  color: #c9d1d9;
}
.markdown-body .pl-ent {
  color: #7ee787;
}
.markdown-body .pl-k {
  color: #ff7b72;
}
.markdown-body .pl-s,
.markdown-body .pl-pds,
.markdown-body .pl-s .pl-pse .pl-s1,
.markdown-body .pl-sr,
.markdown-body .pl-sr .pl-cce,
.markdown-body .pl-sr .pl-sre,
.markdown-body .pl-sr .pl-sra {
  color: #a5d6ff;
}
.markdown-body .pl-v,
.markdown-body .pl-smw {
  color: #ffa657;
}
.markdown-body .pl-bu {
  color: #f85149;
}
.markdown-body .pl-ii {
  color: #f0f6fc;
  background-color: #8e1519;
}
.markdown-body .pl-c2 {
  color: #f0f6fc;
  background-color: #b62324;
}
.markdown-body .pl-sr .pl-cce {
  font-weight: bold;
  color: #7ee787;
}
.markdown-body .pl-ml {
  color: #f2cc60;
}
.markdown-body .pl-mh,
.markdown-body .pl-mh .pl-en,
.markdown-body .pl-ms {
  font-weight: bold;
  color: #1f6feb;
}
.markdown-body .pl-mi {
  font-style: italic;
  color: #c9d1d9;
}
.markdown-body .pl-mb {
  font-weight: bold;
  color: #c9d1d9;
}
.markdown-body .pl-md {
  color: #ffdcd7;
  background-color: #67060c;
}
.markdown-body .pl-mi1 {
  color: #aff5b4;
  background-color: #033a16;
}
.markdown-body .pl-mc {
  color: #ffdfb6;
  background-color: #5a1e02;
}
.markdown-body .pl-mi2 {
  color: #c9d1d9;
  background-color: #1158c7;
}
.markdown-body .pl-mdr {
  font-weight: bold;
  color: #d2a8ff;
}
.markdown-body .pl-ba {
  color: #8b949e;
}
.markdown-body .pl-sg {
  color: #484f58;
}
.markdown-body .pl-corl {
  text-decoration: underline;
  color: #a5d6ff;
}
.markdown-body g-emoji {
  display: inline-block;
  min-width: 1ch;
  font-family: "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 1em;
  font-style: normal !important;
  font-weight: 400;
  line-height: 1;
  vertical-align: -0.075em;
}
.markdown-body g-emoji img {
  width: 1em;
  height: 1em;
}
.markdown-body .task-list-item {
  list-style-type: none;
}
.markdown-body .task-list-item label {
  font-weight: 400;
}
.markdown-body .task-list-item.enabled label {
  cursor: pointer;
}
.markdown-body .task-list-item+.task-list-item {
  margin-top: 4px;
}
.markdown-body .task-list-item .handle {
  display: none;
}
.markdown-body .task-list-item-checkbox {
  margin: 0 .2em .25em -1.4em;
  vertical-align: middle;
}
.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox {
  margin: 0 -1.6em .25em .2em;
}
.markdown-body .contains-task-list {
  position: relative;
}
.markdown-body .contains-task-list:hover .task-list-item-convert-container,
.markdown-body .contains-task-list:focus-within .task-list-item-convert-container {
  display: block;
  width: auto;
  height: 24px;
  overflow: visible;
  clip: auto;
}
.markdown-body ::-webkit-calendar-picker-indicator {
  filter: invert(50%);
}


/home/brandon/Projects/ChatDev/visualizer/static/replay/css/use.css

p,
div,
label {
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
}
body {
    background-color: #23252c;
}
.button {
    padding: 16px 15px;
    background: #e2edf0;
    color: #0b0c0c;
    font-weight: 800;
    font-size: 16px;
    cursor: pointer;
    height: 80px;
    box-shadow: 1px 2px 2px #505757;
    border-radius: 20px;
    border: #020202;
}
.blinking-animation {
    width: 25px;
    height: 25px;
    animation: blink 1s ease infinite;
}
@keyframes blink {
    0%,
    100% {
        opacity: 1;
    }
    50% {
        opacity: 0;
    }
}
#filebutton {
    position: relative;
    left: 50px;
}
#title>p {
    font-size: 30px;
    color: #fefefe;
    text-shadow: 0 0 0.5em #0ae642, 0 0 0.2em #5c5c5c;
}
#replay {
    position: relative;
    left: 340px;
    width: 100px;
}
#successupload {
    position: absolute;
    top: 730px;
    left: 200px;
    color: antiquewhite;
    display: none;
}
#successupload>p {
    position: relative;
    left: 20px;
}
#fileInput {
    display: none;
}
#humanRequest {
    background-color: rgb(30, 39, 46);
    border: 1px solid #ffffff;
    border-radius: 10px;
    box-shadow: 3px 3px 4px black;
}
#dialogBody,
#dialogStatistic {
    width: 790px;
    height: 570px;
    background-color: rgb(255, 255, 255);
    border: 1px solid #ccc;
    border-radius: 10px;
    box-shadow: 3px 3px 4px black;
    overflow: auto;
    padding: 20px;
    float: right;
    position: relative;
    margin-left: auto;
    top: 10px;
}
#speed {
    position: relative;
    width: 600px;
    top: 35px;
    right: -150px;
}
#speedcontrol>label {
    display: block;
    position: relative;
    top: 15px;
    width: 200px;
    color: aliceblue;
    font-size: medium;
    font-weight: bold;
}
[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
    outline: 0;
    background-color: transparent;
    width: 600px;
}
[type="range"]::-webkit-slider-runnable-track {
    height: 4px;
    background: #eee;
}
[type="range" i]::-webkit-slider-container {
    height: 25px;
    overflow: hidden;
}
[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 30%;
    background-color: #ffffff;
    border: 1px solid transparent;
    margin-top: -8px;
    border-image: linear-gradient(#133163, #133163) 0 fill / 8 20 8 0 / 0px 0px 0 2000px;
}
#dialogStatistic {
    height: 52px;
    top: 30px;
    position: relative;
}
.message {
    margin: 10px;
}
#test {
    border: 1px solid rgba(130, 133, 186, 0.3);
    border-radius: 10px;
    box-shadow: 1px 2px 2px black;
    width: 100px;
    font-size: 18px;
    display: none;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
}
img {
    height: 100%;
    width: 100%;
}
#imgShow {
    height: 450px;
    width: 600px;
    position: relative;
    top: 120px;
}
#successupload {
    width: 200px;
}
#show {
    display: flex;
    float: right;
    position: relative;
    right: -50px;
}
.info>p {
    font-size: large;
    font-weight: 900;
    position: relative;
    font-style: inherit;
    color: rgb(12, 13, 13);
}
.info>label {
    height: 17px;
    position: relative;
    align-items: center;
}
.info {
    display: block;
    height: 25px;
    position: relative;
    width: 200px;
    color: rgb(30, 39, 46);
    border-radius: 10px;
    font-size: small;
    font-weight: bold;
    font-style: inherit;
    display: block;
    font-weight: 900;
}
#text-container {
    font-size: 24px;
    line-height: 1.5;
}
@keyframes revealText {
    0% {
        visibility: hidden;
    }
    100% {
        visibility: visible;
    }
}

/home/brandon/Projects/ChatDev/visualizer/static/replay/js/app.js

const coordSet = [];
coordSet["Chief Executive Officer"] = {
    "character": "Chief Executive Officer",
    "imgid": "right",
    "top": "-315px",
    "left": "280px"
};
coordSet["Chief Product Officer"] = {
    "character": "Chief Product Officer",
    "imgid": "left",
    "top": "-165px",
    "left": "110px"
};
coordSet["Chief Human Resource Officer"] = {
    "character": "Chief Human Resource Officer",
    "imgid": "left",
    "top": "-305px",
    "left": "55px"
};
coordSet["Code Reviewer"] = {
    "character": "Code Reviewer",
    "imgid": "left",
    "top": "-185px",
    "left": "500px"
};
coordSet["Programmer"] = {
    "character": "Programmer",
    "imgid": "right",
    "top": "-80px",
    "left": "300px"
};
coordSet["Chief Technology Officer"] = {
    "character": "Chief Technology Officer",
    "imgid": "right",
    "top": "-130px",
    "left": "340px"
};
coordSet["Chief Creative Officer"] = {
    "character": "Chief Creative Officer",
    "imgid": "right",
    "top": "-95px",
    "left": "205px"
}
coordSet["Software Test Engineer"] = {
    "character": "Software Test Engineer",
    "imgid": "right",
    "top": "-90px",
    "left": "470px"
}
coordSet["User"] = {
    "character": "User",
    "imgid": "left",
    "top": "-465px",
    "left": "125px"
}
coordSet["Counselor"] = {
    "character": "Counselor",
    "imgid": "right",
    "top": "-360px",
    "left": "420px"
}
coordSet["Prompt Engineer"] = {
    "character": "Prompt Engineer",
    "imgid": "right",
    "top": "-320px",
    "left": "20px"
}
const Softwareinfo = {
    "duration": "-1",
    "cost": "-1",
    "version_updates": "-1",
    "num_code_files": "-1",
    "num_png_files": "-1",
    "num_doc_files": "-1",
    "code_lines": "-1",
    "env_lines": "-1",
    "manual_lines": "-1",
    "num_utterances": "-1",
    "num_self_reflections": "-1",
    "num_prompt_tokens": "-1",
    "num_completion_tokens": "-1",
    "num_total_tokens": "-1",
};
var timeinterval = 5;
var charinterval = 1;
var scrollinterval = 40;
var contents;
var filename;
var curdialog = '';
var total_height = 0;
var cur_para = '';
var cur_command = '';
var idx = 0;
var dialog;
var replaying = 0;
var if_stop = 0;
let isPaused = false;
let pauseIntervalId;
var if_move = true;
var md = window.markdownit();
const button = document.getElementById('replay');
button.addEventListener('click', () => {
    replayDialog(idx);
});
$(document).ready(function() {
    $('#filebutton').click(function() {
        $('#fileInput').click();
    });
});
const dialogbody = document.getElementById("dialogBody");
dialogbody.addEventListener("mousewheel", handleMouseWheel, false);
function handleMouseWheel(event) {
    if (event.wheelDelta > 0) {
        if_move = false;
    } else if (event.wheelDelta < 0) {
        if (dialogbody.scrollTop + dialogbody.clientHeight == dialogbody.scrollHeight) {
            if_move = true;
        }
    }
}
function getinterval(speed) {
    if (speed < 80 && speed > 40) {
        timeinterval = 250 / speed;
        charinterval = 2;
        scrollinterval = 80;
    } else if (speed <= 40 && speed > 0) {
        timeinterval = 150 / speed;
        charinterval = 1;
        scrollinterval = 80;
    } else if (speed >= 80 && speed < 90) {
        timeinterval = 100 / speed;
        charinterval = 1;
        scrollinterval = 100;
    } else if (speed >= 90 && speed <= 100) {
        timeinterval = 5 / speed;
        charinterval = 1;
        scrollinterval = 400;
    }
}
function speedchange() {
    var speedbar = document.getElementById("speed");
    var speed = speedbar.value;
    if (speed == 0) {
        if (!isPaused) {
            isPaused = true;
            clearInterval(pauseIntervalId);
            updateCompanyWorking("end");
        }
    } else if (speed != 0 && isPaused == true) {
        getinterval(speed);
        isPaused = false;
        idx += 1;
        replayDialog(idx);
    } else if (speed != 0) {
        isPaused = false;
        getinterval(speed);
    }
}
async function replayDialog(idx) {
    if (replaying == 1 && idx == 0) {
        return;
    }
    if (idx == 0) {
        replaying = 1;
        dialog = extraction(contents);
        var filelable = document.getElementById("successupload");
        filelable.style.display = "block";
        var info = "Replaying `" + filename + "` ......";
        filelable.innerHTML = md.render(info);
    }
    for (let i = idx; i < dialog.length; ++i) {
        await createPara(dialog[i], i);
    }
}
function watchfileInput(files) {
    if (files.length) {
        const file = files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function() {
                contents = this.result;
            };
            reader.readAsText(file);
            var filelable = document.getElementById("successupload");
            filelable.style.display = "block";
            var info = "File uploaded (`" + file.name + "`). Please click **\"Replay\"** to show ChatDev's development process";
            filename = file.name;
            filelable.innerHTML = md.render(info);
        }
    }
}
function extraction(contents) {
    const regex = /\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \w+)\] ([.\s\S\n\r\d\D\t]*?)(?=\n\[\d|$)/g;
    var matches = [];
    let match;
    var itemp = 0;
    while ((match = regex.exec(contents))) {
        console.log(itemp);
        itemp++;
        const timestamp = match[1];
        const text = match[2];
        matches.push({
            timestamp,
            text
        });
    }
    const regex_assistant = /(.*):([.\r\n\s\S\t\d\D]*)<->([.\r\n\s\S\t\d\D]*?)\]([.\r\n\s\S\t\d\D]*)/g;
    const regex_user = /(.*):(.*)(\[Start Chat\])([.\r\n\s\S\t\d\D]*?)\]([.\r\n\s\S\t\d\D]*)/g;
    const regex_prompt = /(Prompt Engineer):([\S\s]*)/g
    const regex_end = /(AgentTech Ends|ChatDev Ends)/g;
    const regex_start = /(ChatDev Starts)([\D\s])*(\d*)/g;
    const regex_task = /(task_prompt)(.*):(.*)/g;
    const regex_info = /Software Info([\r\n\s\S\t\d\D]*)/g;
    const regex_system = /System/g;
    const regex_debug = /DEBUG/g;
    var dialog = [];
    var count = 0;
    for (let i = 0; i < matches.length; ++i) {
        var if_break = false;
        console.log(i);
        if (i == 159 || i == 198 || i == 223 || i == 260 || i == 416 || i == 537) {
        }
        while ((match = regex_debug.exec(matches[i].timestamp)) !== null) {
            if_break = true;
        }
        while ((match = regex_system.exec(matches[i].text)) !== null) {
            if_break = true;
        }
        while (((match = regex_prompt.exec(matches[i].text)) !== null)) {
            const type = "assitant";
            const character = match[1];
            const command = match[2];
            const len = match[2].length;
            count += 1;
            dialog.push({
                type,
                character,
                command,
                len,
                count
            });
            if_break = true;
        }
        if (if_break) {
            continue;
        }
        while ((match = regex_assistant.exec(matches[i].text)) !== null) {
            const type = "assitant";
            const character = match[1];
            const command = match[4];
            const len = match[4].length;
            count += 1;
            dialog.push({
                type,
                character,
                command,
                len,
                count
            });
        }
        while ((match = regex_user.exec(matches[i].text)) !== null) {
            const type = "user";
            const character = match[1];
            const command = match[5];
            const len = match[5].length;
            count += 1;
            dialog.push({
                type,
                character,
                command,
                len,
                count
            });
        }
        while ((match = regex_start.exec(matches[i].text)) !== null) {
            const start = match[1];
            const len = match[1].length;
            dialog.push({
                start,
                len,
            });
        }
        while ((match = regex_end.exec(matches[i].text)) !== null) {
            const end = match[1];
            const len = match[1].length;
            dialog.push({
                end,
                len,
            });
        }
        while ((match = regex_task.exec(matches[i].text)) !== null) {
            const task = match[3];
            dialog.push({
                task
            });
        }
        while ((match = regex_info.exec(matches[i].text)) !== null) {
            const info = match[1];
            if ((/code_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.code_lines = (/code_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_code_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_code_files = (/num_code_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_png_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_png_files = (/num_png_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_doc_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_doc_files = (/num_doc_files(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/env_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.env_lines = (/env_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/manual_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.manual_lines = (/manual_lines(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/duration(?:[\t\n\r\s\D]*?)=(-?(\d*)(.(\d)*)?s)/g).exec(info) != null) {
                Softwareinfo.duration = (/duration(?:[\t\n\r\s\D]*?)=(-?(\d*)(.(\d)*)?s)/g).exec(info)[1];
            }
            if ((/num_utterances(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_utterances = (/num_utterances(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_self_reflections(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_self_reflections = (/num_self_reflections(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_prompt_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_prompt_tokens = (/num_prompt_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_completion_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_completion_tokens = (/num_completion_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/num_total_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info) != null) {
                Softwareinfo.num_total_tokens = (/num_total_tokens(?:[\t\n\r\s\D]*?)=(-?(\d*))/g).exec(info)[1];
            }
            if ((/cost(?:[\t\n\r\s\D]*?)=(.((\d)*\.(\d)*))/g).exec(info) != null) {
                Softwareinfo.cost = (/cost(?:[\t\n\r\s\D]*?)=(.((\d)*\.(\d)*))/g).exec(info)[1];
            }
            if ((/version_updates(?:[\t\n\r\s\D]*?)=(-?\d*)/g).exec(info) != null) {
                Softwareinfo.version_updates = (/version_updates(?:[\t\n\r\s\D]*?)=(-?\d*)/g).exec(info)[1];
            }
            dialog.push({
                info,
                Softwareinfo
            });
        }
    }
    return dialog;
}
function createPara(d, i) {
    const singleDialog = document.createElement("div");
    singleDialog.style.position = "relative";
    curdialog = singleDialog;
    singleDialog.style.display = "flex";
    singleDialog.style.flexDirection = "column";
    singleDialog.style.width = "773px";
    dialogbody.appendChild(singleDialog);
    var paralen;
    if (d.type && d.character) {
        updateCompanyWorking(d.character);
        var renderedHtml = md.render(d.character);
        const character = document.createElement("div");
        character.style.display = "flex";
        character.style.backgroundColor = "lightblue";
        character.style.width = "fit-content";
        character.style.padding = "5px 20px";
        character.style.marginBottom = "5px";
        character.style.fontSize = "13px ";
        character.style.border = "1px solid rgba(11, 20, 150, .3)";
        character.style.borderRadius = "10px";
        character.style.boxShadow = "2px 2px 2px black";
        character.style.fontFamily = "'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;";
        if (d.type == "user") {
            character.style.position = "relative";
            character.style.marginLeft = "auto";
        }
        character.innerHTML = renderedHtml;
        singleDialog.appendChild(character);
        const characterimg = document.createElement("img");
        console.log(d.character);
        if (d.character == "Programmer") {
            characterimg.src = "figures/programmer.png";
        } else if (d.character == "Code Reviewer") {
            characterimg.src = "figures/reviewer.png";
        } else if (d.character == "Chief Human Resource Officer") {
            characterimg.src = "figures/hr.png";
        } else if (d.character == "Chief Executive Officer") {
            characterimg.src = "figures/ceo.png";
        } else if (d.character == "Chief Product Officer") {
            characterimg.src = "figures/cpo.png";
        } else if (d.character == "Chief Technology Officer") {
            characterimg.src = "figures/cto.png";
        } else if (d.character == "Chief Creative Officer") {
            characterimg.src = "figures/designer.png";
        } else if (d.character == "Software Test Engineer") {
            characterimg.src = "figures/tester.png";
        } else if (d.character == "User") {
            characterimg.src = "figures/user.png";
        } else if (d.character == "Counselor") {
            characterimg.src = "figures/counselor.png";
        } else if (d.character == "Prompt Engineer") {
            characterimg.src = "figures/pe.png";
        }
        characterimg.style.height = "40px";
        characterimg.style.width = "30px";
        characterimg.style.position = "relative";
        characterimg.style.marginLeft = "10px";
        character.appendChild(characterimg);
        character.style.width = "fit-content";
        var renderedHtml = md.render(d.command);
        const paragraph = document.createElement("div");
        paragraph.className = "markdown-body";
        paragraph.style.padding = "10px";
        paragraph.style.border = "3px solid #a08D8D";
        paragraph.style.width = "750px";
        paragraph.style.border = "1px solid rgba(11, 20, 150, .3)";
        paragraph.style.borderRadius = "10px";
        paragraph.style.boxShadow = "2px 2px 2px black";
        singleDialog.appendChild(paragraph);
        const emptyparagraph = document.createElement("div");
        emptyparagraph.style.height = "10px";
        singleDialog.appendChild(emptyparagraph);
        if (d.type == "user") {
            paragraph.style.backgroundColor = "#4b751a";
        } else {
            paragraph.style.backgroundColor = "#133153";
        }
        cur_command = d.command;
        cur_para = paragraph;
        idx = i;
        return Promise.resolve(printCommand(paragraph, d.command));
    } else if (d.start) {
        paralen = 0;
        var renderedHtml = md.render("----------" + d.start + "----------");
        const starttext = document.createElement("div");
        starttext.innerHTML = renderedHtml;
        singleDialog.appendChild(starttext);
    } else if (d.end) {
        paralen = 0;
        updateCompanyWorking("end");
        var renderedHtml = md.render("----------" + d.end + "----------");
        const endtext = document.createElement("div");
        endtext.innerHTML = renderedHtml;
        singleDialog.appendChild(endtext);
        var filelable = document.getElementById("successupload");
        filelable.style.display = "block";
        var info = "Replayed";
        filelable.innerHTML = md.render(info);
    } else if (d.task) {
        var renderedHtml = md.render("Task:    " + d.task);
        const tasktext = document.getElementById("Requesttext");
        tasktext.innerHTML = renderedHtml;
    } else if (d.info) {
        var renderedHtml = md.render(d.info);
        const infotext = document.getElementById("dialogStatistic");
        var temp_label = "";
        for (var c in Softwareinfo) {
            temp_label = document.getElementById(c);
            if (Softwareinfo[c] != "-1" && Softwareinfo[c] != "-1s") {
                temp_label.innerHTML = Softwareinfo[c];
            }
        }
    }
}
function updateCompanyWorking(character) {
    if (character == "end") {
        var img1 = document.getElementById("right");
        img1.style.display = "none";
        var img2 = document.getElementById("left");
        img2.style.display = "none";
        return;
    }
    var imgid = coordSet[character].imgid;
    var left_bias = coordSet[character].left;
    var top_bias = coordSet[character].top;
    var img = document.getElementById(imgid);
    img.style.display = "block";
    img.style.left = left_bias;
    img.style.top = top_bias;
    if (imgid == "left") {
        var another_img = document.getElementById("right");
        another_img.style.display = "none";
    } else {
        var another_img = document.getElementById("left");
        another_img.style.display = "none";
    }
}
async function updateParashow(container, command, index, len) {
    var cur_content;
    if (index == len - 1) {
        cur_content = command.slice(0, index);
    }
    if (index < len) {
        cur_content = command.slice(0, index);
        if (cur_content != null && cur_content != undefined) {
            container.innerHTML = md.render(cur_content);
        };
    }
    if (index % (scrollinterval) == 0 && if_move == true) {
        if (curdialog != null && curdialog != '') {
            const newBoxRect = curdialog.getBoundingClientRect();
            total_height += newBoxRect.height;
            dialogbody.scrollTo({ top: total_height, behavior: 'smooth' });
        }
    }
}
async function printCommand(paragraph, command) {
    var paralen = command.length;
    const tasks = [];
    for (let j = 0; j < paralen; j = j + charinterval) {
        tasks.push(new Promise(resolve => {
            pauseIntervalId = setTimeout(() => {
                updateParashow(paragraph, command, j, paralen);
                resolve();
            }, timeinterval * j);
        }));
        if (isPaused) {
            await Promise.all(tasks);
        }
    }
    await Promise.all(tasks);
    return 1;
}

/home/brandon/Projects/ChatDev/visualizer/static/replay/js/highlight.js

var hljs = (function () {
    'use strict';
    var deepFreezeEs6 = {exports: {}};
    function deepFreeze(obj) {
        if (obj instanceof Map) {
            obj.clear = obj.delete = obj.set = function () {
                throw new Error('map is read-only');
            };
        } else if (obj instanceof Set) {
            obj.add = obj.clear = obj.delete = function () {
                throw new Error('set is read-only');
            };
        }
        Object.freeze(obj);
        Object.getOwnPropertyNames(obj).forEach(function (name) {
            var prop = obj[name];
            if (typeof prop == 'object' && !Object.isFrozen(prop)) {
                deepFreeze(prop);
            }
        });
        return obj;
    }
    deepFreezeEs6.exports = deepFreeze;
    deepFreezeEs6.exports.default = deepFreeze;
    class Response {
      constructor(mode) {
        if (mode.data === undefined) mode.data = {};
        this.data = mode.data;
        this.isMatchIgnored = false;
      }
      ignoreMatch() {
        this.isMatchIgnored = true;
      }
    }
    function escapeHTML(value) {
      return value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
    }
    function inherit$1(original, ...objects) {
      const result = Object.create(null);
      for (const key in original) {
        result[key] = original[key];
      }
      objects.forEach(function(obj) {
        for (const key in obj) {
          result[key] = obj[key];
        }
      });
      return  (result);
    }
    const SPAN_CLOSE = '</span>';
    const emitsWrappingTags = (node) => {
      return !!node.scope || (node.sublanguage && node.language);
    };
    const scopeToCSSClass = (name, { prefix }) => {
      if (name.includes(".")) {
        const pieces = name.split(".");
        return [
          `${prefix}${pieces.shift()}`,
          ...(pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`))
        ].join(" ");
      }
      return `${prefix}${name}`;
    };
    class HTMLRenderer {
      constructor(parseTree, options) {
        this.buffer = "";
        this.classPrefix = options.classPrefix;
        parseTree.walk(this);
      }
      addText(text) {
        this.buffer += escapeHTML(text);
      }
      openNode(node) {
        if (!emitsWrappingTags(node)) return;
        let className = "";
        if (node.sublanguage) {
          className = `language-${node.language}`;
        } else {
          className = scopeToCSSClass(node.scope, { prefix: this.classPrefix });
        }
        this.span(className);
      }
      closeNode(node) {
        if (!emitsWrappingTags(node)) return;
        this.buffer += SPAN_CLOSE;
      }
      value() {
        return this.buffer;
      }
      span(className) {
        this.buffer += `<span class="${className}">`;
      }
    }
    const newNode = (opts = {}) => {
      const result = { children: [] };
      Object.assign(result, opts);
      return result;
    };
    class TokenTree {
      constructor() {
        this.rootNode = newNode();
        this.stack = [this.rootNode];
      }
      get top() {
        return this.stack[this.stack.length - 1];
      }
      get root() { return this.rootNode; }
      add(node) {
        this.top.children.push(node);
      }
      openNode(scope) {
        const node = newNode({ scope });
        this.add(node);
        this.stack.push(node);
      }
      closeNode() {
        if (this.stack.length > 1) {
          return this.stack.pop();
        }
        return undefined;
      }
      closeAllNodes() {
        while (this.closeNode());
      }
      toJSON() {
        return JSON.stringify(this.rootNode, null, 4);
      }
      walk(builder) {
        return this.constructor._walk(builder, this.rootNode);
      }
      static _walk(builder, node) {
        if (typeof node === "string") {
          builder.addText(node);
        } else if (node.children) {
          builder.openNode(node);
          node.children.forEach((child) => this._walk(builder, child));
          builder.closeNode(node);
        }
        return builder;
      }
      static _collapse(node) {
        if (typeof node === "string") return;
        if (!node.children) return;
        if (node.children.every(el => typeof el === "string")) {
          node.children = [node.children.join("")];
        } else {
          node.children.forEach((child) => {
            TokenTree._collapse(child);
          });
        }
      }
    }
    class TokenTreeEmitter extends TokenTree {
      constructor(options) {
        super();
        this.options = options;
      }
      addKeyword(text, scope) {
        if (text === "") { return; }
        this.openNode(scope);
        this.addText(text);
        this.closeNode();
      }
      addText(text) {
        if (text === "") { return; }
        this.add(text);
      }
      addSublanguage(emitter, name) {
        const node = emitter.root;
        node.sublanguage = true;
        node.language = name;
        this.add(node);
      }
      toHTML() {
        const renderer = new HTMLRenderer(this, this.options);
        return renderer.value();
      }
      finalize() {
        return true;
      }
    }
    function source(re) {
      if (!re) return null;
      if (typeof re === "string") return re;
      return re.source;
    }
    function lookahead(re) {
      return concat('(?=', re, ')');
    }
    function anyNumberOfTimes(re) {
      return concat('(?:', re, ')*');
    }
    function optional(re) {
      return concat('(?:', re, ')?');
    }
    function concat(...args) {
      const joined = args.map((x) => source(x)).join("");
      return joined;
    }
    function stripOptionsFromArgs(args) {
      const opts = args[args.length - 1];
      if (typeof opts === 'object' && opts.constructor === Object) {
        args.splice(args.length - 1, 1);
        return opts;
      } else {
        return {};
      }
    }
    function either(...args) {
      const opts = stripOptionsFromArgs(args);
      const joined = '('
        + (opts.capture ? "" : "?:")
        + args.map((x) => source(x)).join("|") + ")";
      return joined;
    }
    function countMatchGroups(re) {
      return (new RegExp(re.toString() + '|')).exec('').length - 1;
    }
    function startsWith(re, lexeme) {
      const match = re && re.exec(lexeme);
      return match && match.index === 0;
    }
    const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
    function _rewriteBackreferences(regexps, { joinWith }) {
      let numCaptures = 0;
      return regexps.map((regex) => {
        numCaptures += 1;
        const offset = numCaptures;
        let re = source(regex);
        let out = '';
        while (re.length > 0) {
          const match = BACKREF_RE.exec(re);
          if (!match) {
            out += re;
            break;
          }
          out += re.substring(0, match.index);
          re = re.substring(match.index + match[0].length);
          if (match[0][0] === '\\' && match[1]) {
            out += '\\' + String(Number(match[1]) + offset);
          } else {
            out += match[0];
            if (match[0] === '(') {
              numCaptures++;
            }
          }
        }
        return out;
      }).map(re => `(${re})`).join(joinWith);
    }
    const MATCH_NOTHING_RE = /\b\B/;
    const IDENT_RE = '[a-zA-Z]\\w*';
    const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
    const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
    const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)';     const BINARY_NUMBER_RE = '\\b(0b[01]+)';     const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
    const SHEBANG = (opts = {}) => {
      const beginShebang = /^#![ ]*\      if (opts.binary) {
        opts.begin = concat(
          beginShebang,
          /.*\b/,
          opts.binary,
          /\b.*/);
      }
      return inherit$1({
        scope: 'meta',
        begin: beginShebang,
        end: /$/,
        relevance: 0,
        "on:begin": (m, resp) => {
          if (m.index !== 0) resp.ignoreMatch();
        }
      }, opts);
    };
    const BACKSLASH_ESCAPE = {
      begin: '\\\\[\\s\\S]', relevance: 0
    };
    const APOS_STRING_MODE = {
      scope: 'string',
      begin: '\'',
      end: '\'',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const QUOTE_STRING_MODE = {
      scope: 'string',
      begin: '"',
      end: '"',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const PHRASAL_WORDS_MODE = {
      begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
    };
    const COMMENT = function(begin, end, modeOptions = {}) {
      const mode = inherit$1(
        {
          scope: 'comment',
          begin,
          end,
          contains: []
        },
        modeOptions
      );
      mode.contains.push({
        scope: 'doctag',
        begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
        excludeBegin: true,
        relevance: 0
      });
      const ENGLISH_WORD = either(
        "I",
        "a",
        "is",
        "so",
        "us",
        "to",
        "at",
        "if",
        "in",
        "it",
        "on",
        /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc
        /[A-Za-z]+[-][a-z]+/,         /[A-Za-z][a-z]{2,}/       );
      mode.contains.push(
        {
          begin: concat(
            /[ ]+/,             '(',
            ENGLISH_WORD,
            /[.]?[:]?([.][ ]|[ ])/,
            '){3}')         }
      );
      return mode;
    };
    const C_LINE_COMMENT_MODE = COMMENT('//', '$');
    const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
    const HASH_COMMENT_MODE = COMMENT('#', '$');
    const NUMBER_MODE = {
      scope: 'number',
      begin: NUMBER_RE,
      relevance: 0
    };
    const C_NUMBER_MODE = {
      scope: 'number',
      begin: C_NUMBER_RE,
      relevance: 0
    };
    const BINARY_NUMBER_MODE = {
      scope: 'number',
      begin: BINARY_NUMBER_RE,
      relevance: 0
    };
    const REGEXP_MODE = {
      begin: /(?=\/[^/\n]*\/)/,
      contains: [{
        scope: 'regexp',
        begin: /\        end: /\/[gimuy]*/,
        illegal: /\n/,
        contains: [
          BACKSLASH_ESCAPE,
          {
            begin: /\[/,
            end: /\]/,
            relevance: 0,
            contains: [BACKSLASH_ESCAPE]
          }
        ]
      }]
    };
    const TITLE_MODE = {
      scope: 'title',
      begin: IDENT_RE,
      relevance: 0
    };
    const UNDERSCORE_TITLE_MODE = {
      scope: 'title',
      begin: UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const METHOD_GUARD = {
      begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const END_SAME_AS_BEGIN = function(mode) {
      return Object.assign(mode,
        {
          'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
          'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
        });
    };
    var MODES = Object.freeze({
        __proto__: null,
        MATCH_NOTHING_RE: MATCH_NOTHING_RE,
        IDENT_RE: IDENT_RE,
        UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
        NUMBER_RE: NUMBER_RE,
        C_NUMBER_RE: C_NUMBER_RE,
        BINARY_NUMBER_RE: BINARY_NUMBER_RE,
        RE_STARTERS_RE: RE_STARTERS_RE,
        SHEBANG: SHEBANG,
        BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
        APOS_STRING_MODE: APOS_STRING_MODE,
        QUOTE_STRING_MODE: QUOTE_STRING_MODE,
        PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
        COMMENT: COMMENT,
        C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
        C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
        HASH_COMMENT_MODE: HASH_COMMENT_MODE,
        NUMBER_MODE: NUMBER_MODE,
        C_NUMBER_MODE: C_NUMBER_MODE,
        BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
        REGEXP_MODE: REGEXP_MODE,
        TITLE_MODE: TITLE_MODE,
        UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
        METHOD_GUARD: METHOD_GUARD,
        END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
    });
    function skipIfHasPrecedingDot(match, response) {
      const before = match.input[match.index - 1];
      if (before === ".") {
        response.ignoreMatch();
      }
    }
    function scopeClassName(mode, _parent) {
      if (mode.className !== undefined) {
        mode.scope = mode.className;
        delete mode.className;
      }
    }
    function beginKeywords(mode, parent) {
      if (!parent) return;
      if (!mode.beginKeywords) return;
      mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
      mode.__beforeBegin = skipIfHasPrecedingDot;
      mode.keywords = mode.keywords || mode.beginKeywords;
      delete mode.beginKeywords;
      if (mode.relevance === undefined) mode.relevance = 0;
    }
    function compileIllegal(mode, _parent) {
      if (!Array.isArray(mode.illegal)) return;
      mode.illegal = either(...mode.illegal);
    }
    function compileMatch(mode, _parent) {
      if (!mode.match) return;
      if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");
      mode.begin = mode.match;
      delete mode.match;
    }
    function compileRelevance(mode, _parent) {
      if (mode.relevance === undefined) mode.relevance = 1;
    }
    const beforeMatchExt = (mode, parent) => {
      if (!mode.beforeMatch) return;
      if (mode.starts) throw new Error("beforeMatch cannot be used with starts");
      const originalMode = Object.assign({}, mode);
      Object.keys(mode).forEach((key) => { delete mode[key]; });
      mode.keywords = originalMode.keywords;
      mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
      mode.starts = {
        relevance: 0,
        contains: [
          Object.assign(originalMode, { endsParent: true })
        ]
      };
      mode.relevance = 0;
      delete originalMode.beforeMatch;
    };
    const COMMON_KEYWORDS = [
      'of',
      'and',
      'for',
      'in',
      'not',
      'or',
      'if',
      'then',
      'parent',       'list',       'value'     ];
    const DEFAULT_KEYWORD_SCOPE = "keyword";
    function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
      const compiledKeywords = Object.create(null);
      if (typeof rawKeywords === 'string') {
        compileList(scopeName, rawKeywords.split(" "));
      } else if (Array.isArray(rawKeywords)) {
        compileList(scopeName, rawKeywords);
      } else {
        Object.keys(rawKeywords).forEach(function(scopeName) {
          Object.assign(
            compiledKeywords,
            compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)
          );
        });
      }
      return compiledKeywords;
      function compileList(scopeName, keywordList) {
        if (caseInsensitive) {
          keywordList = keywordList.map(x => x.toLowerCase());
        }
        keywordList.forEach(function(keyword) {
          const pair = keyword.split('|');
          compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];
        });
      }
    }
    function scoreForKeyword(keyword, providedScore) {
      if (providedScore) {
        return Number(providedScore);
      }
      return commonKeyword(keyword) ? 0 : 1;
    }
    function commonKeyword(keyword) {
      return COMMON_KEYWORDS.includes(keyword.toLowerCase());
    }
    const seenDeprecations = {};
    const error = (message) => {
      console.error(message);
    };
    const warn = (message, ...args) => {
      console.log(`WARN: ${message}`, ...args);
    };
    const deprecated = (version, message) => {
      if (seenDeprecations[`${version}/${message}`]) return;
      console.log(`Deprecated as of ${version}. ${message}`);
      seenDeprecations[`${version}/${message}`] = true;
    };
    const MultiClassError = new Error();
    function remapScopeNames(mode, regexes, { key }) {
      let offset = 0;
      const scopeNames = mode[key];
      const emit = {};
      const positions = {};
      for (let i = 1; i <= regexes.length; i++) {
        positions[i + offset] = scopeNames[i];
        emit[i + offset] = true;
        offset += countMatchGroups(regexes[i - 1]);
      }
      mode[key] = positions;
      mode[key]._emit = emit;
      mode[key]._multi = true;
    }
    function beginMultiClass(mode) {
      if (!Array.isArray(mode.begin)) return;
      if (mode.skip || mode.excludeBegin || mode.returnBegin) {
        error("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
        throw MultiClassError;
      }
      if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
        error("beginScope must be object");
        throw MultiClassError;
      }
      remapScopeNames(mode, mode.begin, { key: "beginScope" });
      mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
    }
    function endMultiClass(mode) {
      if (!Array.isArray(mode.end)) return;
      if (mode.skip || mode.excludeEnd || mode.returnEnd) {
        error("skip, excludeEnd, returnEnd not compatible with endScope: {}");
        throw MultiClassError;
      }
      if (typeof mode.endScope !== "object" || mode.endScope === null) {
        error("endScope must be object");
        throw MultiClassError;
      }
      remapScopeNames(mode, mode.end, { key: "endScope" });
      mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
    }
    function scopeSugar(mode) {
      if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
        mode.beginScope = mode.scope;
        delete mode.scope;
      }
    }
    function MultiClass(mode) {
      scopeSugar(mode);
      if (typeof mode.beginScope === "string") {
        mode.beginScope = { _wrap: mode.beginScope };
      }
      if (typeof mode.endScope === "string") {
        mode.endScope = { _wrap: mode.endScope };
      }
      beginMultiClass(mode);
      endMultiClass(mode);
    }
    function compileLanguage(language) {
      function langRe(value, global) {
        return new RegExp(
          source(value),
          'm'
          + (language.case_insensitive ? 'i' : '')
          + (language.unicodeRegex ? 'u' : '')
          + (global ? 'g' : '')
        );
      }
      class MultiRegex {
        constructor() {
          this.matchIndexes = {};
          this.regexes = [];
          this.matchAt = 1;
          this.position = 0;
        }
        addRule(re, opts) {
          opts.position = this.position++;
          this.matchIndexes[this.matchAt] = opts;
          this.regexes.push([opts, re]);
          this.matchAt += countMatchGroups(re) + 1;
        }
        compile() {
          if (this.regexes.length === 0) {
            this.exec = () => null;
          }
          const terminators = this.regexes.map(el => el[1]);
          this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);
          this.lastIndex = 0;
        }
        exec(s) {
          this.matcherRe.lastIndex = this.lastIndex;
          const match = this.matcherRe.exec(s);
          if (!match) { return null; }
          const i = match.findIndex((el, i) => i > 0 && el !== undefined);
          const matchData = this.matchIndexes[i];
          match.splice(0, i);
          return Object.assign(match, matchData);
        }
      }
      class ResumableMultiRegex {
        constructor() {
          this.rules = [];
          this.multiRegexes = [];
          this.count = 0;
          this.lastIndex = 0;
          this.regexIndex = 0;
        }
        getMatcher(index) {
          if (this.multiRegexes[index]) return this.multiRegexes[index];
          const matcher = new MultiRegex();
          this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
          matcher.compile();
          this.multiRegexes[index] = matcher;
          return matcher;
        }
        resumingScanAtSamePosition() {
          return this.regexIndex !== 0;
        }
        considerAll() {
          this.regexIndex = 0;
        }
        addRule(re, opts) {
          this.rules.push([re, opts]);
          if (opts.type === "begin") this.count++;
        }
        exec(s) {
          const m = this.getMatcher(this.regexIndex);
          m.lastIndex = this.lastIndex;
          let result = m.exec(s);
          if (this.resumingScanAtSamePosition()) {
            if (result && result.index === this.lastIndex) ; else {               const m2 = this.getMatcher(0);
              m2.lastIndex = this.lastIndex + 1;
              result = m2.exec(s);
            }
          }
          if (result) {
            this.regexIndex += result.position + 1;
            if (this.regexIndex === this.count) {
              this.considerAll();
            }
          }
          return result;
        }
      }
      function buildModeRegex(mode) {
        const mm = new ResumableMultiRegex();
        mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));
        if (mode.terminatorEnd) {
          mm.addRule(mode.terminatorEnd, { type: "end" });
        }
        if (mode.illegal) {
          mm.addRule(mode.illegal, { type: "illegal" });
        }
        return mm;
      }
      function compileMode(mode, parent) {
        const cmode =  (mode);
        if (mode.isCompiled) return cmode;
        [
          scopeClassName,
          compileMatch,
          MultiClass,
          beforeMatchExt
        ].forEach(ext => ext(mode, parent));
        language.compilerExtensions.forEach(ext => ext(mode, parent));
        mode.__beforeBegin = null;
        [
          beginKeywords,
          compileIllegal,
          compileRelevance
        ].forEach(ext => ext(mode, parent));
        mode.isCompiled = true;
        let keywordPattern = null;
        if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
          mode.keywords = Object.assign({}, mode.keywords);
          keywordPattern = mode.keywords.$pattern;
          delete mode.keywords.$pattern;
        }
        keywordPattern = keywordPattern || /\w+/;
        if (mode.keywords) {
          mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
        }
        cmode.keywordPatternRe = langRe(keywordPattern, true);
        if (parent) {
          if (!mode.begin) mode.begin = /\B|\b/;
          cmode.beginRe = langRe(cmode.begin);
          if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
          if (mode.end) cmode.endRe = langRe(cmode.end);
          cmode.terminatorEnd = source(cmode.end) || '';
          if (mode.endsWithParent && parent.terminatorEnd) {
            cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
          }
        }
        if (mode.illegal) cmode.illegalRe = langRe( (mode.illegal));
        if (!mode.contains) mode.contains = [];
        mode.contains = [].concat(...mode.contains.map(function(c) {
          return expandOrCloneMode(c === 'self' ? mode : c);
        }));
        mode.contains.forEach(function(c) { compileMode( (c), cmode); });
        if (mode.starts) {
          compileMode(mode.starts, parent);
        }
        cmode.matcher = buildModeRegex(cmode);
        return cmode;
      }
      if (!language.compilerExtensions) language.compilerExtensions = [];
      if (language.contains && language.contains.includes('self')) {
        throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
      }
      language.classNameAliases = inherit$1(language.classNameAliases || {});
      return compileMode( (language));
    }
    function dependencyOnParent(mode) {
      if (!mode) return false;
      return mode.endsWithParent || dependencyOnParent(mode.starts);
    }
    function expandOrCloneMode(mode) {
      if (mode.variants && !mode.cachedVariants) {
        mode.cachedVariants = mode.variants.map(function(variant) {
          return inherit$1(mode, { variants: null }, variant);
        });
      }
      if (mode.cachedVariants) {
        return mode.cachedVariants;
      }
      if (dependencyOnParent(mode)) {
        return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
      }
      if (Object.isFrozen(mode)) {
        return inherit$1(mode);
      }
      return mode;
    }
    var version = "11.7.0";
    class HTMLInjectionError extends Error {
      constructor(reason, html) {
        super(reason);
        this.name = "HTMLInjectionError";
        this.html = html;
      }
    }
    const escape = escapeHTML;
    const inherit = inherit$1;
    const NO_MATCH = Symbol("nomatch");
    const MAX_KEYWORD_HITS = 7;
    const HLJS = function(hljs) {
      const languages = Object.create(null);
      const aliases = Object.create(null);
      const plugins = [];
      let SAFE_MODE = true;
      const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
      const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };
      let options = {
        ignoreUnescapedHTML: false,
        throwUnescapedHTML: false,
        noHighlightRe: /^(no-?highlight)$/i,
        languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
        classPrefix: 'hljs-',
        cssSelector: 'pre code',
        languages: null,
        __emitter: TokenTreeEmitter
      };
      function shouldNotHighlight(languageName) {
        return options.noHighlightRe.test(languageName);
      }
      function blockLanguage(block) {
        let classes = block.className + ' ';
        classes += block.parentNode ? block.parentNode.className : '';
        const match = options.languageDetectRe.exec(classes);
        if (match) {
          const language = getLanguage(match[1]);
          if (!language) {
            warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
            warn("Falling back to no-highlight mode for this block.", block);
          }
          return language ? match[1] : 'no-highlight';
        }
        return classes
          .split(/\s+/)
          .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
      }
      function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
        let code = "";
        let languageName = "";
        if (typeof optionsOrCode === "object") {
          code = codeOrLanguageName;
          ignoreIllegals = optionsOrCode.ignoreIllegals;
          languageName = optionsOrCode.language;
        } else {
          deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
          deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
          languageName = codeOrLanguageName;
          code = optionsOrCode;
        }
        if (ignoreIllegals === undefined) { ignoreIllegals = true; }
        const context = {
          code,
          language: languageName
        };
        fire("before:highlight", context);
        const result = context.result
          ? context.result
          : _highlight(context.language, context.code, ignoreIllegals);
        result.code = context.code;
        fire("after:highlight", result);
        return result;
      }
      function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
        const keywordHits = Object.create(null);
        function keywordData(mode, matchText) {
          return mode.keywords[matchText];
        }
        function processKeywords() {
          if (!top.keywords) {
            emitter.addText(modeBuffer);
            return;
          }
          let lastIndex = 0;
          top.keywordPatternRe.lastIndex = 0;
          let match = top.keywordPatternRe.exec(modeBuffer);
          let buf = "";
          while (match) {
            buf += modeBuffer.substring(lastIndex, match.index);
            const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
            const data = keywordData(top, word);
            if (data) {
              const [kind, keywordRelevance] = data;
              emitter.addText(buf);
              buf = "";
              keywordHits[word] = (keywordHits[word] || 0) + 1;
              if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;
              if (kind.startsWith("_")) {
                buf += match[0];
              } else {
                const cssClass = language.classNameAliases[kind] || kind;
                emitter.addKeyword(match[0], cssClass);
              }
            } else {
              buf += match[0];
            }
            lastIndex = top.keywordPatternRe.lastIndex;
            match = top.keywordPatternRe.exec(modeBuffer);
          }
          buf += modeBuffer.substring(lastIndex);
          emitter.addText(buf);
        }
        function processSubLanguage() {
          if (modeBuffer === "") return;
          let result = null;
          if (typeof top.subLanguage === 'string') {
            if (!languages[top.subLanguage]) {
              emitter.addText(modeBuffer);
              return;
            }
            result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
            continuations[top.subLanguage] =  (result._top);
          } else {
            result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
          }
          if (top.relevance > 0) {
            relevance += result.relevance;
          }
          emitter.addSublanguage(result._emitter, result.language);
        }
        function processBuffer() {
          if (top.subLanguage != null) {
            processSubLanguage();
          } else {
            processKeywords();
          }
          modeBuffer = '';
        }
        function emitMultiClass(scope, match) {
          let i = 1;
          const max = match.length - 1;
          while (i <= max) {
            if (!scope._emit[i]) { i++; continue; }
            const klass = language.classNameAliases[scope[i]] || scope[i];
            const text = match[i];
            if (klass) {
              emitter.addKeyword(text, klass);
            } else {
              modeBuffer = text;
              processKeywords();
              modeBuffer = "";
            }
            i++;
          }
        }
        function startNewMode(mode, match) {
          if (mode.scope && typeof mode.scope === "string") {
            emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
          }
          if (mode.beginScope) {
            if (mode.beginScope._wrap) {
              emitter.addKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
              modeBuffer = "";
            } else if (mode.beginScope._multi) {
              emitMultiClass(mode.beginScope, match);
              modeBuffer = "";
            }
          }
          top = Object.create(mode, { parent: { value: top } });
          return top;
        }
        function endOfMode(mode, match, matchPlusRemainder) {
          let matched = startsWith(mode.endRe, matchPlusRemainder);
          if (matched) {
            if (mode["on:end"]) {
              const resp = new Response(mode);
              mode["on:end"](match, resp);
              if (resp.isMatchIgnored) matched = false;
            }
            if (matched) {
              while (mode.endsParent && mode.parent) {
                mode = mode.parent;
              }
              return mode;
            }
          }
          if (mode.endsWithParent) {
            return endOfMode(mode.parent, match, matchPlusRemainder);
          }
        }
        function doIgnore(lexeme) {
          if (top.matcher.regexIndex === 0) {
            modeBuffer += lexeme[0];
            return 1;
          } else {
            resumeScanAtSamePosition = true;
            return 0;
          }
        }
        function doBeginMatch(match) {
          const lexeme = match[0];
          const newMode = match.rule;
          const resp = new Response(newMode);
          const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
          for (const cb of beforeCallbacks) {
            if (!cb) continue;
            cb(match, resp);
            if (resp.isMatchIgnored) return doIgnore(lexeme);
          }
          if (newMode.skip) {
            modeBuffer += lexeme;
          } else {
            if (newMode.excludeBegin) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (!newMode.returnBegin && !newMode.excludeBegin) {
              modeBuffer = lexeme;
            }
          }
          startNewMode(newMode, match);
          return newMode.returnBegin ? 0 : lexeme.length;
        }
        function doEndMatch(match) {
          const lexeme = match[0];
          const matchPlusRemainder = codeToHighlight.substring(match.index);
          const endMode = endOfMode(top, match, matchPlusRemainder);
          if (!endMode) { return NO_MATCH; }
          const origin = top;
          if (top.endScope && top.endScope._wrap) {
            processBuffer();
            emitter.addKeyword(lexeme, top.endScope._wrap);
          } else if (top.endScope && top.endScope._multi) {
            processBuffer();
            emitMultiClass(top.endScope, match);
          } else if (origin.skip) {
            modeBuffer += lexeme;
          } else {
            if (!(origin.returnEnd || origin.excludeEnd)) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (origin.excludeEnd) {
              modeBuffer = lexeme;
            }
          }
          do {
            if (top.scope) {
              emitter.closeNode();
            }
            if (!top.skip && !top.subLanguage) {
              relevance += top.relevance;
            }
            top = top.parent;
          } while (top !== endMode.parent);
          if (endMode.starts) {
            startNewMode(endMode.starts, match);
          }
          return origin.returnEnd ? 0 : lexeme.length;
        }
        function processContinuations() {
          const list = [];
          for (let current = top; current !== language; current = current.parent) {
            if (current.scope) {
              list.unshift(current.scope);
            }
          }
          list.forEach(item => emitter.openNode(item));
        }
        let lastMatch = {};
        function processLexeme(textBeforeMatch, match) {
          const lexeme = match && match[0];
          modeBuffer += textBeforeMatch;
          if (lexeme == null) {
            processBuffer();
            return 0;
          }
          if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
            modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
            if (!SAFE_MODE) {
              const err = new Error(`0 width match regex (${languageName})`);
              err.languageName = languageName;
              err.badRule = lastMatch.rule;
              throw err;
            }
            return 1;
          }
          lastMatch = match;
          if (match.type === "begin") {
            return doBeginMatch(match);
          } else if (match.type === "illegal" && !ignoreIllegals) {
            const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || '<unnamed>') + '"');
            err.mode = top;
            throw err;
          } else if (match.type === "end") {
            const processed = doEndMatch(match);
            if (processed !== NO_MATCH) {
              return processed;
            }
          }
          if (match.type === "illegal" && lexeme === "") {
            return 1;
          }
          if (iterations > 100000 && iterations > match.index * 3) {
            const err = new Error('potential infinite loop, way more iterations than matches');
            throw err;
          }
          modeBuffer += lexeme;
          return lexeme.length;
        }
        const language = getLanguage(languageName);
        if (!language) {
          error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
          throw new Error('Unknown language: "' + languageName + '"');
        }
        const md = compileLanguage(language);
        let result = '';
        let top = continuation || md;
        const continuations = {};         const emitter = new options.__emitter(options);
        processContinuations();
        let modeBuffer = '';
        let relevance = 0;
        let index = 0;
        let iterations = 0;
        let resumeScanAtSamePosition = false;
        try {
          top.matcher.considerAll();
          for (;;) {
            iterations++;
            if (resumeScanAtSamePosition) {
              resumeScanAtSamePosition = false;
            } else {
              top.matcher.considerAll();
            }
            top.matcher.lastIndex = index;
            const match = top.matcher.exec(codeToHighlight);
            if (!match) break;
            const beforeMatch = codeToHighlight.substring(index, match.index);
            const processedCount = processLexeme(beforeMatch, match);
            index = match.index + processedCount;
          }
          processLexeme(codeToHighlight.substring(index));
          emitter.closeAllNodes();
          emitter.finalize();
          result = emitter.toHTML();
          return {
            language: languageName,
            value: result,
            relevance: relevance,
            illegal: false,
            _emitter: emitter,
            _top: top
          };
        } catch (err) {
          if (err.message && err.message.includes('Illegal')) {
            return {
              language: languageName,
              value: escape(codeToHighlight),
              illegal: true,
              relevance: 0,
              _illegalBy: {
                message: err.message,
                index: index,
                context: codeToHighlight.slice(index - 100, index + 100),
                mode: err.mode,
                resultSoFar: result
              },
              _emitter: emitter
            };
          } else if (SAFE_MODE) {
            return {
              language: languageName,
              value: escape(codeToHighlight),
              illegal: false,
              relevance: 0,
              errorRaised: err,
              _emitter: emitter,
              _top: top
            };
          } else {
            throw err;
          }
        }
      }
      function justTextHighlightResult(code) {
        const result = {
          value: escape(code),
          illegal: false,
          relevance: 0,
          _top: PLAINTEXT_LANGUAGE,
          _emitter: new options.__emitter(options)
        };
        result._emitter.addText(code);
        return result;
      }
      function highlightAuto(code, languageSubset) {
        languageSubset = languageSubset || options.languages || Object.keys(languages);
        const plaintext = justTextHighlightResult(code);
        const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
          _highlight(name, code, false)
        );
        results.unshift(plaintext);         const sorted = results.sort((a, b) => {
          if (a.relevance !== b.relevance) return b.relevance - a.relevance;
          if (a.language && b.language) {
            if (getLanguage(a.language).supersetOf === b.language) {
              return 1;
            } else if (getLanguage(b.language).supersetOf === a.language) {
              return -1;
            }
          }
          return 0;
        });
        const [best, secondBest] = sorted;
        const result = best;
        result.secondBest = secondBest;
        return result;
      }
      function updateClassName(element, currentLang, resultLang) {
        const language = (currentLang && aliases[currentLang]) || resultLang;
        element.classList.add("hljs");
        element.classList.add(`language-${language}`);
      }
      function highlightElement(element) {
        let node = null;
        const language = blockLanguage(element);
        if (shouldNotHighlight(language)) return;
        fire("before:highlightElement",
          { el: element, language: language });
        if (element.children.length > 0) {
          if (!options.ignoreUnescapedHTML) {
            console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
            console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
            console.warn("The element with unescaped HTML:");
            console.warn(element);
          }
          if (options.throwUnescapedHTML) {
            const err = new HTMLInjectionError(
              "One of your code blocks includes unescaped HTML.",
              element.innerHTML
            );
            throw err;
          }
        }
        node = element;
        const text = node.textContent;
        const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);
        element.innerHTML = result.value;
        updateClassName(element, language, result.language);
        element.result = {
          language: result.language,
          re: result.relevance,
          relevance: result.relevance
        };
        if (result.secondBest) {
          element.secondBest = {
            language: result.secondBest.language,
            relevance: result.secondBest.relevance
          };
        }
        fire("after:highlightElement", { el: element, result, text });
      }
      function configure(userOptions) {
        options = inherit(options, userOptions);
      }
      const initHighlighting = () => {
        highlightAll();
        deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
      };
      function initHighlightingOnLoad() {
        highlightAll();
        deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
      }
      let wantsHighlight = false;
      function highlightAll() {
        if (document.readyState === "loading") {
          wantsHighlight = true;
          return;
        }
        const blocks = document.querySelectorAll(options.cssSelector);
        blocks.forEach(highlightElement);
      }
      function boot() {
        if (wantsHighlight) highlightAll();
      }
      if (typeof window !== 'undefined' && window.addEventListener) {
        window.addEventListener('DOMContentLoaded', boot, false);
      }
      function registerLanguage(languageName, languageDefinition) {
        let lang = null;
        try {
          lang = languageDefinition(hljs);
        } catch (error$1) {
          error("Language definition for '{}' could not be registered.".replace("{}", languageName));
          if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
          lang = PLAINTEXT_LANGUAGE;
        }
        if (!lang.name) lang.name = languageName;
        languages[languageName] = lang;
        lang.rawDefinition = languageDefinition.bind(null, hljs);
        if (lang.aliases) {
          registerAliases(lang.aliases, { languageName });
        }
      }
      function unregisterLanguage(languageName) {
        delete languages[languageName];
        for (const alias of Object.keys(aliases)) {
          if (aliases[alias] === languageName) {
            delete aliases[alias];
          }
        }
      }
      function listLanguages() {
        return Object.keys(languages);
      }
      function getLanguage(name) {
        name = (name || '').toLowerCase();
        return languages[name] || languages[aliases[name]];
      }
      function registerAliases(aliasList, { languageName }) {
        if (typeof aliasList === 'string') {
          aliasList = [aliasList];
        }
        aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
      }
      function autoDetection(name) {
        const lang = getLanguage(name);
        return lang && !lang.disableAutodetect;
      }
      function upgradePluginAPI(plugin) {
        if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
          plugin["before:highlightElement"] = (data) => {
            plugin["before:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
        if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
          plugin["after:highlightElement"] = (data) => {
            plugin["after:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
      }
      function addPlugin(plugin) {
        upgradePluginAPI(plugin);
        plugins.push(plugin);
      }
      function fire(event, args) {
        const cb = event;
        plugins.forEach(function(plugin) {
          if (plugin[cb]) {
            plugin[cb](args);
          }
        });
      }
      function deprecateHighlightBlock(el) {
        deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
        deprecated("10.7.0", "Please use highlightElement now.");
        return highlightElement(el);
      }
      Object.assign(hljs, {
        highlight,
        highlightAuto,
        highlightAll,
        highlightElement,
        highlightBlock: deprecateHighlightBlock,
        configure,
        initHighlighting,
        initHighlightingOnLoad,
        registerLanguage,
        unregisterLanguage,
        listLanguages,
        getLanguage,
        registerAliases,
        autoDetection,
        inherit,
        addPlugin
      });
      hljs.debugMode = function() { SAFE_MODE = false; };
      hljs.safeMode = function() { SAFE_MODE = true; };
      hljs.versionString = version;
      hljs.regex = {
        concat: concat,
        lookahead: lookahead,
        either: either,
        optional: optional,
        anyNumberOfTimes: anyNumberOfTimes
      };
      for (const key in MODES) {
        if (typeof MODES[key] === "object") {
          deepFreezeEs6.exports(MODES[key]);
        }
      }
      Object.assign(hljs, MODES);
      return hljs;
    };
    var highlight = HLJS({});
    return highlight;
})();
if (typeof exports === 'object' && typeof module !== 'undefined') { module.exports = hljs; }


/home/brandon/Projects/ChatDev/MultiAgentEbook/evolution.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-store">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <link rel="icon" type="image/png" sizes="32x32" href="./images/logo.png" />
  <title>§3: Evolution</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="style.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <style>
    .table-container {
      overflow-x: auto;
    }
    .paper-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }
    .paper-table th,
    .paper-table td {
      padding: 12px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .paper-table th {
      cursor: pointer;
      background-color: #f4f4f4;
    }
    .paper-table th:hover {
      background-color: #e0e0e0;
    }
    .sorting:after {
      content: ' \25B2';
    }
    .sorting_asc:after {
      content: ' \25B2';
    }
    .sorting_desc:after {
      content: ' \25BC';
    }
    #interactiveBookContainer {
      width: 1250px;
      height: 850px;
      margin: 0 auto;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
    </div>
  </header>
  <section class="paper-list">
    <div class="container">
      <div class="container" style="display: flex; align-items: center; position: relative;">
        <a href="index.html" class="btn clr3" style="position: absolute; left: 0; top: 50%; transform: translateY(-50%);">← Back Homepage</a>
        <div style="flex: 1; text-align: center;">
          <h2 class="section-heading" style="display: inline-block; margin: 0;">§3: Evolution</h2>
        </div>
      </div>
      <p class="section-description text-center">
        The evolution of multi-agent systems focuses on <b>cross-task experience accumulation</b>, enabling agents to enhance their capabilities and adapt to increasingly complex challenges. Click on the ebook below to read.
      </p>
      <div id="interactiveBookContainer">
        <iframe src="./book_evolution_index.html"></iframe>
      </div>
      <br>
      <br>
      <br>
      <br>
      <div class="table-container">
        <table id="paperTable" class="display paper-table">
          <thead>
            <tr>
              <th>Title</th>
              <th>Authors</th>
              <th>Affiliations</th>
              <th>Link</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>
  </section>
  <div class="attribution">
    <p>
      Initiated by the <a href="https://github.com/OpenBMB/ChatDev" target="_blank">ChatDev</a> Group, Tsinghua
      University
      <br>Contact us via <a href="mailto:qianc62@gmail.com">qianc62@gmail.com</a>
    </p>
  </div>
  <script>
    $(document).ready(function () {
      var keyword = "Evolution";
      Papa.parse("papers.csv", {
        download: true,
        header: true,
        complete: function (results) {
          var data = results.data;
          var filteredData = data
            .filter(function (row) {
              return row.AwesomeListCategory && row.AwesomeListCategory === keyword;
            })
            .map(function (row, index) {
              row.originalIndex = index;
              return row;
            });
          $('#paperTable').DataTable({
            data: filteredData,
            order: [], 
            columns: [
              { "data": "Title" },
              { "data": "Authors" },
              { "data": "Affiliation" },
              { "data": "Url", "render": function (data) { return `<a href="${data}">Link</a>`; } },
              { "data": "Date" },
            ],
            rowCallback: function (row, data, index) {
              $(row).attr('data-original-index', data.originalIndex);
            }
          });
        }
      });
    });
  </script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-store">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <link rel="icon" type="image/png" sizes="32x32" href="./images/logo.png" />
  <title>Multi-Agent Research Outline</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <header>
    <div class="container">
      <nav class="navbar flex">
        <div class="hamburger-container">
          <img src="./images/icon-hamburger.svg" class="hamburger" />
        </div>
        <div class="logo-container">
          <img src="images/logo5.png" width="200" alt="Logo" />
        </div>
        <ul class="nav-list flex">
          <li class="nav-item">
            <a href="https://github.com/OpenBMB/ChatDev/tree/main/MultiAgentEbook" class="nav-link btn clr1">GitHub</a>
          </li>
        </ul>
      </nav>
      <div class="intro flex">
        <img src="./images/bg-pattern.svg" class="bg-pattern" alt="background-pattern" />
        <div class="intro-col-left">
          <h1>
            Comprehensive Outline of Large Language Model-based Multi-Agent Research
          </h1>
          <p>
            This project presents an interactive eBook that compiles <b>an extensive collection of research papers on
              large language model (LLM)-based multi-agent systems</b>. Organized into multiple chapters and
            <b>continuously updated</b> with significant research, it strives to provide a comprehensive outline for
            both researchers and enthusiasts in the field. We welcome <b>ongoing contributions</b> to expand and enhance
            this resource.
          </p>
          <p>Initiated by the <a href="https://github.com/OpenBMB/ChatDev"><b>ChatDev</b></a> Group at Tsinghua
            University.</p>
          <div class="btn-group">
            <a href="#book" class="btn clr2">Start Reading</a>
            <a href="#more-works" class="btn clr3">Learn More</a>
          </div>
        </div>
        <div class="intro-col-right">
          <img src="./images/cover.png" alt="Cover" />
        </div>
      </div>
    </div>
  </header>
  <section class="feature">
    <div class="container">
      <img src="./images/bg-pattern.svg" class="bg-pattern" alt="background-pattern" />
      <h2 class="section-heading text-center">Multi-Agent Directions</h2>
      <div class="content" align="center">
        <p>
          Multi-agent systems are currently classified into two categories based on whether the agents are designed to
          achieve <b>specific task goals under external human instructions</b>: task-solving-oriented systems and
          social-simulation-oriented systems.
        </p>
      </div>
      <div class="tab-container">
        <ul class="tab-nav flex">
          <li class="active one"><b>Task Solving</b></li>
          <li class="two"><b>Social Simulation</b></li>
        </ul>
        <div class="tab-body tab-one flex active">
          <div class="tab-col-left">
            <img src="./images/chatdev_cover.png" alt="Comprehensive Resources" width="552" />
          </div>
          <div class="tab-col-right">
            <div class="content">
              <p>
                Task solving-oriented multi-agent systems employ autonomous agents working collaboratively to tackle
                complex problems. Cutting-edge research in this direction revolves around three primary areas:
                facilitating communication among agents, designing effective organizational structures for interaction,
                and exploring how agents co-evolve over time.
              </p>
              <img src="./images/multi_agent_framework_ts.png" alt="Dataset cover" width="660" align="center" />
            </div>
          </div>
        </div>
        <div class="tab-body tab-two flex">
          <div class="tab-col-left">
            <img src="./images/simulation.png" alt="Community Driven" width="746" />
          </div>
          <div class="tab-col-right">
            <div class="content">
              <p>
                Social simulation-oriented multi-agent systems concentrate on modeling and analyzing the social
                behaviors of agents, offering valuable insights into human dynamics and enhances the ability to analyze
                or predict social phenomena.
              </p>
              <img src="./images/multi_agent_framework_ss.png" alt="Dataset cover" width="660" align="center" />
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  <section class="cards_row">
    <div class="container" id="book">
      <h5 class="section-heading text-center">Dive into Each Chapter</h5>
      <div class="content" align="center">
        <p>
          This ebook contains research papers on the multi-agent layer and above, organized into multiple chapters based
          on proposed core technologies. Let's dive into each section.
        </p>
      </div>
      <div class="browser-cards">
        <div class="card">
          <img src="./images/communication_cover.png" alt="Systems cover" />
          <h4>§1: Communication</h4>
          <p>facilitating agent communication</p>
          <a href="communication.html" class="btn clr2">Read</a>
        </div>
        <div class="card">
          <img src="./images/organization_cover.png" alt="Benchmark cover" />
          <h4>§2: Organization</h4>
          <p>organizing agents effectively</p>
          <a href="organization.html" class="btn clr2">Read</a>
        </div>
        <div class="card">
          <img src="./images/evolution_cover.png" alt="Dataset cover" />
          <h4>§3: Evolution</h4>
          <p>growing capabilities over time</p>
          <a href="evolution.html" class="btn clr2">Read</a>
        </div>
        <div class="card">
          <img src="./images/simulation_cover.png" alt="Systems cover" />
          <h4>§4: Simulation</h4>
          <p>simulating societal dynamics</p>
          <a href="simulation.html" class="btn clr2">Read</a>
        </div>
      </div>
    </div>
  </section>
  <section class="cards_row">
    <h2 class="section-heading text-center">Learn More</h2>
    <div class="content" align="center">
      <p>
        In addition to the aforementioned resources, we also feature recent research from our lab. If you find our work
        of interest, we invite you to read, extend, or collaborate.
      </p>
    </div>
    <div class="container" id="more-works">
      <div class="browser-cards">
        <div class="card">
          <img src="./images/optima_cover.png" />
          <h4>Optima</h4>
          <p>Enhances Agent Communication Efficiency
          </p>
          <a href="https://arxiv.org/abs/2410.08115" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/thunlp/Optima" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/iagents_cover.png" />
          <h4>iAgents</h4>
          <p>Bijective Social Networks of Humans and Agents
          </p>
          <a href="https://arxiv.org/abs/2406.14928" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/thinkwee/iAgents" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/ioa_cover.png" />
          <h4>IoA</h4>
          <p>Networking Heterogeneous Agents</p>
          <a href="https://arxiv.org/abs/2407.07061" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/IoA" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/chatdev_cover.png" />
          <h4>ChatDev</h4>
          <p>Multi-Agent Collaboration for Software Development</p>
          <a href="https://arxiv.org/abs/2307.07924" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/ChatDev" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/agentverse_cover.png" />
          <h4>AgentVerse</h4>
          <p>General-Purpose Multi-Agent Framework</p>
          <a href="https://arxiv.org/abs/2308.10848" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/AgentVerse" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/colearning_cover.png" />
          <h4>Co-Learning</h4>
          <p>Cross-Task Experience Co-Leaning for Mutual Growth</p>
          <a href="https://arxiv.org/abs/2312.17025" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/ChatDev" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/ei_cover.png" />
          <h4>Co-Evolving</h4>
          <p>Continuous Experience Refinement over Time</p>
          <a href="https://arxiv.org/abs/2405.04219" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/ChatDev" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/organization.png" />
          <h4>MacNet</h4>
          <p>Exploring Collaborative Scaling Law</p>
          <a href="https://arxiv.org/abs/2406.07155" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/ChatDev" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/ctc_cover.png" />
          <h4>CTC</h4>
          <p>Cross-Team Multi-Agent Orchestration</p>
          <a href="https://arxiv.org/abs/2406.08979" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/OpenBMB/ChatDev" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/chateval_cover.png" />
          <h4>ChatEval</h4>
          <p>Communication for Automated Evaluation</p>
          <a href="https://arxiv.org/abs/2308.07201" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/thunlp/ChatEval" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
        <div class="card">
          <img src="./images/autoform_cover.png" />
          <h4>AutoForm</h4>
          <p>Finding Effective Communication Protocals</p>
          <a href="https://arxiv.org/abs/2402.18439" class="btnsmall paper"><span class="icon"><img
                src="images/pdf_normal.png" alt="PDF Icon"></span>Paper</a>
          <a href="https://github.com/thunlp/AutoForm" class="btnsmall code"><span class="icon"><img
                src="images/github_normal.png" alt="GitHub Icon"></span>Code</a>
        </div>
      </div>
    </div>
  </section>
  <section class="faq">
    <div class="container">
      <h2 class="section-heading">Frequently Asked Questions</h2>
      <div class="faq-container">
        <div class="question">
          <button>
            <span>How is this ebook organized?</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="12">
              <path fill="none" stroke="#5267DF" stroke-width="3" d="M1 1l8 8 8-8" />
            </svg>
          </button>
          <p>
            This ebook gathers leading research on LLM-powered multi-agent systems since 2023, categorized by key
            perspectives in the field. As this area rapidly evolves, updates will be ongoing.
          </p>
        </div>
        <div class="question">
          <button>
            <span>How can I contribute?</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="12">
              <path fill="none" stroke="#5267DF" stroke-width="3" d="M1 1l8 8 8-8" />
            </svg>
          </button>
          <p>
            We encourage open-source collaboration on this project. You can contribute by submitting a pull request with
            detailed metadata for notable papers in the <a
              href="https://github.com/OpenBMB/ChatDev/tree/main/MultiAgentEbook/papers.csv">table</a>.
          </p>
        </div>
        <div class="question">
          <button>
            <span>How can I download this ebook?</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="12">
              <path fill="none" stroke="#5267DF" stroke-width="3" d="M1 1l8 8 8-8" />
            </svg>
          </button>
          <p>
            You can download all ebook content in CSV format directly from <a
              href="https://github.com/OpenBMB/ChatDev/tree/main/MultiAgentEbook/papers.csv">here</a>.
          </p>
        </div>
      </div>
    </div>
  </section>
  <div class="attribution">
    <p>
      Initiated by the <a href="https://github.com/OpenBMB/ChatDev" target="_blank">ChatDev</a> Group, Tsinghua
      University
      <br>Contact us via <a href="mailto:qianc62@gmail.com">qianc62@gmail.com</a>
      <br>
      <span style="font-size: 14px;" id="busuanzi_container_site_pv">Total PV <span style="font-size: 14px;"
          id="busuanzi_value_site_pv"></span></span>
    </p>
  </div>
  <script src="main.js"></script>
  <script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
</body>
</html>


/home/brandon/Projects/ChatDev/MultiAgentEbook/book_simulation_index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flip Book</title>
    <link rel="stylesheet" href="./book_style.css">
    <style>
        body {
            background-color: transparent;
        }
    </style>
</head>
<body>
    <div id="flip_book_container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
    <script src="./book_simulation/script.js"></script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/style.css

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
:root {
  --clr-primary--one: #660874;
  --clr-primary--two: #D93379;
  --clr-neutral--one: hsl(229, 8%, 60%);
  --clr-neutral--two: hsl(229, 31%, 21%);
  --clr-primary--paper: #D5635F;
  --clr-primary--code: hsl(225, 2%, 35%);
}
html {
  font-size: 62.5%;
}
body {
  font-size: 18px;
  font-family: "Rubik", sans-serif;
}
html,
body {
  overflow-x: hidden;
}
.container {
  max-width: 1440px;
  width: 100%;
  margin: 0 auto;
}
img {
  max-width: 100%;
  display: block;
}
.bg-pattern {
  position: absolute;
  z-index: -1;
  opacity: 0.7;
}
h1 {
  color: var(--clr-neutral--two);
  font-size: 6rem;
  font-weight: 500;
}
h2 {
  font-weight: 500;
  font-size: 4rem;
  color: var(--clr-neutral--two);
}
p {
  color: var(--clr-neutral--one);
  max-width: 45ch;
  line-height: 1.6;
}
.btn {
  padding: 0.9em 2em;
  border-radius: 0.5rem;
  font-weight: 500;
  color: #fff;
  transition: all 0.3s;
  text-decoration: none;
  display: inline-block;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
  -webkit-border-radius: 0.5rem;
  -moz-border-radius: 0.5rem;
  -ms-border-radius: 0.5rem;
  -o-border-radius: 0.5rem;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.btnsmall {
  padding: 0.9em 2em;
  border-radius: 0.5rem;
  font-weight: 200;
  color: #fff;
  transition: all 0.3s;
  text-decoration: none;
  display: inline-block;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
  -webkit-border-radius: 0.5rem;
  -moz-border-radius: 0.5rem;
  -ms-border-radius: 0.5rem;
  -o-border-radius: 0.5rem;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.btn.clr1 {
  background-color: var(--clr-primary--two);
  border: 2px solid var(--clr-primary--two);
}
.btn.clr1:hover {
  color: var(--clr-primary--two);
  background-color: #fff;
}
.btn.clr2 {
  margin-top: 2rem;
  background-color: var(--clr-primary--one);
  border: 2px solid var(--clr-primary--one);
}
.btn.clr2:hover {
  margin-top: 2rem;
  color: var(--clr-primary--one);
  background-color: transparent;
}
.btn.clr3 {
  background-color: transparent;
  border: 2px solid transparent;
  color: var(--clr-neutral--one);
}
.btn.clr3:hover {
  border: 2px solid var(--clr-neutral--one);
}
.btnsmall.paper {
  margin-top: 2rem;
  background-color: var(--clr-primary--paper);
  border: 2px solid var(--clr-primary--paper);
}
.btnsmall.paper:hover {
  margin-top: 2rem;
  color: var(--clr-primary--paper);
  background-color: transparent;
}
.btnsmall.code {
  margin-top: 2rem;
  background-color: var(--clr-primary--code);
  border: 2px solid var(--clr-primary--code);
}
.btnsmall.code:hover {
  margin-top: 2rem;
  color: var(--clr-primary--code);
  background-color: transparent;
}
.flex {
  display: flex;
}
.section-heading {
  text-align: center;
}
.section-description {
  margin: 2.5rem auto;
  text-align: left;
}
header .container {
  position: relative;
}
header .bg-pattern {
  bottom: 5%;
  right: -55%;
  max-width: 130rem;
}
.navbar {
  justify-content: space-between;
  align-items: center;
  padding: 4rem 0;
}
.hamburger-container {
  display: none;
}
.nav-list {
  list-style: none;
  align-items: center;
}
.nav-list .social-media-list {
  display: none;
}
.nav-list .nav-item:not(:first-child) {
  margin-left: 5rem;
}
.nav-item .nav-link {
  text-decoration: none;
  text-transform: uppercase;
  font-size: 1.5rem;
  transition: all 0.3s;
  color: var(--clr-neutral--two);
  letter-spacing: 2px;
}
.nav-item .nav-link.btn {
  color: #fff;
}
.nav-item .nav-link:hover {
  color: var(--clr-primary--two);
}
.intro {
  padding: 1rem 0;
  align-items: center;
}
.intro-col-left {
  flex: 1;
  border-radius: 200px;
}
.intro-col-right {
  flex: 1;
  border-radius: 200px;
}
.intro-col-left h1 {
  font-size: 5rem;
}
.intro-col-left p {
  margin: 3rem 0 4rem 0;
}
.intro-col-left .btn-group .btn:nth-child(2) {
  margin-left: 1.5rem;
}
.feature {
  padding: 15rem 0;
}
.feature .container {
  position: relative;
}
.feature .bg-pattern {
  transform: rotateY(180deg);
  top: 58%;
  left: -42%;
  max-width: 110rem;
  -webkit-transform: rotateY(180deg);
  -moz-transform: rotateY(180deg);
  -ms-transform: rotateY(180deg);
  -o-transform: rotateY(180deg);
}
.tab-nav {
  justify-content: center;
  list-style: none;
  width: -moz-fit-content;
  width: -webkit-fit-content;
  width: fit-content;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  margin: 0 auto;
}
.tab-nav li {
  padding: 3rem 4rem;
  cursor: pointer;
  position: relative;
}
.tab-nav li:not(:last-child) {
  margin-right: 4rem;
}
.tab-nav li.active::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 4px;
  background-color: var(--clr-primary--two);
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
}
.tab-body {
  align-items: center;
  justify-content: center;
  margin-top: 8rem;
  display: none;
  height: 40rem;
  animation: fadein 0.8s;
  -webkit-animation: fadein 0.8s;
}
@keyframes fadein {
  from {
    opacity: 0;
    transform: translateX(-2rem);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}
.tab-body.active {
  display: flex;
}
.tab-body .tab-col-left,
.tab-body .tab-col-right {
  flex: 1;
}
.tab-body .tab-col-left img {
  margin: 0 auto;
}
.tab-col-right .content {
  width: -moz-fit-content;
  width: -webkit-fit-content;
  width: fit-content;
  margin: 0 auto;
}
.tab-col-right p {
  margin: 3rem 0 4rem;
}
.cards_row {
  padding: 10rem 0;
}
.browser-cards {
  margin: 8rem auto 0 auto;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  width: 120rem;
  gap: 2rem;
}
.browser-cards .card {
  text-align: center;
  padding: 3rem 0;
  box-shadow: 0 1.5rem 2rem rgb(238, 238, 238);
  max-width: 35rem;
  border-radius: 1.5
}
.card img {
  margin: 0 auto;
  height: 200px;
}
.card h4 {
  color: var(--clr-neutral--two);
  font-size: 2.5rem;
  font-weight: 500;
  margin-top: 1rem;
}
.card p {
  margin-top: 1rem;
}
.faq {
  padding: 10rem 0;
}
.faq-container {
  width: 80%;
  margin: 8rem auto;
}
.question button {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2.5rem 2rem 2.5rem 0;
  border: none;
  outline: none;
  background-color: transparent;
  cursor: pointer;
  color: var(--clr-neutral--two);
  font-size: 2rem;
  font-family: "Rubik", sans-serif;
  font-weight: 500;
  letter-spacing: 1px;
  transition: all 0.3s;
  text-align: left;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.faq-container .question {
  border-bottom: 1px solid var(--clr-neutral--one);
}
.faq-container .question:last-child {
  border-bottom: 1px solid var(--clr-neutral--one);
}
.faq-container .question:hover button {
  color: var(--clr-primary--two);
}
.question p {
  max-width: 100%;
  padding: 0;
  height: 0;
  overflow: hidden;
  transition: all 0.3s;
  opacity: 0;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.question button svg {
  transition: all 0.3s;
  min-width: 1.8rem;
  margin-left: 2rem;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.question.open button svg {
  transform: rotate(180deg);
  -webkit-transform: rotate(180deg);
  -moz-transform: rotate(180deg);
  -ms-transform: rotate(180deg);
  -o-transform: rotate(180deg);
}
.question.open button svg path {
  stroke: var(--clr-primary--two);
}
.question.open p {
  height: auto;
  opacity: 1;
  padding-bottom: 2.5rem;
}
.faq .center {
  text-align: center;
}
.subscribe {
  padding: 7rem 0;
  background-color: var(--clr-primary--one);
  text-align: center;
}
.subscribe .heading-sm {
  text-transform: uppercase;
  color: #fff;
  letter-spacing: 5px;
  font-size: 1.5rem;
}
.subscribe h2 {
  color: #fff;
  letter-spacing: 1px;
  margin: 4rem 0;
}
.subscribe .subscribe-form {
  justify-content: center;
}
.subscribe-form input {
  padding: 2rem;
  width: 35rem;
  border: none;
  outline: none;
  font-family: "Rubik", sans-serif;
  border-radius: 0.5rem;
  color: var(--clr-neutral--two);
  -webkit-border-radius: 0.5rem;
  -moz-border-radius: 0.5rem;
  -ms-border-radius: 0.5rem;
  -o-border-radius: 0.5rem;
}
.subscribe-form input::placeholder {
  color: var(--clr-neutral--one);
  font-size: 1.5rem;
  opacity: 0.7;
}
.subscribe-form .submit {
  font-family: "Rubik", sans-serif;
  font-size: 1.5rem;
  cursor: pointer;
  letter-spacing: 1px;
  margin-left: 1rem;
}
footer {
  background-color: var(--clr-neutral--two);
  padding: 3rem 0;
}
footer .container {
  justify-content: space-between;
  align-items: center;
}
.footer-nav .logo {
  margin-right: 6rem;
}
.footer-nav .logo svg path {
  fill: #fff;
}
.footer-nav,
.social-media-list {
  list-style: none;
}
.footer-nav .nav-item .nav-link {
  font-size: 1.3rem;
  color: #fff;
}
.footer-nav .nav-item .nav-link:hover {
  color: var(--clr-primary--two);
}
.footer-nav .nav-item:not(:last-child),
.social-media-list li:first-child {
  margin-right: 4rem;
}
.social-media-list svg path {
  transition: all 0.3s;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -ms-transition: all 0.3s;
  -o-transition: all 0.3s;
}
.social-media-list svg:hover path {
  fill: var(--clr-primary--two);
}
@media only screen and (min-width: 162.5em) {
  .bg-pattern {
    display: none;
  }
}
@media only screen and (max-width: 90em) {
  header .bg-pattern {
    right: -70%;
  }
  .feature .bg-pattern {
    left: -62rem;
  }
}
@media only screen and (max-width: 75em) {
  h1 {
    font-size: 5rem;
  }
  h2 {
    font-size: 3.5rem;
  }
  p {
    font-size: 1.7rem;
  }
  header .bg-pattern {
    right: -80%;
    max-width: 120rem;
  }
  .feature .bg-pattern {
    left: -68rem;
  }
  .tab-body .tab-col-left {
    margin-right: 2rem;
  }
  .browser-cards {
    grid-gap: 2rem;
  }
}
@media only screen and (max-width: 64em) {
  h1 {
    font-size: 4.5rem;
  }
  p {
    font-size: 1.6rem;
  }
  .btn {
    font-size: 1.7rem;
  }
  header .bg-pattern {
    right: -85%;
    max-width: 105rem;
  }
  .feature .bg-pattern {
    left: -72rem;
  }
  .faq-container {
    width: 70%;
  }
}
@media only screen and (max-width: 56.25em) {
  header .bg-pattern {
    right: -75%;
    max-width: 85rem;
  }
  h1 {
    font-size: 3.5rem;
  }
  h2 {
    font-size: 3rem;
  }
  p {
    font-size: 1.5rem;
    max-width: 35ch;
  }
  .btn {
    font-size: 1.4rem;
  }
  .feature .bg-pattern {
    top: 64%;
    left: -57rem;
    max-width: 85rem;
  }
  .tab-nav li {
    padding: 3rem;
  }
}
@media only screen and (max-width: 48em) {
  h1 {
    font-size: 5rem;
  }
  p {
    max-width: 50ch;
    font-size: 1.8rem;
  }
  .btn {
    font-size: 1.6rem;
  }
  header .bg-pattern {
    top: 25%;
    left: 20%;
    max-width: 115rem;
  }
  .navbar {
    padding: 4rem 2rem;
    z-index: 300;
    position: relative;
  }
  .navbar .nav-list {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-color: hsla(229, 31%, 21%, 0.95);
    opacity: 0;
    pointer-events: none;
    z-index: 150;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
  }
  .nav-list.active {
    flex-direction: column;
    opacity: 1;
    padding: 0 4rem;
    pointer-events: all;
  }
  .nav-list .nav-item {
    width: 100%;
    text-align: center;
  }
  .nav-list .nav-item:not(:last-child) {
    margin-left: 0;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
    padding: 2.5rem 0;
  }
  .nav-list .nav-item:first-child {
    margin-top: 12rem;
  }
  .nav-list .nav-item .nav-link {
    color: #fff;
    font-size: 1.8rem;
    letter-spacing: 2px;
  }
  .nav-item .nav-link.btn {
    color: #fff;
    width: 100%;
    background-color: transparent;
    border: 2px solid #fff;
    padding: 0.8em 0;
    margin: 4rem auto;
  }
  .nav-list .social-media-list {
    display: flex;
    margin: auto 0 6rem;
  }
  .logo-container {
    z-index: 999999;
  }
  .logo-container svg circle,
  .logo-container svg circle+path,
  .logo-container svg path {
    transition: all 0.3s;
  }
  .logo-container.active svg circle,
  .logo-container.active svg path {
    fill: #fff;
  }
  .logo-container.active svg circle+path {
    fill: #000;
  }
  .hamburger-container {
    display: block;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 2rem;
    z-index: 200;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
  }
  .hamburger-container img {
    width: 3.5rem;
  }
  .intro {
    flex-direction: column;
    padding: 5rem 0;
  }
  .intro-col-left {
    order: 2;
    text-align: center;
    margin-top: 15rem;
  }
  .feature {
    padding: 8rem 0;
  }
  .feature .bg-pattern {
    top: 50%;
    left: -54rem;
    max-width: 100rem;
  }
  .tab-container {
    margin-top: 6rem;
  }
  .tab-nav {
    flex-direction: column;
    align-items: center;
    width: 100%;
    text-align: center;
    border: none;
  }
  .tab-nav li:not(:last-child) {
    margin-right: 0;
  }
  .tab-nav li {
    width: 90%;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }
  .tab-nav li:last-child {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }
  .tab-nav li.active::before {
    width: 50%;
  }
  .tab-body {
    flex-direction: column;
    text-align: center;
    width: auto;
  }
  .tab-body .tab-col-right {
    margin-top: 10rem;
  }
  .tab-body .tab-col-left {
    margin-right: 0;
  }
  .browser-cards {
    grid-template-columns: 1fr;
    grid-gap: 3rem;
  }
  .browser-cards .card {
    margin: 0 auto;
    width: 100%;
  }
  .browser-cards .card:nth-child(2),
  .browser-cards .card:nth-child(3) {
    transform: none;
    -webkit-transform: none;
    -moz-transform: none;
    -ms-transform: none;
    -o-transform: none;
  }
  .faq-container {
    width: 90%;
  }
  .subscribe .subscribe-form {
    flex-direction: column;
  }
  .subscribe-form input {
    width: 70%;
    margin: 0 auto;
  }
  .subscribe-form .submit {
    width: 70%;
    margin: 1.5rem auto;
  }
  footer .container,
  .footer-nav {
    flex-direction: column;
  }
  .footer-nav {
    align-items: center;
    margin: 0 0 3rem 0;
  }
  .footer-nav .logo {
    margin: 0 0 4rem 0;
  }
  .footer-nav .nav-item .nav-link {
    font-size: 1.8rem;
  }
  .footer-nav .nav-item:not(:last-child) {
    margin-right: 0;
    margin-bottom: 4rem;
  }
  footer .social-media-list {
    margin-top: 3rem;
  }
}
@media only screen and (max-width: 36em) {
  h1 {
    font-size: 4rem;
  }
  p {
    max-width: 45ch;
    font-size: 1.6rem;
  }
  header .bg-pattern {
    top: 23%;
    right: -55%;
    max-width: 100rem;
  }
  .feature .bg-pattern {
    top: 50%;
    left: -58rem;
    max-width: 100rem;
  }
  .faq-container {
    width: 95%;
  }
  .question button {
    font-size: 1.8rem;
  }
}
@media only screen and (max-width: 30em) {
  h1 {
    font-size: 3.5rem;
  }
  h2 {
    font-size: 2.5rem;
  }
  .btn {
    font-size: 1.3rem;
  }
  header .bg-pattern {
    top: 27%;
    right: -55%;
    max-width: 70rem;
  }
  .hamburger-container img {
    width: 3rem;
  }
  .intro-col-left {
    margin-top: 8rem;
  }
  .feature .bg-pattern {
    top: 52%;
    left: -55rem;
    max-width: 82rem;
  }
  .question button {
    font-size: 1.6rem;
  }
  .subscribe h2 br {
    display: none;
  }
  .footer-nav .nav-item .nav-link {
    font-size: 1.6rem;
  }
}
@media only screen and (max-width: 22em) {
  h1 {
    font-size: 2.8rem;
    padding: 0;
  }
  p {
    font-size: 1.4rem;
  }
  header .bg-pattern {
    top: 22%;
    right: -55%;
    max-width: 60rem;
  }
  .hamburger-container img {
    width: 2.5rem;
  }
  .intro-col-left {
    margin-top: 8rem;
  }
  .intro .btn {
    max-width: 200px;
    display: block;
    margin: 0 auto;
  }
  .intro-col-left .btn-group .btn:nth-child(2) {
    margin: 2rem auto 0;
  }
  .feature .bg-pattern {
    top: 55%;
    left: -35rem;
    max-width: 60rem;
  }
  .tab-nav li {
    width: 100%;
    font-size: 1.6rem;
  }
  .subscribe-form input,
  .subscribe-form .submit {
    width: 100%;
  }
}
.attribution {
  padding: 1rem 0;
  background-color: #272727;
}
.attribution p {
  max-width: 100%;
  text-align: center;
  color: #fff;
}
.attribution a {
  text-decoration: none;
  color: #ff7a00;
}
.paper-list {
  padding: 50px 0;
}
.paper-list .btn {
  display: inline-block;
  margin-bottom: 30px;
}
.section-heading {
  font-size: 2em;
  margin-bottom: 20px;
}
.faq {
  padding: 50px 0;
}
.question {
  margin-bottom: 20px;
}
html {
  scroll-behavior: smooth;
}
.btnsmall {
  display: inline-flex; 
  align-items: center; 
  text-decoration: none; 
  padding: 5px 10px; 
  border: 1px solid #ccc; 
  border-radius: 5px; 
}
.btnsmall .icon img {
  width: 20px; 
  height: auto; 
  margin-right: 5px; 
  transition: opacity 0.3s ease; 
}
.btnsmall.paper:hover .icon img {
  content: url('images/pdf.png'); 
}
.btnsmall.code:hover .icon img {
  content: url('images/github.png'); 
}


/home/brandon/Projects/ChatDev/MultiAgentEbook/communication.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-store">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <link rel="icon" type="image/png" sizes="32x32" href="./images/logo.png" />
  <title>§1: Communication</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="style.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <style>
    .table-container {
      overflow-x: auto;
    }
    .paper-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }
    .paper-table th,
    .paper-table td {
      padding: 12px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .paper-table th {
      cursor: pointer;
      background-color: #f4f4f4;
    }
    .paper-table th:hover {
      background-color: #e0e0e0;
    }
    .sorting:after {
      content: ' \25B2';
    }
    .sorting_asc:after {
      content: ' \25B2';
    }
    .sorting_desc:after {
      content: ' \25BC';
    }
    #interactiveBookContainer {
      width: 1250px;
      height: 850px;
      margin: 0 auto;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
    </div>
  </header>
  <section class="paper-list">
    <div class="container">
      <div class="container" style="display: flex; align-items: center; position: relative;">
        <a href="index.html" class="btn clr3" style="position: absolute; left: 0; top: 50%; transform: translateY(-50%);">← Back Homepage</a>
        <div style="flex: 1; text-align: center;">
          <h2 class="section-heading" style="display: inline-block; margin: 0;">§1: Communication</h2>
        </div>
      </div>
      <p class="section-description text-center">
        Task-oriented agent communication typically focuses on <b>protocol design</b> and <b>knowledge-augmented communication</b>, ensuring more effective information interaction and consensus building. Click on the ebook below to read.
      </p>
      <div id="interactiveBookContainer">
        <iframe src="./book_communication_index.html"></iframe>
      </div>
      <br>
      <br>
      <br>
      <br>
      <div class="table-container">
        <table id="paperTable" class="display paper-table">
          <thead>
            <tr>
              <th>Title</th>
              <th>Authors</th>
              <th>Affiliations</th>
              <th>Link</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>
  </section>
  <div class="attribution">
    <p>
      Initiated by the <a href="https://github.com/OpenBMB/ChatDev" target="_blank">ChatDev</a> Group, Tsinghua
      University
      <br>Contact us via <a href="mailto:qianc62@gmail.com">qianc62@gmail.com</a>
    </p>
  </div>
  <script>
    $(document).ready(function () {
      var keyword = "Communication";
      Papa.parse("papers.csv", {
        download: true,
        header: true,
        complete: function (results) {
          var data = results.data;
          var filteredData = data
            .filter(function (row) {
              return row.AwesomeListCategory && row.AwesomeListCategory === keyword;
            })
            .map(function (row, index) {
              row.originalIndex = index;
              return row;
            });
          $('#paperTable').DataTable({
            data: filteredData,
            order: [], 
            columns: [
              { "data": "Title" },
              { "data": "Authors" },
              { "data": "Affiliation" },
              { "data": "Url", "render": function (data) { return `<a href="${data}">Link</a>`; } },
              { "data": "Date" },
            ],
            rowCallback: function (row, data, index) {
              $(row).attr('data-original-index', data.originalIndex);
            }
          });
        }
      });
    });
  </script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/book_organization_index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flip Book</title>
    <link rel="stylesheet" href="./book_style.css">
    <style>
        body {
            background-color: transparent;
        }
    </style>
</head>
<body>
    <div id="flip_book_container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
    <script src="./book_organization/script.js"></script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/book_communication_index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flip Book</title>
    <link rel="stylesheet" href="./book_style.css">
    <style>
        body {
            background-color: transparent;
        }
    </style>
</head>
<body>
    <div id="flip_book_container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
    <script src="./book_communication/script.js"></script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/main.js

const hamburger = document.querySelector(".hamburger-container");
const tabNav = document.querySelector(".tab-nav");
const tabNavList = document.querySelectorAll(".tab-nav li");
const tabList = document.querySelectorAll(".tab-body");
const questions = document.querySelectorAll(".question");
const logoContainer = document.querySelector('.logo-container');
let toggle = false;
hamburger.addEventListener("click", function () {
  const hamburger = document.querySelector(".hamburger");
  const navList = document.querySelector(".nav-list");
  toggle = !toggle;
  let srcHam = "./images/icon-hamburger.svg";
  let srcClose = "./images/icon-close.svg";
  hamburger.src = toggle ? srcClose : srcHam;
  navList.classList.toggle("active");
  logoContainer.classList.toggle('active');
  document.body.style.position = toggle ? 'fixed' : 'static';
});
tabNavList.forEach((item, index, array) => {
  item.addEventListener("click", () => {
    tabNav.querySelector(".active").classList.remove("active");
    item.classList.add("active");
    if (item.classList.contains("one")) {
      tabList[0].classList.add("active");
      tabList[1].classList.remove("active");
    }
    if (item.classList.contains("two")) {
      tabList[1].classList.add("active");
      tabList[0].classList.remove("active");
    }
  });
});
questions.forEach((item) => {
  item.addEventListener("click", () => {
    item.classList.toggle("open");
  });
});

/home/brandon/Projects/ChatDev/MultiAgentEbook/book_style.css

*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Arial Black";
    color: rgb(25, 25, 25);
}
body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh;
    background-color: rgb(245, 245, 245);
}
input {
    display: none;
}
#flip_book {
    position: relative;
    width: 596px;
    height: 840px;
    transition-duration: 1s;
    perspective: 2000px;
}
.front_cover, .back_cover {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    border-radius: 2.5px 5px 5px 2.5px;
    background-image: url(./images/flip_book_edge_shading.png);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: rgb(255, 255, 255);
    box-shadow: 0 0 5px 0 rgb(25, 25, 25, 0.25);
}
.front_cover {
    position: absolute;
    cursor: pointer;
    transform-origin: center left;
    transition: transform 0.5s;
    z-index: 99;
}
.front_cover label {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
}
.page {
    position: absolute;
    top: 10px;
    left: 1px;
    width: 576px;
    height: 820px;
    border-radius: 0 5px 5px 0;
    background-color: white;
    transform-origin: left;
    transform-style: preserve-3d;
    transform: rotateY(0deg);
    transition-duration: 0.5s;
}
.front_page {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
}
.front_page label {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 100;
}
.back_page {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    transform: rotateY(180deg);
    z-index: 100;
}
.back_page label {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 100;
}
.edge_shading {
    position: absolute;
    width: 576px;
    height: 820px;
    z-index: 98;
}
.front_content {
    position: absolute;
    top: 1px;
    width: 574px;
    height: 796px;
    border-radius: 0 5px 5px 0;
    z-index: 97;
}
.back_content {
    position: absolute;
    top: 1px;
    left: 1px;
    width: 574px;
    height: 796px;
    border-radius: 5px 0 0 5px;
    z-index: 97;
}
.back_cover {
    position: relative;
    z-index: -1;
}
.welcome_text {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    font-size: 2em;
    color: rgb(25, 25, 25);
}
.text_content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: justify;
    width: 100%;
    height: 100%;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
}
.text_content h1, .text_content p.author {
    margin: 0;
    padding: 10px 0;
}
.text_content p.author {
    font-style: italic;
    color: #555;
}
.text_content p.summary {
    text-align: justify;
    text-align-last: left;
    max-width: 800px;
    margin: 20px 0;
    line-height: 1.6;
    overflow-wrap: break-word;
    hyphens: auto;
    font-size: smaller;
}
.text_content h1 {
    font-size: 24px; 
}
.thank_you_text {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    font-size: 2em;
    color: rgb(25, 25, 25);
}
#cover_checkbox:checked~#flip_book {
    transform: translateX(288px)
}
#cover_checkbox:checked~#flip_book .front_cover {
    transform: rotateY(-180deg);
    transition: transform 1.5s, z-index 0.5s 0.5s;
    z-index: 0;
}
#cover_checkbox:checked~#flip_book {
    transform: translateX(288px);
}
#cover_checkbox:checked~#flip_book .front_cover {
    transform: rotateY(-180deg);
    transition: transform 1.5s, z-index 0.5s 0.5s;
    z-index: 0;
}
.cover_image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 2.5px 5px 5px 2.5px;
}
.back_cover .cover_image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 2.5px 5px 5px 2.5px;
}
.text_content_summary {
    text-align: left;
    display: inline-block;
    width: 100%; 
}

/home/brandon/Projects/ChatDev/MultiAgentEbook/transform_csv.py

import pandas as pd
input_file = 'papers.csv'
df_raw = pd.read_csv(input_file, on_bad_lines='warn')
cat2id = {'Communication':'1',
          'Organization':'2',
          'Evolution':'3',
          'Simulation':'4'}
for cat in ['Communication','Evolution','Simulation','Organization']:
    df = df_raw[df_raw['AwesomeListCategory'] == cat]
    new_df = pd.DataFrame(columns=['image_path','title','author','summary','affiliation'])
    index = 0
    first_title = df.iloc[0]['Title']
    first_author = df.iloc[0]['Authors']
    first_affiliation = df.iloc[0]['Affiliation']
    first_summary = df.iloc[0]['Abstract'].replace("\n","")
    first_cover_path = "./images/" + cat2id[cat] + "d.png"
    first_line = pd.DataFrame([[first_cover_path,first_title,first_author,first_summary,first_affiliation]], columns=['image_path','title','author','summary','affiliation'])
    new_df = pd.concat([new_df, first_line], ignore_index=True)
    image_path_list = df['PaperIndex'].tolist()
    for _, line in df[1:].iterrows():
        print(line['Title'])
        new_line = pd.DataFrame([["./images/{}.png".format(image_path_list[index]),line['Title'],line['Authors'],str(line['Abstract']).replace("\n",""),line['Affiliation']]], columns=['image_path','title','author','summary','affiliation'])
        new_df = pd.concat([new_df, new_line], ignore_index=True)
        index += 1
    last_line = pd.DataFrame([["./images/{}.png".format(image_path_list[index]),"To be Continued...","Your Contributions are Welcome!","",""]], columns=['image_path','title','author','summary','affiliation'])
    new_df = pd.concat([new_df, last_line], ignore_index=True)
    new_df.to_csv("./book_{}/data.csv".format(cat.lower()))


/home/brandon/Projects/ChatDev/MultiAgentEbook/book_evolution_index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flip Book</title>
    <link rel="stylesheet" href="./book_style.css">
    <style>
        body {
            background-color: transparent;
        }
    </style>
</head>
<body>
    <div id="flip_book_container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
    <script src="./book_evolution/script.js"></script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/organization.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-store">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <link rel="icon" type="image/png" sizes="32x32" href="./images/logo.png" />
  <title>§2: Organization</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="style.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <style>
    .table-container {
      overflow-x: auto;
    }
    .paper-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }
    .paper-table th,
    .paper-table td {
      padding: 12px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .paper-table th {
      cursor: pointer;
      background-color: #f4f4f4;
    }
    .paper-table th:hover {
      background-color: #e0e0e0;
    }
    .sorting:after {
      content: ' \25B2';
    }
    .sorting_asc:after {
      content: ' \25B2';
    }
    .sorting_desc:after {
      content: ' \25BC';
    }
    #interactiveBookContainer {
      width: 1250px;
      height: 850px;
      margin: 0 auto;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
    </div>
  </header>
  <section class="paper-list">
    <div class="container">
      <div class="container" style="display: flex; align-items: center; position: relative;">
        <a href="index.html" class="btn clr3" style="position: absolute; left: 0; top: 50%; transform: translateY(-50%);">← Back Homepage</a>
        <div style="flex: 1; text-align: center;">
          <h2 class="section-heading" style="display: inline-block; margin: 0;">§2: Organization</h2>
        </div>
      </div>
      <p class="section-description text-center">
        Multi-agent organization emphasizes both the <b>topological structures</b> and <b>workflow orchestration</b>, facilitating enhanced collaboration and improved collective intelligence. Click on the ebook below to read.
      </p>
      <div id="interactiveBookContainer">
        <iframe src="./book_organization_index.html"></iframe>
      </div>
      <br>
      <br>
      <br>
      <br>
      <div class="table-container">
        <table id="paperTable" class="display paper-table">
          <thead>
            <tr>
              <th>Title</th>
              <th>Authors</th>
              <th>Affiliations</th>
              <th>Link</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>
  </section>
  <div class="attribution">
    <p>
      Initiated by the <a href="https://github.com/OpenBMB/ChatDev" target="_blank">ChatDev</a> Group, Tsinghua
      University
      <br>Contact us via <a href="mailto:qianc62@gmail.com">qianc62@gmail.com</a>
    </p>
  </div>
  <script>
    $(document).ready(function () {
      var keyword = "Organization";
      Papa.parse("papers.csv", {
        download: true,
        header: true,
        complete: function (results) {
          var data = results.data;
          var filteredData = data
            .filter(function (row) {
              return row.AwesomeListCategory && row.AwesomeListCategory === keyword;
            })
            .map(function (row, index) {
              row.originalIndex = index;
              return row;
            });
          $('#paperTable').DataTable({
            data: filteredData,
            order: [], 
            columns: [
              { "data": "Title" },
              { "data": "Authors" },
              { "data": "Affiliation" },
              { "data": "Url", "render": function (data) { return `<a href="${data}">Link</a>`; } },
              { "data": "Date" },
            ],
            rowCallback: function (row, data, index) {
              $(row).attr('data-original-index', data.originalIndex);
            }
          });
        }
      });
    });
  </script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/simulation.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-store">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <link rel="icon" type="image/png" sizes="32x32" href="./images/logo.png" />
  <title>§4: Simulation</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="style.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <style>
    .table-container {
      overflow-x: auto;
    }
    .paper-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }
    .paper-table th,
    .paper-table td {
      padding: 12px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .paper-table th {
      cursor: pointer;
      background-color: #f4f4f4;
    }
    .paper-table th:hover {
      background-color: #e0e0e0;
    }
    .sorting:after {
      content: ' \25B2';
    }
    .sorting_asc:after {
      content: ' \25B2';
    }
    .sorting_desc:after {
      content: ' \25BC';
    }
    #interactiveBookContainer {
      width: 1250px;
      height: 850px;
      margin: 0 auto;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
    </div>
  </header>
  <section class="paper-list">
    <div class="container">
      <div class="container" style="display: flex; align-items: center; position: relative;">
        <a href="index.html" class="btn clr3" style="position: absolute; left: 0; top: 50%; transform: translateY(-50%);">← Back Homepage</a>
        <div style="flex: 1; text-align: center;">
          <h2 class="section-heading" style="display: inline-block; margin: 0;">§4: Simulation</h2>
        </div>
      </div>
      <p class="section-description text-center">
        Multi-agent social simulations employ agents to <b>create digital mappings</b> of real-world societies, thereby offering insights into various social behaviors and trends to facilitate the <b>analysis and prediction of social phenomena</b>. Click on the ebook below to read.
      </p>
      <div id="interactiveBookContainer">
        <iframe src="./book_simulation_index.html"></iframe>
      </div>
      <br>
      <br>
      <br>
      <br>
      <div class="table-container">
        <table id="paperTable" class="display paper-table">
          <thead>
            <tr>
              <th>Title</th>
              <th>Authors</th>
              <th>Affiliations</th>
              <th>Link</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>
  </section>
  <div class="attribution">
    <p>
      Initiated by the <a href="https://github.com/OpenBMB/ChatDev" target="_blank">ChatDev</a> Group, Tsinghua
      University
      <br>Contact us via <a href="mailto:qianc62@gmail.com">qianc62@gmail.com</a>
    </p>
  </div>
  <script>
    $(document).ready(function () {
      var keyword = "Simulation";
      Papa.parse("papers.csv", {
        download: true,
        header: true,
        complete: function (results) {
          var data = results.data;
          var filteredData = data
            .filter(function (row) {
              return row.AwesomeListCategory && row.AwesomeListCategory === keyword;
            })
            .map(function (row, index) {
              row.originalIndex = index;
              return row;
            });
          $('#paperTable').DataTable({
            data: filteredData,
            order: [], 
            columns: [
              { "data": "Title" },
              { "data": "Authors" },
              { "data": "Affiliation" },
              { "data": "Url", "render": function (data) { return `<a href="${data}">Link</a>`; } },
              { "data": "Date" },
            ],
            rowCallback: function (row, data, index) {
              $(row).attr('data-original-index', data.originalIndex);
            }
          });
        }
      });
    });
  </script>
</body>
</html>

/home/brandon/Projects/ChatDev/MultiAgentEbook/book_communication/script.js

document.addEventListener("DOMContentLoaded", function() {
    const csvFilePath = './book_communication/data.csv';
    function loadCSV(filePath) {
        return fetch(filePath)
            .then(response => response.text())
            .then(text => Papa.parse(text, { header: true }).data);
    }
    function createFlipBook(pages) {
        const container = document.getElementById('flip_book_container');
        const numPages = pages.length;
        let flipBookHTML = '';
        let style = document.createElement('style');
        let css = '';
        flipBookHTML += `<input type="checkbox" id="cover_checkbox">\n`;
        for (let i = 0; i < numPages - 1; i++) {
            flipBookHTML += `<input type="checkbox" id="page${i + 1}_checkbox">\n`;
        }
        flipBookHTML += `<div id="flip_book">\n`;
        flipBookHTML += `<div class="front_cover">
        <label for="cover_checkbox" id="cover">
            <img src="./images/1.png" alt="Book Cover" class="cover_image">
        </label>
        </div>`
        for (let i = 0; i < numPages - 1; i++) {
            console.log(i)
            const page = pages[i];
            const pageIndex = i + 1;
            flipBookHTML += `
            <div class="page" id="page${pageIndex}">
                <div class="front_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="back_content" src="${page.image_path}" alt="Back content">
                </div>
                <div class="back_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="edge_shading" src="./images/back_page_edge_shading.png" alt="Back page edge shading">
                    <div class="text_content">
                        <h1>${page.title}</h1>
                        <p class="author">${page.author}</p>
                        <p class="author">${page.affiliation}</p>
                        <div class="text_content_summary"><p class="summary">${page.summary}</p></div>
                    </div>
                </div>
            </div>\n`;
            css += `
            #page${pageIndex} {
                z-index: ${numPages - i};
            }
            #page${pageIndex}_checkbox:checked~#flip_book #page${pageIndex} {
                transform: rotateY(-180deg);
                z-index: ${i + 1};
            }\n`;
        }
        flipBookHTML += `<div class="back_cover">
        <img src="./images/1a.png" alt="Back Cover" class="cover_image">
        </div>`;
        container.innerHTML = flipBookHTML;
        style.innerHTML = css;
        document.head.appendChild(style);
        const md = window.markdownit();
        const summaryElements = document.querySelectorAll('.summary');
        summaryElements.forEach(el => {
            el.innerHTML = md.render(el.textContent);
        });
    }
    loadCSV(csvFilePath).then(pages => {
        createFlipBook(pages);
    });
});


/home/brandon/Projects/ChatDev/MultiAgentEbook/book_evolution/script.js

document.addEventListener("DOMContentLoaded", function() {
    const csvFilePath = './book_evolution/data.csv';
    function loadCSV(filePath) {
        return fetch(filePath)
            .then(response => response.text())
            .then(text => Papa.parse(text, { header: true }).data);
    }
    function createFlipBook(pages) {
        const container = document.getElementById('flip_book_container');
        const numPages = pages.length;
        let flipBookHTML = '';
        let style = document.createElement('style');
        let css = '';
        flipBookHTML += `<input type="checkbox" id="cover_checkbox">\n`;
        for (let i = 0; i < numPages - 1; i++) {
            flipBookHTML += `<input type="checkbox" id="page${i + 1}_checkbox">\n`;
        }
        flipBookHTML += `<div id="flip_book">\n`;
        flipBookHTML += `<div class="front_cover">
        <label for="cover_checkbox" id="cover">
            <img src="./images/3.png" alt="Book Cover" class="cover_image">
        </label>
        </div>`
        for (let i = 0; i < numPages - 1; i++) {
            console.log(i)
            const page = pages[i];
            const pageIndex = i + 1;
            flipBookHTML += `
            <div class="page" id="page${pageIndex}">
                <div class="front_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="back_content" src="${page.image_path}" alt="Back content">
                </div>
                <div class="back_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="edge_shading" src="./images/back_page_edge_shading.png" alt="Back page edge shading">
                    <div class="text_content">
                        <h1>${page.title}</h1>
                        <p class="author">${page.author}</p>
                        <p class="author">${page.affiliation}</p>
                        <div class="text_content_summary"><p class="summary">${page.summary}</p></div>
                    </div>
                </div>
            </div>\n`;
            css += `
            #page${pageIndex} {
                z-index: ${numPages - i};
            }
            #page${pageIndex}_checkbox:checked~#flip_book #page${pageIndex} {
                transform: rotateY(-180deg);
                z-index: ${i + 1};
            }\n`;
        }
        flipBookHTML += `<div class="back_cover">
        <img src="./images/3a.png" alt="Back Cover" class="cover_image">
        </div>`;
        container.innerHTML = flipBookHTML;
        style.innerHTML = css;
        document.head.appendChild(style);
        const md = window.markdownit();
        const summaryElements = document.querySelectorAll('.summary');
        summaryElements.forEach(el => {
            el.innerHTML = md.render(el.textContent);
        });
    }
    loadCSV(csvFilePath).then(pages => {
        createFlipBook(pages);
    });
});


/home/brandon/Projects/ChatDev/MultiAgentEbook/book_simulation/script.js

document.addEventListener("DOMContentLoaded", function() {
    const csvFilePath = './book_simulation/data.csv';
    function loadCSV(filePath) {
        return fetch(filePath)
            .then(response => response.text())
            .then(text => Papa.parse(text, { header: true }).data);
    }
    function createFlipBook(pages) {
        const container = document.getElementById('flip_book_container');
        const numPages = pages.length;
        let flipBookHTML = '';
        let style = document.createElement('style');
        let css = '';
        flipBookHTML += `<input type="checkbox" id="cover_checkbox">\n`;
        for (let i = 0; i < numPages - 1; i++) {
            flipBookHTML += `<input type="checkbox" id="page${i + 1}_checkbox">\n`;
        }
        flipBookHTML += `<div id="flip_book">\n`;
        flipBookHTML += `<div class="front_cover">
        <label for="cover_checkbox" id="cover">
            <img src="./images/4.png" alt="Book Cover" class="cover_image">
        </label>
        </div>`
        for (let i = 0; i < numPages - 1; i++) {
            console.log(i)
            const page = pages[i];
            const pageIndex = i + 1;
            flipBookHTML += `
            <div class="page" id="page${pageIndex}">
                <div class="front_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="back_content" src="${page.image_path}" alt="Back content">
                </div>
                <div class="back_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="edge_shading" src="./images/back_page_edge_shading.png" alt="Back page edge shading">
                    <div class="text_content">
                        <h1>${page.title}</h1>
                        <p class="author">${page.author}</p>
                        <p class="author">${page.affiliation}</p>
                        <div class="text_content_summary"><p class="summary">${page.summary}</p></div>
                    </div>
                </div>
            </div>\n`;
            css += `
            #page${pageIndex} {
                z-index: ${numPages - i};
            }
            #page${pageIndex}_checkbox:checked~#flip_book #page${pageIndex} {
                transform: rotateY(-180deg);
                z-index: ${i + 1};
            }\n`;
        }
        flipBookHTML += `<div class="back_cover">
        <img src="./images/4a.png" alt="Back Cover" class="cover_image">
        </div>`;
        container.innerHTML = flipBookHTML;
        style.innerHTML = css;
        document.head.appendChild(style);
        const md = window.markdownit();
        const summaryElements = document.querySelectorAll('.summary');
        summaryElements.forEach(el => {
            el.innerHTML = md.render(el.textContent);
        });
    }
    loadCSV(csvFilePath).then(pages => {
        createFlipBook(pages);
    });
});


/home/brandon/Projects/ChatDev/MultiAgentEbook/book_organization/script.js

document.addEventListener("DOMContentLoaded", function() {
    const csvFilePath = './book_organization/data.csv';
    function loadCSV(filePath) {
        return fetch(filePath)
            .then(response => response.text())
            .then(text => Papa.parse(text, { header: true }).data);
    }
    function createFlipBook(pages) {
        const container = document.getElementById('flip_book_container');
        const numPages = pages.length;
        let flipBookHTML = '';
        let style = document.createElement('style');
        let css = '';
        flipBookHTML += `<input type="checkbox" id="cover_checkbox">\n`;
        for (let i = 0; i < numPages - 1; i++) {
            flipBookHTML += `<input type="checkbox" id="page${i + 1}_checkbox">\n`;
        }
        flipBookHTML += `<div id="flip_book">\n`;
        flipBookHTML += `<div class="front_cover">
        <label for="cover_checkbox" id="cover">
            <img src="./images/2.png" alt="Book Cover" class="cover_image">
        </label>
        </div>`
        for (let i = 0; i < numPages - 1; i++) {
            console.log(i)
            const page = pages[i];
            const pageIndex = i + 1;
            flipBookHTML += `
            <div class="page" id="page${pageIndex}">
                <div class="front_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="back_content" src="${page.image_path}" alt="Back content">
                </div>
                <div class="back_page">
                    <label for="page${pageIndex}_checkbox"></label>
                    <img class="edge_shading" src="./images/back_page_edge_shading.png" alt="Back page edge shading">
                    <div class="text_content">
                        <h1>${page.title}</h1>
                        <p class="author">${page.author}</p>
                        <p class="author">${page.affiliation}</p>
                        <div class="text_content_summary"><p class="summary">${page.summary}</p></div>
                    </div>
                </div>
            </div>\n`;
            css += `
            #page${pageIndex} {
                z-index: ${numPages - i};
            }
            #page${pageIndex}_checkbox:checked~#flip_book #page${pageIndex} {
                transform: rotateY(-180deg);
                z-index: ${i + 1};
            }\n`;
        }
        flipBookHTML += `<div class="back_cover">
        <img src="./images/2a.png" alt="Back Cover" class="cover_image">
        </div>`;
        container.innerHTML = flipBookHTML;
        style.innerHTML = css;
        document.head.appendChild(style);
        const md = window.markdownit();
        const summaryElements = document.querySelectorAll('.summary');
        summaryElements.forEach(el => {
            el.innerHTML = md.render(el.textContent);
        });
    }
    loadCSV(csvFilePath).then(pages => {
        createFlipBook(pages);
    });
});


/home/brandon/Projects/ChatDev/WareHouse/mspaint_THUNLP_20230821204606/main.py

'''
This is the main file that runs the MS Paint application.
'''
from paint_app import PaintApp
def main():
    paint_app = PaintApp()
    paint_app.run()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/mspaint_THUNLP_20230821204606/paint_app.py

'''
This file contains the PaintApp class which represents the MS Paint application.
'''
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
class PaintApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("MS Paint")
        self.canvas = tk.Canvas(self.root, width=800, height=600, bg="white")
        self.canvas.pack()
        self.current_tool = "pencil"
        self.current_color = "black"
        self.shapes = []
        self.create_menu()
        self.create_toolbar()
        self.canvas.bind("<Button-1>", self.start_drawing)
        self.canvas.bind("<ButtonRelease-1>", self.stop_drawing)
    def run(self):
        self.root.mainloop()
    def create_menu(self):
        menu_bar = tk.Menu(self.root)
        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Open", command=self.open_file)
        file_menu.add_command(label="Save", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        menu_bar.add_cascade(label="File", menu=file_menu)
        self.root.config(menu=menu_bar)
    def create_toolbar(self):
        toolbar = tk.Frame(self.root)
        pencil_button = tk.Button(toolbar, text="Pencil", command=self.set_pencil_tool)
        pencil_button.pack(side=tk.LEFT)
        brush_button = tk.Button(toolbar, text="Brush", command=self.set_brush_tool)
        brush_button.pack(side=tk.LEFT)
        shape_button = tk.Button(toolbar, text="Shape", command=self.set_shape_tool)
        shape_button.pack(side=tk.LEFT)
        color_label = tk.Label(toolbar, text="Color:")
        color_label.pack(side=tk.LEFT)
        color_button = tk.Button(toolbar, text="Select Color", command=self.select_color)
        color_button.pack(side=tk.LEFT)
        toolbar.pack(side=tk.TOP, fill=tk.X)
    def set_pencil_tool(self):
        self.current_tool = "pencil"
    def set_brush_tool(self):
        self.current_tool = "brush"
    def set_shape_tool(self):
        self.current_tool = "shape"
    def select_color(self):
        self.current_color = tk.colorchooser.askcolor()[1]
    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
        if file_path:
            pass
    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG", "*.png")])
        if file_path:
            pass
    def draw(self, event):
        if self.current_tool == "pencil":
            self.canvas.create_line(event.x, event.y, event.x + 1, event.y + 1, fill=self.current_color, width=1)
        elif self.current_tool == "brush":
            self.canvas.create_oval(event.x - 5, event.y - 5, event.x + 5, event.y + 5, fill=self.current_color, outline=self.current_color)
        elif self.current_tool == "shape":
            self.canvas.create_rectangle(event.x, event.y, event.x + 50, event.y + 50, fill=self.current_color, outline=self.current_color)
    def start_drawing(self, event):
        self.canvas.bind("<B1-Motion>", self.draw)
    def stop_drawing(self, event):
        self.canvas.unbind("<B1-Motion>")
    def clear_canvas(self):
        self.canvas.delete("all")
        self.shapes = []
    def show_error_message(self, message):
        messagebox.showerror("Error", message)

/home/brandon/Projects/ChatDev/WareHouse/MazeGenerator_THUNLP_20230825093601/main.py

'''
This is the main file of the maze generator application.
'''
import tkinter as tk
import random
from maze import Maze
class MazeGeneratorApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Maze Generator")
        self.canvas = tk.Canvas(self.master, width=500, height=500)
        self.canvas.pack()
        self.generate_button = tk.Button(self.master, text="Generate Maze", command=self.generate_maze)
        self.generate_button.pack()
        self.maze = None
    def generate_maze(self):
        self.canvas.delete("all")
        self.maze = Maze(20, 20)
        self.maze.generate()
        cell_size = 20
        start_row = random.randint(0, self.maze.rows - 1)
        start_col = random.randint(0, self.maze.cols - 1)
        end_row = random.randint(0, self.maze.rows - 1)
        end_col = random.randint(0, self.maze.cols - 1)
        for row in range(self.maze.rows):
            for col in range(self.maze.cols):
                x1 = col * cell_size
                y1 = row * cell_size
                x2 = x1 + cell_size
                y2 = y1 + cell_size
                if self.maze.grid[row][col].walls["top"]:
                    self.canvas.create_line(x1, y1, x2, y1)
                if self.maze.grid[row][col].walls["right"]:
                    self.canvas.create_line(x2, y1, x2, y2)
                if self.maze.grid[row][col].walls["bottom"]:
                    self.canvas.create_line(x1, y2, x2, y2)
                if self.maze.grid[row][col].walls["left"]:
                    self.canvas.create_line(x1, y1, x1, y2)
                if row == start_row and col == start_col:
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="green")
                if row == end_row and col == end_col:
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="red")
root = tk.Tk()
app = MazeGeneratorApp(root)
root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/MazeGenerator_THUNLP_20230825093601/maze.py

'''
This file contains the Maze class that represents the maze.
'''
import random
import tkinter as tk
class Cell:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.visited = False
        self.walls = {
            "top": True,
            "right": True,
            "bottom": True,
            "left": True
        }
class Maze:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.grid = [[Cell(row, col) for col in range(cols)] for row in range(rows)]
    def generate(self):
        stack = []
        current = self.grid[0][0]
        current.visited = True
        while True:
            neighbors = self.get_unvisited_neighbors(current)
            if len(neighbors) > 0:
                neighbor = random.choice(neighbors)
                stack.append(current)
                self.remove_walls(current, neighbor)
                current = neighbor
                current.visited = True
            elif len(stack) > 0:
                current = stack.pop()
            else:
                break
    def get_unvisited_neighbors(self, cell):
        neighbors = []
        if cell.row > 0 and not self.grid[cell.row - 1][cell.col].visited:
            neighbors.append(self.grid[cell.row - 1][cell.col])
        if cell.col < self.cols - 1 and not self.grid[cell.row][cell.col + 1].visited:
            neighbors.append(self.grid[cell.row][cell.col + 1])
        if cell.row < self.rows - 1 and not self.grid[cell.row + 1][cell.col].visited:
            neighbors.append(self.grid[cell.row + 1][cell.col])
        if cell.col > 0 and not self.grid[cell.row][cell.col - 1].visited:
            neighbors.append(self.grid[cell.row][cell.col - 1])
        return neighbors
    def remove_walls(self, current, neighbor):
        if current.row > neighbor.row:
            current.walls["top"] = False
            neighbor.walls["bottom"] = False
        elif current.col < neighbor.col:
            current.walls["right"] = False
            neighbor.walls["left"] = False
        elif current.row < neighbor.row:
            current.walls["bottom"] = False
            neighbor.walls["top"] = False
        elif current.col > neighbor.col:
            current.walls["left"] = False
            neighbor.walls["right"] = False

/home/brandon/Projects/ChatDev/WareHouse/DiceRollingSimulator_THUNLP_20230825072338/dice.py

import random
class Dice:
    def __init__(self, num_sides):
        self.num_sides = num_sides
    def roll(self):
        return random.randint(1, self.num_sides)

/home/brandon/Projects/ChatDev/WareHouse/DiceRollingSimulator_THUNLP_20230825072338/main.py

import tkinter as tk
from dice import Dice
class DiceRollerApp:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Dice Roller")
        self.label = tk.Label(self.window, text="Enter the number of sides on the dice:")
        self.label.pack()
        self.entry = tk.Entry(self.window)
        self.entry.pack()
        self.button = tk.Button(self.window, text="Roll Dice", command=self.roll_dice)
        self.button.pack()
        self.result_label = tk.Label(self.window, text="")
        self.result_label.pack()
        self.dice = None
    def roll_dice(self):
        num_sides = self.entry.get()
        try:
            num_sides = int(num_sides)
        except ValueError:
            self.result_label.config(text="Invalid input. Please enter a valid number of sides.")
            return
        if num_sides <= 0:
            self.result_label.config(text="Number of sides must be a positive integer.")
            return
        self.dice = Dice(num_sides)
        roll_result = self.dice.roll()
        self.result_label.config(text=f"The dice rolled: {roll_result}")
    def run(self):
        self.window.mainloop()
if __name__ == "__main__":
    app = DiceRollerApp()
    app.run()

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/image_finder.py

'''
This file contains the ImageFinder class which is responsible for finding an image related to the article.
'''
import requests
from bs4 import BeautifulSoup
class ImageFinder:
    def __init__(self, article):
        self.article = article
    def find_image(self):
        query = self.article.split(' ')[0]          url = f"https://www.google.com/search?q={query}&tbm=isch"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        image_url = soup.find('img')['src']
        return image_url

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/article_processor.py

'''
This file contains the ArticleProcessor class which is responsible for processing the article.
'''
from markdown_maker import MarkdownMaker
from image_finder import ImageFinder
class ArticleProcessor:
    def __init__(self, article):
        self.article = article
    def process_article(self):
        finder = ImageFinder(self.article)
        image_url = finder.find_image()
        maker = MarkdownMaker(self.article, image_url)
        markdown = maker.create_markdown()
        return markdown

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/main.py

'''
This is the main file that will run our application.
'''
from flask import Flask, render_template, request
from article_processor import ArticleProcessor
app = Flask(__name__)
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        article = request.form['article']
        processor = ArticleProcessor(article)
        markdown = processor.process_article()
        return render_template('result.html', markdown=markdown)
    return render_template('index.html')
if __name__ == "__main__":
    try:
        app.run(debug=True)
    except ImportError:
        print("Error: The watchdog library is not installed. Please install it by running 'pip install watchdog' in your terminal.")

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/markdown_maker.py

'''
This file contains the MarkdownMaker class which is responsible for creating the markdown.
'''
import markdown
class MarkdownMaker:
    def __init__(self, article, image_url):
        self.article = article
        self.image_url = image_url
    def create_markdown(self):
        md = markdown.Markdown()
        md_article = md.convert(self.article)
        md_image = f"![Image]({self.image_url})"
        md_article = md_article.replace("\n", "\n\n" + md_image + "\n\n", 1)
        with open('output.md', 'w') as file:
            file.write(md_article)

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/templates/index.html

'''
This is the main page where the user can input their article.
'''
<!DOCTYPE html>
<html>
<head>
    <title>Article Processor</title>
</head>
<body>
    <form method="POST">
        <textarea name="article" required></textarea>
        <button type="submit">Process Article</button>
    </form>
</body>
</html>

/home/brandon/Projects/ChatDev/WareHouse/Article_pic_DefaultOrganization_20231023003059/templates/result.html

'''
This page displays the processed article in markdown format.
'''
<!DOCTYPE html>
<html>
<head>
    <title>Processed Article</title>
</head>
<body>
    <pre>{{ markdown }}</pre>
</body>
</html>

/home/brandon/Projects/ChatDev/WareHouse/LifeSimulator_v2_ModelBest1024_20231026164236/main.py

'''
This is the main file for the Life Restart Simulator application.
'''
import tkinter as tk
from tkinter import messagebox
from simulator import Simulator
import random
import sys
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Life Restart Simulator")
        self.simulator = Simulator()
        self.age_label = tk.Label(self, text="\n\n      欢迎,你来到了 5岁 的时候~      \n\n")
        self.age_label.pack()
        self.money_label = tk.Label(self, text="\n\n      你现在身上有 $1000      \n      点击GoOn开始模拟人生      \n\n")
        self.money_label.pack()
        self.go_on_button = tk.Button(self, text="Go On", command=self.go_on)
        self.go_on_button.pack()
    def go_on(self):
        age, money, event = self.simulator.go_on()
        message = ''
        if event == 'earn_money':
            message = random.choice(["你遇到幸运的事情大赚了一笔!!", "你升职加薪,财富增加!!", "你突然中了彩票"])
        elif event == 'lose_money':
            message = random.choice(["你遇到难受的事情财富减少...", "你回家路上不小心丢了一大笔钱..."])
        elif event == 'sick':
            message = random.choice(["你生了一场大病, 财产减少..."])
        self.age_label.config(text=f"\n\n      你现在来到了: {age} 岁      \n      {message}      \n")
        self.money_label.config(text=f"\n\n      你现在拥有的财富是: ${money}      \n\n")
        if event == "death":
            self.go_on_button.config(state=tk.DISABLED)
            messagebox.showinfo("Game Over", f"你一直活到 {age} 岁, 你积攒的财富有 ${money}.")
            sys.exit()
if __name__ == "__main__":
    app = Application()
    app.mainloop()


/home/brandon/Projects/ChatDev/WareHouse/LifeSimulator_v2_ModelBest1024_20231026164236/simulator.py

'''
This file contains the Simulator class which handles the simulation logic.
'''
import random
class Simulator:
    def __init__(self):
        self.age = 5
        self.money = 1000
    def go_on(self):
        n = random.randint(1, 10)
        self.age += n
        event = random.choice(["earn_money", "yes", "good", "lose_money", "death"])
        if event in ("earn_money", "yes", "good"):
            earned_money = random.randint(1, 100000)
            self.money += earned_money
        elif event == "lose_money":
            lost_money = random.randint(1, 100000)
            self.money -= lost_money
        elif event == "death":
            restart = random.randint(-1, 10)
            if restart > 0:
                self.money -= random.randint(1, 100000)
                event = "sick"
        return self.age, self.money, event

/home/brandon/Projects/ChatDev/WareHouse/QRCodeGenerator_THUNLP_20231015214731/main.py

'''
This is the main file that contains the user interface and orchestrates the generation of QR codes.
'''
import tkinter as tk
from tkinter import filedialog, messagebox
import qrcode
class QRCodeGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("QR Code Generator")
        self.data_label = tk.Label(root, text="Enter data or text:")
        self.data_label.pack()
        self.data_entry = tk.Entry(root)
        self.data_entry.pack()
        self.file_label = tk.Label(root, text="Choose file name and format:")
        self.file_label.pack()
        self.file_entry = tk.Entry(root)
        self.file_entry.pack()
        self.file_button = tk.Button(root, text="Choose File", command=self.choose_file)
        self.file_button.pack()
        self.generate_button = tk.Button(root, text="Generate QR Code", command=self.generate_qr_code)
        self.generate_button.pack()
    def choose_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".png")
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(0, file_path)
    def generate_qr_code(self):
        data = self.data_entry.get()
        file_path = self.file_entry.get()
        if data and file_path:
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(data)
            qr.make(fit=True)
            qr_img = qr.make_image(fill="black", back_color="white")
            qr_img.save(file_path)
            messagebox.showinfo("Success", "QR Code generated and saved successfully!")
        else:
            messagebox.showerror("Error", "Please enter data and choose a file name.")
root = tk.Tk()
app = QRCodeGenerator(root)
root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/QRCodeGenerator_THUNLP_20231015214731/qrcode_generator.py

'''
This file contains the QRCodeGenerator class responsible for generating QR codes.
'''
import qrcode
class QRCodeGenerator:
    def __init__(self, data):
        self.data = data
    def generate_qr_code(self, file_path):
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(self.data)
        qr.make(fit=True)
        qr_img = qr.make_image(fill="black", back_color="white")
        qr_img.save(file_path)

/home/brandon/Projects/ChatDev/WareHouse/SpriteMaker_THUNLP_20230825072337/toolbar.py

'''
Toolbar
This class represents the toolbar with various tools for coloring, shading, and creating animation frames.
'''
import tkinter as tk
class Toolbar(tk.Frame):
    def __init__(self, parent, canvas):
        super().__init__(parent)
        self.canvas = canvas
        self.color_picker = tk.Button(self, text="Color Picker", command=self.pick_color)
        self.color_picker.pack()
        self.zoom_in_button = tk.Button(self, text="Zoom In", command=self.canvas.zoom_in)
        self.zoom_in_button.pack()
        self.zoom_out_button = tk.Button(self, text="Zoom Out", command=self.canvas.zoom_out)
        self.zoom_out_button.pack()
    def pick_color(self):
        color = tk.colorchooser.askcolor()[1]
        self.canvas.itemconfig(tk.ALL, fill=color)

/home/brandon/Projects/ChatDev/WareHouse/SpriteMaker_THUNLP_20230825072337/main.py

'''
Pixel Art Editor
This is the main file for the pixel art editor application. It initializes the GUI and starts the application.
'''
import tkinter as tk
from editor import Editor
def main():
    root = tk.Tk()
    editor = Editor(root)
    root.mainloop()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/SpriteMaker_THUNLP_20230825072337/canvas.py

'''
Canvas
This class represents the canvas where the user can draw and edit sprites pixel by pixel.
'''
import tkinter as tk
class Canvas(tk.Canvas):
    def __init__(self, parent):
        super().__init__(parent, bg="white", bd=0, highlightthickness=0)
        self.bind("<Button-1>", self.on_click)
        self.bind("<B1-Motion>", self.on_drag)
        self.zoom = 1.0
        self.pixel_size = 10
        self.pixels = {}
    def on_click(self, event):
        x, y = self.get_pixel_coordinates(event.x, event.y)
        self.pixels[(x, y)] = "black"
        self.draw_pixel(x, y)
    def on_drag(self, event):
        x, y = self.get_pixel_coordinates(event.x, event.y)
        self.pixels[(x, y)] = "black"
        self.draw_pixel(x, y)
    def get_pixel_coordinates(self, x, y):
        x = int(x / (self.pixel_size * self.zoom))
        y = int(y / (self.pixel_size * self.zoom))
        return x, y
    def draw_pixel(self, x, y):
        x1 = x * self.pixel_size * self.zoom
        y1 = y * self.pixel_size * self.zoom
        x2 = x1 + self.pixel_size * self.zoom
        y2 = y1 + self.pixel_size * self.zoom
        self.create_rectangle(x1, y1, x2, y2, fill="black")
    def zoom_in(self):
        self.zoom *= 2.0
        self.redraw_pixels()
    def zoom_out(self):
        self.zoom /= 2.0
        self.redraw_pixels()
    def redraw_pixels(self):
        self.delete("all")
        for (x, y), color in self.pixels.items():
            self.draw_pixel(x, y)

/home/brandon/Projects/ChatDev/WareHouse/SpriteMaker_THUNLP_20230825072337/editor.py

'''
Editor
This class represents the pixel art editor. It contains the GUI elements and handles user interactions.
'''
import tkinter as tk
from canvas import Canvas
from toolbar import Toolbar
class Editor:
    def __init__(self, root):
        self.root = root
        self.root.title("Pixel Art Editor")
        self.canvas = Canvas(self.root)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.toolbar = Toolbar(self.root, self.canvas)
        self.toolbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.bind("<Configure>", self.on_canvas_resize)
    def on_canvas_resize(self, event):
        self.canvas.redraw_pixels()

/home/brandon/Projects/ChatDev/WareHouse/WaterBreakv2_ModelBest1024_20231026175200/schedule.py

'''
This file contains the logic for generating the schedule of water breaks.
'''
from datetime import timedelta
def generate_schedule(start_time, end_time, interval):
    schedule = []
    current_time = start_time
    while current_time < end_time:
        schedule.append(current_time)
        current_time += timedelta(minutes=interval)
    return schedule

/home/brandon/Projects/ChatDev/WareHouse/WaterBreakv2_ModelBest1024_20231026175200/main.py

'''
This is the main file of the application.
'''
import tkinter as tk
from datetime import datetime
from schedule import generate_schedule
from timer import CountdownTimer
def start_timer():
    start_time = datetime.strptime(start_entry.get(), "%H:%M")
    end_time = datetime.strptime(end_entry.get(), "%H:%M")
    interval = int(interval_entry.get())
    schedule = generate_schedule(start_time, end_time, interval)
    timer = CountdownTimer(schedule)
    timer_label.config(text="Next break in: ")
    timer.start()
window = tk.Tk()
window.title("Water Break Reminder")
start_label = tk.Label(window, text="Start Time (HH:MM): ")
start_label.pack()
start_entry = tk.Entry(window)
start_entry.pack()
end_label = tk.Label(window, text="End Time (HH:MM): ")
end_label.pack()
end_entry = tk.Entry(window)
end_entry.pack()
interval_label = tk.Label(window, text="Interval (minutes): ")
interval_label.pack()
interval_entry = tk.Entry(window)
interval_entry.pack()
start_button = tk.Button(window, text="Start Timer", command=start_timer)
start_button.pack()
timer_label = tk.Label(window, text="")
timer_label.pack()
window.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/WaterBreakv2_ModelBest1024_20231026175200/timer.py

'''
This file contains the countdown timer functionality.
'''
import tkinter as tk
from datetime import datetime, date
class CountdownTimer:
    def __init__(self, schedule):
        self.schedule = schedule
        self.current_index = 0
        self.remaining_time = 0
        self.timer_label = None
    def start(self):
        self.update_timer()
    def update_timer(self):
        now = datetime.now().time()
        current_break = self.schedule[self.current_index].time()
        if now >= current_break:
            self.current_index += 1
            if self.current_index >= len(self.schedule):
                self.timer_label.config(text="No more breaks scheduled.")
                return
            current_break = self.schedule[self.current_index].time()
        remaining_time = datetime.combine(datetime.today(), current_break) - datetime.combine(datetime.today(), now)
        self.remaining_time = remaining_time.total_seconds()
        if self.timer_label:
            self.timer_label.pack_forget()
        self.timer_label = tk.Label(text=f"Next break in: {remaining_time}")
        self.timer_label.pack()
        self.timer_label.after(1000, self.update_timer)

/home/brandon/Projects/ChatDev/WareHouse/PasswordGenerator_THUNLP_20230825072337/password_strength_checker.py

'''
This file contains the PasswordStrengthChecker class responsible for checking the strength of a password.
'''
class PasswordStrengthChecker:
    def __init__(self):
        self.common_passwords = ["password", "123456", "qwerty", "abc123", "admin"]
    def check_strength(self, password):
        if len(password) < 8:
            return "Weak"
        if password.lower() in self.common_passwords:
            return "Weak"
        return "Strong"

/home/brandon/Projects/ChatDev/WareHouse/PasswordGenerator_THUNLP_20230825072337/password_generator.py

'''
This file contains the PasswordGenerator class responsible for generating random passwords.
'''
import random
import string
class PasswordGenerator:
    def __init__(self):
        self.uppercase_letters = string.ascii_uppercase
        self.lowercase_letters = string.ascii_lowercase
        self.numbers = string.digits
        self.special_chars = string.punctuation
    def generate_passwords(self, length, complexity, excluded_chars, num_passwords):
        passwords = []
        for _ in range(num_passwords):
            password = self.generate_password(length, complexity, excluded_chars)
            passwords.append(password)
        return passwords
    def generate_password(self, length, complexity, excluded_chars):
        chars = ""
        password = ""
        if "uppercase" in complexity:
            chars += self.uppercase_letters
            password += random.choice(self.uppercase_letters)
        if "lowercase" in complexity:
            chars += self.lowercase_letters
            password += random.choice(self.lowercase_letters)
        if "numbers" in complexity:
            chars += self.numbers
            password += random.choice(self.numbers)
        if "special_chars" in complexity:
            chars += self.special_chars
            password += random.choice(self.special_chars)
        chars = self.remove_excluded_chars(chars, excluded_chars)
        remaining_length = length - len(password)
        if remaining_length > 0:
            password += "".join(random.choice(chars) for _ in range(remaining_length))
        return password
    def remove_excluded_chars(self, chars, excluded_chars):
        for char in excluded_chars:
            chars = chars.replace(char, "")
        return chars

/home/brandon/Projects/ChatDev/WareHouse/PasswordGenerator_THUNLP_20230825072337/main.py

'''
This is the main file for the random password generator app.
'''
import tkinter as tk
from tkinter import messagebox
import string
import random
from password_generator import PasswordGenerator
from password_strength_checker import PasswordStrengthChecker
class RandomPasswordGeneratorApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Random Password Generator")
        self.password_generator = PasswordGenerator()
        self.password_strength_checker = PasswordStrengthChecker()
        self.create_widgets()
    def create_widgets(self):
        length_label = tk.Label(self.root, text="Password Length:")
        length_label.pack()
        self.length_entry = tk.Entry(self.root)
        self.length_entry.pack()
        complexity_label = tk.Label(self.root, text="Password Complexity:")
        complexity_label.pack()
        self.uppercase_var = tk.IntVar()
        self.uppercase_checkbutton = tk.Checkbutton(self.root, text="Uppercase Letters", variable=self.uppercase_var)
        self.uppercase_checkbutton.pack()
        self.lowercase_var = tk.IntVar()
        self.lowercase_checkbutton = tk.Checkbutton(self.root, text="Lowercase Letters", variable=self.lowercase_var)
        self.lowercase_checkbutton.pack()
        self.numbers_var = tk.IntVar()
        self.numbers_checkbutton = tk.Checkbutton(self.root, text="Numbers", variable=self.numbers_var)
        self.numbers_checkbutton.pack()
        self.special_chars_var = tk.IntVar()
        self.special_chars_checkbutton = tk.Checkbutton(self.root, text="Special Characters", variable=self.special_chars_var)
        self.special_chars_checkbutton.pack()
        excluded_chars_label = tk.Label(self.root, text="Excluded Characters:")
        excluded_chars_label.pack()
        self.excluded_chars_entry = tk.Entry(self.root)
        self.excluded_chars_entry.pack()
        num_passwords_label = tk.Label(self.root, text="Number of Passwords:")
        num_passwords_label.pack()
        self.num_passwords_entry = tk.Entry(self.root)
        self.num_passwords_entry.pack()
        generate_button = tk.Button(self.root, text="Generate Passwords", command=self.generate_passwords)
        generate_button.pack()
        generated_passwords_label = tk.Label(self.root, text="Generated Passwords:")
        generated_passwords_label.pack()
        self.generated_passwords_text = tk.Text(self.root)
        self.generated_passwords_text.pack()
        password_strength_label = tk.Label(self.root, text="Check Password Strength:")
        password_strength_label.pack()
        self.password_strength_entry = tk.Entry(self.root)
        self.password_strength_entry.pack()
        check_strength_button = tk.Button(self.root, text="Check Strength", command=self.check_strength)
        check_strength_button.pack()
    def generate_passwords(self):
        length = int(self.length_entry.get())
        complexity = []
        if self.uppercase_var.get():
            complexity.append("uppercase")
        if self.lowercase_var.get():
            complexity.append("lowercase")
        if self.numbers_var.get():
            complexity.append("numbers")
        if self.special_chars_var.get():
            complexity.append("special_chars")
        excluded_chars = self.excluded_chars_entry.get()
        num_passwords = int(self.num_passwords_entry.get())
        if length < len(complexity):
            messagebox.showerror("Invalid Input", "Password length should be greater than or equal to the complexity requirements.")
            return
        passwords = self.password_generator.generate_passwords(length, complexity, excluded_chars, num_passwords)
        self.generated_passwords_text.delete(1.0, tk.END)
        for password in passwords:
            self.generated_passwords_text.insert(tk.END, password + "\n")
    def check_strength(self):
        password = self.password_strength_entry.get()
        strength = self.password_strength_checker.check_strength(password)
        messagebox.showinfo("Password Strength", strength)
    def run(self):
        self.root.mainloop()
if __name__ == "__main__":
    app = RandomPasswordGeneratorApp()
    app.run()

/home/brandon/Projects/ChatDev/WareHouse/Gomoku_THUNLP_20230625201030/gui.py

'''
This file contains the GUI class for creating the graphical user interface for the gomoku game.
'''
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import messagebox
class GUI:
    def __init__(self, game):
        self.game = game
        self.black_chess_piece_image = None
        self.white_chess_piece_image = None
        self.background_image = None
        self.window = tk.Tk()
        self.window.title("Gomoku")
        self.window.geometry("600x600")
        self.load_images()
        self.create_board()
    def load_images(self):
        self.black_chess_piece_image = ImageTk.PhotoImage(Image.open("./black_chess_piece.png").resize((50, 50)))
        self.white_chess_piece_image = ImageTk.PhotoImage(Image.open("./white_chess_piece.png").resize((50, 50)))
        self.background_image = ImageTk.PhotoImage(Image.open("./background.png").resize((600, 600)))
    def create_board(self):
        self.board_frame = tk.Frame(self.window)
        self.board_frame.pack()
        self.buttons = []
        for row in range(15):
            row_buttons = []
            for col in range(15):
                button = tk.Button(self.board_frame, width=50, height=50, image=self.background_image,
                                   command=lambda r=row, c=col: self.make_move(r, c))
                button.grid(row=row, column=col)
                row_buttons.append(button)
            self.buttons.append(row_buttons)
        self.update_board_gui()
    def make_move(self, row, col):
        self.game.make_move(row, col)
        self.update_board_gui()
        if self.game.game_over:
            if self.game.is_board_full():
                self.show_game_over_message("It's a draw!")
            else:
                self.show_game_over_message(f"Player {3 - self.game.current_player} wins!")
    def show_game_over_message(self, result):
        messagebox.showinfo("Game Over", result)
    def update_board_gui(self):
        for row in range(15):
            for col in range(15):
                if self.game.board[row][col] == 1:
                    self.buttons[row][col].config(image=self.black_chess_piece_image, state=tk.DISABLED)
                elif self.game.board[row][col] == 2:
                    self.buttons[row][col].config(image=self.white_chess_piece_image, state=tk.DISABLED)
    def run(self):
        self.window.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Gomoku_THUNLP_20230625201030/main.py

'''
This is the main file for the gomoku game.
'''
from game import Game
from gui import GUI
def main():
    game = Game()
    gui = GUI(game)
    gui.run()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Gomoku_THUNLP_20230625201030/game.py

'''
This file contains the Game class for managing the gomoku game logic.
'''
class Game:
    def __init__(self):
        self.board = [[0] * 15 for _ in range(15)]
        self.current_player = 1
        self.game_over = False
    def make_move(self, row, col):
        if self.board[row][col] != 0 or self.game_over:
            return
        self.board[row][col] = self.current_player
        if self.check_win(row, col):
            self.game_over = True
        elif self.is_board_full():
            self.game_over = True
        self.current_player = 3 - self.current_player
    def check_win(self, row, col):
        count = 1
        for i in range(1, 5):
            if col - i >= 0 and self.board[row][col - i] == self.current_player:
                count += 1
            else:
                break
        for i in range(1, 5):
            if col + i < 15 and self.board[row][col + i] == self.current_player:
                count += 1
            else:
                break
        if count >= 5:
            return True
        count = 1
        for i in range(1, 5):
            if row - i >= 0 and self.board[row - i][col] == self.current_player:
                count += 1
            else:
                break
        for i in range(1, 5):
            if row + i < 15 and self.board[row + i][col] == self.current_player:
                count += 1
            else:
                break
        if count >= 5:
            return True
        count = 1
        for i in range(1, 5):
            if row - i >= 0 and col - i >= 0 and self.board[row - i][col - i] == self.current_player:
                count += 1
            else:
                break
        for i in range(1, 5):
            if row + i < 15 and col + i < 15 and self.board[row + i][col + i] == self.current_player:
                count += 1
            else:
                break
        if count >= 5:
            return True
        count = 1
        for i in range(1, 5):
            if row - i >= 0 and col + i < 15 and self.board[row - i][col + i] == self.current_player:
                count += 1
            else:
                break
        for i in range(1, 5):
            if row + i < 15 and col - i >= 0 and self.board[row + i][col - i] == self.current_player:
                count += 1
            else:
                break
        if count >= 5:
            return True
        return False
    def is_board_full(self):
        for row in self.board:
            if 0 in row:
                return False
        return True

/home/brandon/Projects/ChatDev/WareHouse/Red Packet Rain - thu - α/gamewindow.py

'''
This file contains the GameWindow class, which handles the creation and management of the game window.
'''
import pygame
class GameWindow:
    def __init__(self):
        self.width = 800
        self.height = 600
        self.window = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("Red Packet Rain")
    def update_window(self, images, scoreboard):
        self.window.fill((0, 0, 0))
        for image in images:
            self.window.blit(image.image, image.rect)
        self.window.blit(scoreboard.score_text, (10, 10))
        pygame.display.flip()

/home/brandon/Projects/ChatDev/WareHouse/Red Packet Rain - thu - α/scoreboard.py

'''
This file contains the Scoreboard class, which handles the game's scoreboard.
'''
import pygame
import random
class Scoreboard:
    def __init__(self):
        self.score = 0
        self.font = pygame.font.Font(None, 36)
        self.score_text = self.font.render('Score: ' + str(self.score), 1, (255, 255, 255))
    def update_score(self):
        self.score += random.randint(1, 6)
        self.score_text = self.font.render('Score: ' + str(self.score), 1, (255, 255, 255))
        if self.score >= 100:
            print("Congratulations! You have reached a score of 100!")

/home/brandon/Projects/ChatDev/WareHouse/Red Packet Rain - thu - α/main.py

import pygame
from gamewindow import GameWindow
from image import Image
from scoreboard import Scoreboard
from image import select_file
import time
def main():
    pygame.init()
    clock = pygame.time.Clock()
    game_window = GameWindow()
    file_path = select_file()
    images = [Image(file_path) for _ in range(10)]
    scoreboard = Scoreboard()
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                for image in images:
                    if image.rect.collidepoint(event.pos):
                        scoreboard.update_score()
                        image.remove_image()
        for image in images:
            image.move_image()
        game_window.update_window(images, scoreboard)
        clock.tick(60)
    pygame.quit()
if __name__ == "__main__":
    main()


/home/brandon/Projects/ChatDev/WareHouse/Red Packet Rain - thu - α/image.py

import pygame
import tkinter as tk
from tkinter import filedialog
import random
class Image:
    def __init__(self, file_path):
        self.image = pygame.image.load(file_path)
        self.image = pygame.transform.scale(self.image, (50, 50))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, 750)          self.rect.y = random.randint(-100, 0)
    def move_image(self):
        self.rect.y += 3
        if self.rect.y > 600:
            self.rect.y = random.randint(-100, 0)
    def remove_image(self):
        self.rect.y = random.randint(-100, 0)
        self.rect.x = random.randint(0, 750)  def select_file():
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename()
    return file_path


/home/brandon/Projects/ChatDev/WareHouse/FaceWall_byq_ModelBest1024_20231025192523/main.py

'''
FaceWall - Memo Software for Company Employees
This is the main file of the FaceWall software. It initializes the application and sets up the graphical user interface.
'''
import tkinter as tk
from task_list import TaskList
from brief_note import BriefNote
class FaceWallApp:
    def __init__(self, root):
        self.root = root
        self.root.title("FaceWall")
        self.task_list = TaskList(root)
        self.brief_note = BriefNote(root)
        self.task_list.pack()
        self.brief_note.pack()
if __name__ == "__main__":
    root = tk.Tk()
    app = FaceWallApp(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/FaceWall_byq_ModelBest1024_20231025192523/brief_note.py

import tkinter as tk
from tkinter import simpledialog
import os
class BriefNote(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.note_text = tk.Text(self, height=10, width=30)
        self.note_text.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        scrollbar = tk.Scrollbar(self)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.note_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.note_text.yview)
        self.file_listbox = tk.Listbox(self, height=10, width=20)
        self.file_listbox.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")
        self.load_saved_files()
        self.save_button = tk.Button(self, text="Save", command=self.save_note)
        self.save_button.grid(row=1, column=0, sticky="ew")
        self.open_button = tk.Button(self, text="Open", command=self.open_note)
        self.open_button.grid(row=1, column=1, sticky="ew")
        self.delete_button = tk.Button(self, text="Delete", command=self.delete_note)
        self.delete_button.grid(row=1, column=2, sticky="ew")
    def save_note(self):
        note = self.note_text.get(1.0, tk.END)
        if note.strip():
            file_name = self.get_user_file_name() 
            if file_name:
                file_path = os.path.join(os.path.dirname(__file__), file_name)
                with open(file_path, "w") as file:
                    file.write(note)
                self.note_text.delete(1.0, tk.END)                  self.load_saved_files()
                print("Note saved as:", file_name)
    def open_note(self):
        selected_file = self.file_listbox.curselection()
        if selected_file:
            file_name = self.file_listbox.get(selected_file)
            file_path = os.path.join(os.path.dirname(__file__), file_name)
            with open(file_path, "r") as file:
                note = file.read()
                self.note_text.delete(1.0, tk.END)
                self.note_text.insert(tk.END, note)
    def load_saved_files(self):
        file_names = [f for f in os.listdir(os.path.dirname(__file__)) if f.endswith(".txt") and (f != "meta.txt" and f != "requirements.txt")]
        self.file_listbox.delete(0, tk.END)
        for file_name in file_names:
            self.file_listbox.insert(tk.END, file_name)
    def get_user_file_name(self):
        user_file_name = tk.simpledialog.askstring("File Name", "Enter a file name (e.g., my_note):")
        if user_file_name:
            return user_file_name + '.txt'
    def delete_note(self):
        selected_file = self.file_listbox.curselection()
        if selected_file:
            file_name = self.file_listbox.get(selected_file)
            file_path = os.path.join(os.path.dirname(__file__), file_name)
            os.remove(file_path)              self.load_saved_files()  if __name__ == "__main__":
    root = tk.Tk()
    app = BriefNote(root)
    app.pack()
    root.mainloop()


/home/brandon/Projects/ChatDev/WareHouse/FaceWall_byq_ModelBest1024_20231025192523/task_list.py

'''
Task List Module
This module provides the task list functionality. Employees can add, edit, and mark tasks as completed.
'''
import tkinter as tk
class TaskList(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.tasks = []
        self.task_entry = tk.Entry(self)
        self.task_entry.pack()
        self.add_button = tk.Button(self, text="Add Task", command=self.add_task)
        self.add_button.pack()
        self.task_listbox = tk.Listbox(self)
        self.task_listbox.pack()
        self.edit_button = tk.Button(self, text="Edit Task", command=self.edit_task)
        self.edit_button.pack()
        self.delete_button = tk.Button(self, text="Delete Task", command=self.delete_task)
        self.delete_button.pack()
        self.complete_button = tk.Button(self, text="Mark as Completed", command=self.mark_completed)
        self.complete_button.pack()
    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.tasks.append(task)
            self.task_listbox.insert(tk.END, task)
            self.task_entry.delete(0, tk.END)
    def edit_task(self):
        selected_task = self.task_listbox.curselection()
        if selected_task:
            task = self.task_entry.get()
            if task:
                self.tasks[selected_task[0]] = task
                self.task_listbox.delete(selected_task)
                self.task_listbox.insert(selected_task, task)
                self.task_entry.delete(0, tk.END)
    def delete_task(self):
        selected_task = self.task_listbox.curselection()
        if selected_task:
            index = selected_task[0]
            self.tasks.pop(index)
            self.task_listbox.delete(selected_task)
    def mark_completed(self):
        selected_task = self.task_listbox.curselection()
        if selected_task:
            self.task_listbox.itemconfig(selected_task, fg="gray")

/home/brandon/Projects/ChatDev/WareHouse/ImgEditor_THUNLP_20230824142740/.py

main.py

/home/brandon/Projects/ChatDev/WareHouse/ImgEditor_THUNLP_20230824142740/main.py

'''
This is the main file for the image editor software.
'''
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageEnhance
import os as os_module
class ImageEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Editor")
        self.current_image = None
        self.original_image = None
        self.undo_stack = []
        self.redo_stack = []
        self.create_menu()
        self.create_toolbar()
        self.create_canvas()
    def create_menu(self):
        menu_bar = tk.Menu(self.root)
        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Open", command=self.open_image)
        file_menu.add_command(label="Save", command=self.save_image)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        menu_bar.add_cascade(label="File", menu=file_menu)
        edit_menu = tk.Menu(menu_bar, tearoff=0)
        edit_menu.add_command(label="Undo", command=self.undo)
        edit_menu.add_command(label="Redo", command=self.redo)
        menu_bar.add_cascade(label="Edit", menu=edit_menu)
        self.root.config(menu=menu_bar)
    def create_toolbar(self):
        toolbar = tk.Frame(self.root)
        crop_button = tk.Button(toolbar, text="Crop", command=self.crop_image)
        crop_button.pack(side=tk.LEFT, padx=5, pady=5)
        resize_button = tk.Button(toolbar, text="Resize", command=self.resize_image)
        resize_button.pack(side=tk.LEFT, padx=5, pady=5)
        rotate_button = tk.Button(toolbar, text="Rotate", command=self.rotate_image)
        rotate_button.pack(side=tk.LEFT, padx=5, pady=5)
        flip_button = tk.Button(toolbar, text="Flip", command=self.flip_image)
        flip_button.pack(side=tk.LEFT, padx=5, pady=5)
        brightness_button = tk.Button(toolbar, text="Brightness", command=self.adjust_brightness)
        brightness_button.pack(side=tk.LEFT, padx=5, pady=5)
        contrast_button = tk.Button(toolbar, text="Contrast", command=self.adjust_contrast)
        contrast_button.pack(side=tk.LEFT, padx=5, pady=5)
        saturation_button = tk.Button(toolbar, text="Saturation", command=self.adjust_saturation)
        saturation_button.pack(side=tk.LEFT, padx=5, pady=5)
        hue_button = tk.Button(toolbar, text="Hue", command=self.adjust_hue)
        hue_button.pack(side=tk.LEFT, padx=5, pady=5)
        toolbar.pack(side=tk.TOP, fill=tk.X)
    def create_canvas(self):
        self.canvas = tk.Canvas(self.root)
        self.canvas.pack(fill=tk.BOTH, expand=True)
    def open_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.gif")])
        if file_path:
            self.current_image = Image.open(file_path)
            self.original_image = self.current_image.copy()
            self.display_image()
    def save_image(self):
        if self.current_image:
            file_path = filedialog.asksaveasfilename(defaultextension=".jpg",
                                                     filetypes=[("JPEG", "*.jpg"), ("PNG", "*.png"), ("GIF", "*.gif")])
            if file_path:
                self.current_image.save(file_path)
    def display_image(self):
        if self.current_image:
            self.canvas.delete("all")
            image_width, image_height = self.current_image.size
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            if image_width > canvas_width or image_height > canvas_height:
                image_ratio = image_width / image_height
                canvas_ratio = canvas_width / canvas_height
                if image_ratio > canvas_ratio:
                    new_width = canvas_width
                    new_height = int(canvas_width / image_ratio)
                else:
                    new_width = int(canvas_height * image_ratio)
                    new_height = canvas_height
                self.current_image = self.current_image.resize((new_width, new_height), Image.ANTIALIAS)
            self.image_tk = ImageTk.PhotoImage(self.current_image)
            self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)
    def undo(self):
        if self.undo_stack:
            self.redo_stack.append(self.current_image)
            self.current_image = self.undo_stack.pop()
            self.display_image()
    def redo(self):
        if self.redo_stack:
            self.undo_stack.append(self.current_image)
            self.current_image = self.redo_stack.pop()
            self.display_image()
    def crop_image(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            self.current_image = self.current_image.crop((100, 100, 300, 300))
            self.display_image()
    def resize_image(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            self.current_image = self.current_image.resize((500, 500))
            self.display_image()
    def rotate_image(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            self.current_image = self.current_image.rotate(90)
            self.display_image()
    def flip_image(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            self.current_image = self.current_image.transpose(Image.FLIP_LEFT_RIGHT)
            self.display_image()
    def adjust_brightness(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            enhancer = ImageEnhance.Brightness(self.current_image)
            self.current_image = enhancer.enhance(1.5)              self.display_image()
    def adjust_contrast(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            enhancer = ImageEnhance.Contrast(self.current_image)
            self.current_image = enhancer.enhance(1.5)              self.display_image()
    def adjust_saturation(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            enhancer = ImageEnhance.Color(self.current_image)
            self.current_image = enhancer.enhance(1.5)              self.display_image()
    def adjust_hue(self):
        if self.current_image:
            self.undo_stack.append(self.current_image)
            enhancer = ImageEnhance.Color(self.current_image)
            self.current_image = enhancer.enhance(0.5)              self.display_image()
if __name__ == "__main__":
    root = tk.Tk()
    image_editor = ImageEditor(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/CurrencyWiz_THUNLP_20230825101851/main.py

'''
Currency Converter App
Fetches real-time exchange rates online and provides a modern and intuitive GUI.
Author: Programmer
'''
import tkinter as tk
import requests
class CurrencyConverterApp:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Currency Converter")
        self.amount_label = tk.Label(self.window, text="Amount:")
        self.amount_label.pack()
        self.amount_entry = tk.Entry(self.window)
        self.amount_entry.pack()
        self.from_currency_label = tk.Label(self.window, text="From Currency:")
        self.from_currency_label.pack()
        self.from_currency_entry = tk.Entry(self.window)
        self.from_currency_entry.pack()
        self.to_currency_label = tk.Label(self.window, text="To Currency:")
        self.to_currency_label.pack()
        self.to_currency_entry = tk.Entry(self.window)
        self.to_currency_entry.pack()
        self.convert_button = tk.Button(self.window, text="Convert", command=self.convert)
        self.convert_button.pack()
        self.result_label = tk.Label(self.window, text="")
        self.result_label.pack()
    def run(self):
        self.window.mainloop()
    def convert(self):
        amount = float(self.amount_entry.get())
        from_currency = self.from_currency_entry.get().upper()
        to_currency = self.to_currency_entry.get().upper()
        if from_currency == to_currency:
            self.result_label.config(text="Cannot convert between the same currency.")
            return
        try:
            response = requests.get(f"https://api.exchangerate-api.com/v4/latest/{from_currency}")
            response.raise_for_status()              exchange_rates = response.json()["rates"]
            if to_currency in exchange_rates:
                converted_amount = amount * exchange_rates[to_currency]
                self.result_label.config(text=f"{amount} {from_currency} = {converted_amount} {to_currency}")
            else:
                self.result_label.config(text=f"Invalid currency: {to_currency}")
        except requests.exceptions.RequestException as e:
            self.result_label.config(text="Failed to fetch exchange rates. Please try again later.")
            print(f"RequestException: {e}")
        except requests.exceptions.HTTPError as e:
            self.result_label.config(text="Failed to fetch exchange rates. Please try again later.")
            print(f"HTTPError: {e}")
if __name__ == "__main__":
    app = CurrencyConverterApp()
    app.run()

/home/brandon/Projects/ChatDev/WareHouse/ExpenseEase_THUNLP_20230825093604/main.py

'''
Expense Tracker
This program allows users to input their expenses and visualize the data using a graphical user interface (GUI).
Author: ChatDev
'''
import tkinter as tk
import matplotlib.pyplot as plt
class ExpenseTrackerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Expense Tracker")
        self.geometry("400x300")
        self.expenses = []
        self.create_widgets()
    def create_widgets(self):
        self.expense_label = tk.Label(self, text="Expense:")
        self.expense_label.pack()
        self.expense_entry = tk.Entry(self)
        self.expense_entry.pack()
        self.add_button = tk.Button(self, text="Add Expense", command=self.add_expense)
        self.add_button.pack()
        self.expense_listbox = tk.Listbox(self)
        self.expense_listbox.pack()
        self.visualize_button = tk.Button(self, text="Visualize Data", command=self.visualize_data)
        self.visualize_button.pack()
    def add_expense(self):
        expense = self.expense_entry.get()
        self.expenses.append(expense)
        self.expense_listbox.insert(tk.END, expense)
        self.expense_entry.delete(0, tk.END)
    def visualize_data(self):
        plt.bar(range(len(self.expenses)), [float(expense) for expense in self.expenses])
        plt.xlabel("Expense")
        plt.ylabel("Amount")
        plt.title("Expense Tracker")
        plt.show()
if __name__ == "__main__":
    app = ExpenseTrackerApp()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/timer_THUNLP_20230823091709/.py

Error Summary of Test Reports:
- The timer does not accurately measure and display elapsed time.
- The timer does not handle short durations, such as milliseconds.
- The timer does not handle longer durations, such as hours or days.
- The timer does not provide options for displaying time in various formats.
- The timer does not run in the background without affecting other software operations.
- The timer does not handle errors gracefully and provide appropriate error messages.

/home/brandon/Projects/ChatDev/WareHouse/timer_THUNLP_20230823091709/main.py

'''
This file contains the main application logic and GUI setup.
'''
import tkinter as tk
from timer import Timer
class TimerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Timer App")
        self.timer = Timer()
        self.time_var = tk.StringVar()
        self.time_var.set("00:00:00")
        self.format_var = tk.StringVar()
        self.format_var.set("HH:MM:SS")
        self.create_widgets()
    def create_widgets(self):
        self.time_label = tk.Label(self, textvariable=self.time_var, font=("Arial", 24))
        self.time_label.pack(pady=10)
        self.format_label = tk.Label(self, text="Time Format:")
        self.format_label.pack()
        self.format_entry = tk.Entry(self, textvariable=self.format_var)
        self.format_entry.pack(pady=5)
        self.start_button = tk.Button(self, text="Start", command=self.start_timer)
        self.start_button.pack(side=tk.LEFT, padx=5)
        self.stop_button = tk.Button(self, text="Stop", command=self.stop_timer)
        self.stop_button.pack(side=tk.LEFT, padx=5)
        self.reset_button = tk.Button(self, text="Reset", command=self.reset_timer)
        self.reset_button.pack(side=tk.LEFT, padx=5)
    def start_timer(self):
        self.timer.start()
        self.update_time()
    def stop_timer(self):
        self.timer.stop()
    def reset_timer(self):
        self.timer.reset()
        self.update_time()
    def update_time(self):
        if self.timer.is_running():
            try:
                time = self.timer.get_time(self.format_var.get())
                self.time_var.set(time)
            except ValueError:
                self.time_var.set("Invalid time format")
        self.after(100, self.update_time)
if __name__ == "__main__":
    app = TimerApp()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/timer_THUNLP_20230823091709/timer.py

'''
This file contains the Timer class that handles the timer logic.
'''
import time
class Timer:
    def __init__(self):
        self.start_time = 0
        self.elapsed_time = 0
        self.running = False
    def start(self):
        if not self.running:
            self.start_time = time.time()
            self.running = True
    def stop(self):
        if self.running:
            self.elapsed_time += time.time() - self.start_time
            self.running = False
    def reset(self):
        self.start_time = time.time()
        self.elapsed_time = 0
        self.running = False
    def is_running(self):
        return self.running
    def get_time(self, format_str):
        if self.running:
            elapsed = self.elapsed_time + (time.time() - self.start_time)
        else:
            elapsed = self.elapsed_time
        hours = int(elapsed // 3600)
        minutes = int((elapsed % 3600) // 60)
        seconds = int(elapsed % 60)
        if format_str == "HH:MM:SS":
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        elif format_str == "MM:SS:MS":
            milliseconds = int((elapsed % 1) * 1000)
            return f"{minutes:02d}:{seconds:02d}:{milliseconds:03d}"
        else:
            raise ValueError("Invalid time format")

/home/brandon/Projects/ChatDev/WareHouse/pingpong_THUNLP_20230817193956/main.py

'''
This is the main file that runs the pingpong game.
'''
import pygame
from game import Game
def main():
    pygame.init()
    game = Game()
    game.run()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/pingpong_THUNLP_20230817193956/game.py

'''
This file contains the Game class that manages the game logic and user interface.
'''
import pygame
from paddle import Paddle
from ball import Ball
class Game:
    def __init__(self):
        self.width = 800
        self.height = 400
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("PingPong Game")
        self.clock = pygame.time.Clock()
        self.running = True
        self.paddle1 = Paddle(20, self.height // 2)
        self.paddle2 = Paddle(self.width - 20, self.height // 2)
        self.ball = Ball(self.width // 2, self.height // 2)
        self.score1 = 0
        self.score2 = 0
        self.font = pygame.font.Font(None, 36)
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    self.running = False
                elif event.key == pygame.K_w:
                    self.paddle1.move_up()
                elif event.key == pygame.K_s:
                    self.paddle1.move_down()
                elif event.key == pygame.K_UP:
                    self.paddle2.move_up()
                elif event.key == pygame.K_DOWN:
                    self.paddle2.move_down()
    def update(self):
        self.paddle1.update()
        self.paddle2.update()
        self.ball.update(self.paddle1, self.paddle2)
        if self.ball.rect.left < 0:
            self.score2 += 1
            self.ball.reset()
        elif self.ball.rect.right > self.width:
            self.score1 += 1
            self.ball.reset()
    def draw(self):
        self.screen.fill((0, 0, 0))
        self.paddle1.draw(self.screen)
        self.paddle2.draw(self.screen)
        self.ball.draw(self.screen)
        score_text = self.font.render(f"Player 1: {self.score1}  Player 2: {self.score2}", True, (255, 255, 255))
        self.screen.blit(score_text, (self.width // 2 - score_text.get_width() // 2, 10))
        pygame.display.flip()
    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(60)
            if self.score1 >= 5 or self.score2 >= 5:
                self.game_over()
    def game_over(self):
        self.running = False
        pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/pingpong_THUNLP_20230817193956/ball.py

'''
This file contains the Ball class that represents the game ball.
'''
import pygame
import random
class Ball:
    def __init__(self, x, y):
        self.radius = 10
        self.x = x
        self.y = y
        self.speed_x = random.choice([-2, 2])
        self.speed_y = random.choice([-2, 2])
        self.rect = pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius * 2, self.radius * 2)
    def update(self, paddle1, paddle2):
        self.x += self.speed_x
        self.y += self.speed_y
        if self.y <= self.radius or self.y >= 400 - self.radius:
            self.speed_y *= -1
        ball_bbox = pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius * 2, self.radius * 2)
        paddle1_bbox = paddle1.rect.inflate(-5, -5)
        paddle2_bbox = paddle2.rect.inflate(-5, -5)
        if ball_bbox.colliderect(paddle1_bbox) or ball_bbox.colliderect(paddle2_bbox):
            self.speed_x *= -1
        self.rect.x = self.x - self.radius
        self.rect.y = self.y - self.radius
    def draw(self, screen):
        pygame.draw.circle(screen, (255, 255, 255), (self.x, self.y), self.radius)
    def reset(self):
        self.x = 400
        self.y = 200
        self.speed_x = random.choice([-2, 2])
        self.speed_y = random.choice([-2, 2])
        self.rect.x = self.x - self.radius
        self.rect.y = self.y - self.radius

/home/brandon/Projects/ChatDev/WareHouse/pingpong_THUNLP_20230817193956/paddle.py

'''
This file contains the Paddle class that represents a player's paddle.
'''
import pygame
class Paddle:
    def __init__(self, x, y):
        self.width = 10
        self.height = 80
        self.x = x
        self.y = y
        self.speed = 5
        self.rect = pygame.Rect(self.x, self.y - self.height // 2, self.width, self.height)
    def move_up(self):
        self.y -= self.speed
        if self.y < self.height // 2:
            self.y = self.height // 2
    def move_down(self):
        self.y += self.speed
        if self.y > 400 - self.height // 2:
            self.y = 400 - self.height // 2
    def update(self):
        self.rect.y = self.y - self.height // 2
    def draw(self, screen):
        pygame.draw.rect(screen, (255, 255, 255), self.rect)

/home/brandon/Projects/ChatDev/WareHouse/trippy_avoid_game_DefaultOrganization_20231006224623/main.py

'''
This is the main file of the game. It initializes the game window, handles user input, and updates the game state.
'''
import pygame
import sys
from character import Character
from circle import Circle
pygame.init()
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Circle Dodge Game")
character = Character(screen_width, screen_height)
circles = pygame.sprite.Group()
game_over = False
clock = pygame.time.Clock()
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True
    screen.fill((255, 255, 255))
    character.update(pygame.mouse.get_pos())
    Circle.spawn(circles, screen_width, screen_height)
    circles.update(screen_width, screen_height)
    circles.draw(screen)
    if pygame.sprite.spritecollide(character, circles, False):
        game_over = True
    character.draw(screen)
    pygame.display.flip()
    clock.tick(60)
screen.fill((255, 255, 255))
font = pygame.font.Font(None, 36)
text = font.render("Game Over", True, (0, 0, 0))
text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2))
screen.blit(text, text_rect)
pygame.display.flip()
pygame.time.wait(2000)
pygame.quit()
sys.exit()

/home/brandon/Projects/ChatDev/WareHouse/trippy_avoid_game_DefaultOrganization_20231006224623/circle.py

'''
This file defines the Circle class, which represents the randomly sized circles flying around the screen.
'''
import pygame
import random
class Circle(pygame.sprite.Sprite):
    def __init__(self, screen_width, screen_height):
        super().__init__()
        self.radius = random.randint(10, 30)
        self.image = pygame.Surface((self.radius * 2, self.radius * 2), pygame.SRCALPHA)
        pygame.draw.circle(self.image, (255, 0, 0), (self.radius, self.radius), self.radius)
        self.rect = self.image.get_rect()
        side = random.randint(0, 3)
        if side == 0:              self.rect.centerx = random.randint(0, screen_width)
            self.rect.centery = -self.radius
        elif side == 1:              self.rect.centerx = screen_width + self.radius
            self.rect.centery = random.randint(0, screen_height)
        elif side == 2:              self.rect.centerx = random.randint(0, screen_width)
            self.rect.centery = screen_height + self.radius
        else:              self.rect.centerx = -self.radius
            self.rect.centery = random.randint(0, screen_height)
        self.velocity_x = random.randint(-5, 5)
        self.velocity_y = random.randint(-5, 5)
    def update(self, screen_width, screen_height):
        self.rect.centerx += self.velocity_x
        self.rect.centery += self.velocity_y
        if self.rect.right < 0 or self.rect.left > screen_width or self.rect.bottom < 0 or self.rect.top > screen_height:
            self.kill()
    @staticmethod
    def spawn(circles, screen_width, screen_height):
        if len(circles) < 10:              circle = Circle(screen_width, screen_height)
            circles.add(circle)

/home/brandon/Projects/ChatDev/WareHouse/trippy_avoid_game_DefaultOrganization_20231006224623/character.py

'''
This file defines the Character class, which represents the user-controlled character in the game.
'''
import pygame
class Character(pygame.sprite.Sprite):
    def __init__(self, screen_width, screen_height):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill((0, 0, 255))
        self.rect = self.image.get_rect()
        self.rect.centerx = screen_width // 2
        self.rect.centery = screen_height // 2
    def update(self, mouse_pos):
        self.rect.center = mouse_pos
    def draw(self, screen):
        screen.blit(self.image, self.rect)

/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/index.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatDev数字博物馆</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/three-dots@0.3.2/dist/three-dots.min.css">
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Ma+Yen+Kai&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chinese-scroll-effect/dist/style.css">
</head>
<body>
    <div class="scroll-container">
        <div class="chinese-scroll">
            <div class="bamboo-content">
                <div class="pattern-overlay"></div>
                <header>
                    <nav>
                        <div class="logo">ChatDev数字博物馆</div>
                        <ul>
                            <li><a href="#hero" class="magnetic-link"><span>首页</span></a></li>
                            <li><a href="#cultural-heritage" class="magnetic-link"><span>考古时间线</span></a></li>
                            <li><a href="#exhibitions" class="magnetic-link"><span>研究与保护</span></a></li>
                        </ul>
                    </nav>
                </header>
                <main>
                    <section id="hero">
                        <div class="swiper hero-slider">
                            <div class="swiper-wrapper">
                                <div class="swiper-slide">
                                    <div class="slide-inner">
                                        <img src="./images/slider/slide3.jpg" alt="清华简保护">
                                        <div class="slide-overlay">
                                            <h2>科技保护</h2>
                                            <p>运用现代科技保护和研究战国竹简</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="swiper-slide">
                                    <div class="slide-inner">
                                        <img src="./images/slider/slide1.png" alt="清华简展示">
                                        <div class="slide-overlay">
                                            <h2>清华简</h2>
                                            <p>战国中晚期珍贵竹简，展现先秦古籍原貌</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="swiper-slide">
                                    <div class="slide-inner">
                                        <img src="./images/slider/slide2.png" alt="清华简研究">
                                        <div class="slide-overlay">
                                            <h2>文化传承</h2>
                                            <p>了解中华文化的初期面貌和发展脉络</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="swiper-pagination"></div>
                            <div class="swiper-button-prev"></div>
                            <div class="swiper-button-next"></div>
                        </div>
                    </section>
                    <section id="quote-section" class="parallax-section">
                        <div class="quote-container">
                            <blockquote data-aos="fade-up">
                                <div class="cultural-slogan">
                                    <p>"以科技演绎传统，以创新传承文明"</p>
                                </div>
                            </blockquote>
                        </div>
                    </section>
                    <section class="stats-section">
                        <div class="stats-container">
                            <div class="stat-item" data-aos="fade-up">
                                <div class="stat-number">
                                    <span class="counter" data-target="2500">0</span>
                                    <span class="plus">+</span>
                                </div>
                                <div class="stat-label">枚竹简</div>
                                <div class="stat-wave"></div>
                            </div>
                            <div class="stat-item" data-aos="fade-up" data-aos-delay="100">
                                <div class="stat-number">
                                    <span class="counter" data-target="14">0</span>
                                    <span class="plus">+</span>
                                </div>
                                <div class="stat-label">成果整理</div>
                                <div class="stat-wave"></div>
                            </div>
                            <div class="stat-item" data-aos="fade-up" data-aos-delay="200">
                                <div class="stat-number">
                                    <span class="counter" data-target="2300">0</span>
                                    <span class="plus">+</span>
                                </div>
                                <div class="stat-label">年历史</div>
                                <div class="stat-wave"></div>
                            </div>
                        </div>
                    </section>
                    <section id="cultural-heritage">
                        <div class="heritage-container">
                            <h2 class="section-title" data-aos="fade-up">考古时间线</h2>
                            <div class="heritage-timeline">
                                <div class="timeline-item" data-aos="fade-left">
                                    <div class="timeline-content">
                                        <h3>归来如初，竹简重现</h3>
                                        <p>流散海外的战国竹简终归故土，清华大学开启保护与研究之旅，揭开尘封千年的历史画卷。</p>
                                        <div class="timeline-period">2008年</div>
                                    </div>
                                </div>
                                <div class="timeline-item" data-aos="fade-right">
                                    <div class="timeline-content">
                                        <h3>初绽华光，文脉重接</h3>
                                        <p>出土文献中心成立，竹简首批成果问世，遗篇重现，周文王遗训与《系年》诉说千年往事。</p>
                                        <div class="timeline-period">2009年-2011年</div>
                                    </div>
                                </div>
                                <div class="timeline-item" data-aos="fade-left">
                                    <div class="timeline-content">
                                        <h3>简中有数，史韵悠长</h3>
                                        <p>竹简释读渐入佳境，文献涵盖诗乐、史事与算表，点亮先秦文明的璀璨星河。</p>
                                        <div class="timeline-period">2013年-2020年</div>
                                    </div>
                                </div>
                                <div class="timeline-item" data-aos="fade-right">
                                    <div class="timeline-content">
                                        <h3>弦歌不辍，古韵新生</h3>
                                        <p>深掘竹简之秘，释出《五纪》《三不韦》等珍贵篇章，重现礼乐风华，延续文化薪火。</p>
                                        <div class="timeline-period">2021年-2023年</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                    <section id="exhibitions">
                        <h2 class="section-title" data-aos="fade-up">研究与保护</h2>
                        <div class="exhibition-grid">
                            <a href="cultural-examination.html" class="exhibition-card" data-aos="fade-up" data-aos-delay="200" style="text-decoration: none; color: inherit;">
                                <div class="card-image-wrapper">
                                    <img src="./images/exhibitions/exhibition1.png" alt="清华简保护">
                                </div>
                                <div class="card-content">
                                    <h3>文物考察</h3>
                                    <p>对出土文物进行科学清理、保护和研究，确保文物的完整性和真实性</p>
                                </div>
                            </a>
                            <a href="warring-states-bamboo.html" class="exhibition-card" data-aos="fade-up" style="text-decoration: none; color: inherit;">
                                <div class="card-image-wrapper">
                                    <img src="./images/exhibitions/exhibition2.png" alt="清华简发现">
                                </div>
                                <div class="card-content">
                                    <h3>战国文化</h3>
                                    <p>千余枚战国竹简，展现战国文化</p>
                                </div>
                            </a>
                            <a href="research-achievements.html" class="exhibition-card" data-aos="fade-up" data-aos-delay="100" style="text-decoration: none; color: inherit;">
                                <div class="card-image-wrapper">
                                    <img src="./images/exhibitions/exhibition3.png" alt="清华简研究">
                                </div>
                                <div class="card-content">
                                    <h3>全辑整理</h3>
                                    <p>已出版十四辑整理成果，展现先秦文献珍贵价值</p>
                                </div>
                            </a>
                        </div>
                    </section>
                </main>
                <footer>
                    <div class="footer-content">
                        <div class="footer-left">
                            <img src="images/logo/chatdev-logo.png" alt="ChatDev Logo" class="footer-logo">
                            <div class="contact" data-aos="fade-up">
                                <p>ChatDev数字博物馆</p>
                                <p>https://github.com/OpenBMB/ChatDev</p>
                            </div>
                        </div>
                        <div class="opening-hours" data-aos="fade-up" data-aos-delay="100">
                            <p>以上内容由AI生成，可能存在偏差，请谨慎使用</p>
                        </div>
                    </div>
                </footer>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.8.0/vanilla-tilt.min.js"></script>
    <script src="script.js"></script>
</body>
</html> 

/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/cultural-examination.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatDev数字博物馆</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Ma+Yen+Kai&display=swap" rel="stylesheet">
    <style>
        .bookshelf-container {
            padding: 50px 20px;
            background: rgba(244, 241, 234, 0.9);
            min-height: 100vh;
        }
        .bookshelf-row {
            position: relative;
            margin-bottom: 60px;
            height: 270px;
            overflow: hidden;
            display: flex;
            gap: 30px;
            padding: 0 20px;
        }
        .books-track {
            display: flex;
            gap: 30px;
            position: absolute;
            left: 20px;
            animation: slideTrack 20s linear infinite;
        }
        .books-track-reverse {
            animation: slideTrackReverse 20s linear infinite;
        }
        .book {
            width: 180px;
            height: 270px;
            flex-shrink: 0;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        .book:hover {
            transform: translateY(-10px);
        }
        .book-cover {
            position: relative;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #8B4513, #5C3D2E);
            border-radius: 5px;
            border-left: 15px solid #3A2820;
            box-shadow: 
                -5px 5px 15px rgba(0, 0, 0, 0.3),
                inset -1px 0 2px rgba(255, 255, 255, 0.1);
            overflow: hidden;
        }
        .book-cover::before {
            content: '';
            position: absolute;
            left: -15px;
            top: 0;
            width: 15px;
            height: 100%;
            background: linear-gradient(to right,
                rgba(58, 40, 32, 1) 0%,
                rgba(89, 61, 43, 1) 50%,
                rgba(58, 40, 32, 1) 100%
            );
            box-shadow: 
                inset -1px 0 2px rgba(255, 255, 255, 0.1),
                inset 1px 0 1px rgba(0, 0, 0, 0.2);
        }
        .book-cover::after {
            content: '';
            position: absolute;
            top: 0;
            left: -15px;
            right: 0;
            height: 3px;
            background: linear-gradient(to bottom,
                rgba(255, 255, 255, 0.1) 0%,
                transparent 100%
            );
        }
        .book-image {
            width: 100%;
            height: 80%;
            object-fit: cover;
            border-radius: 5px 5px 0 0;
            border-bottom: 2px solid rgba(0, 0, 0, 0.2);
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
        }
        .book-title {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: #F4E4BC;
            text-align: center;
            width: 90%;
            font-size: 1.1em;
            font-family: 'Ma Yen Kai', serif;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            padding: 5px;
            background: linear-gradient(to bottom,
                rgba(0, 0, 0, 0) 0%,
                rgba(0, 0, 0, 0.1) 100%
            );
        }
        .book:hover .book-cover {
            box-shadow: 
                -8px 8px 20px rgba(0, 0, 0, 0.4),
                inset -1px 0 3px rgba(255, 255, 255, 0.2);
        }
        .book:hover .book-title {
            color: #FFE4BC;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
        }
        @keyframes slideTrack {
            0% {
                transform: translateX(0);
            }
            100% {
                transform: translateX(calc(-210px * 6));  
            }
        }
        @keyframes slideTrackReverse {
            0% {
                transform: translateX(calc(-210px * 6));
            }
            100% {
                transform: translateX(0);
            }
        }
        .books-track:hover {
            animation-play-state: paused;
        }
        .section-title {
            text-align: center;
            font-size: 2.5em;
            color: #3A2820;
            margin-bottom: 60px;
            font-family: 'Ma Yen Kai', serif;
        }
        @media (max-width: 1200px) {
            .bookshelf-row {
                gap: 20px;
            }
            .book {
                width: 160px;
                height: 240px;
            }
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        .modal.active {
            display: flex;
        }
        .modal-content {
            position: relative;
            max-width: 80%;
            max-height: 80%;
        }
        .modal-image {
            max-width: 100%;
            max-height: 80vh;
            object-fit: contain;
        }
        .close-modal {
            position: fixed;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 30px;
            cursor: pointer;
            background: none;
            border: none;
            padding: 10px;
        }
        .modal-title {
            position: fixed;
            bottom: 20px;
            left: 0;
            color: white;
            font-size: 20px;
            width: 100%;
            text-align: center;
        }
        @keyframes slideBooks {
            0% {
                transform: translateX(0);
            }
            100% {
                transform: translateX(-50%);
            }
        }
        @keyframes slideBooksReverse {
            0% {
                transform: translateX(-50%);
            }
            100% {
                transform: translateX(0);
            }
        }
        .books-wrapper:hover {
            animation-play-state: paused;
        }
    </style>
</head>
<body>
    <div class="scroll-container">
        <div class="chinese-scroll">
            <div class="bamboo-content">
                <div class="pattern-overlay"></div>
                <header>
                    <nav>
                        <div class="logo">ChatDev数字博物馆</div>
                        <ul>
                            <li><a href="index.html" class="magnetic-link"><span>返回首页</span></a></li>
                        </ul>
                    </nav>
                </header>
                <main>
                    <div class="bookshelf-container">
                        <h2 class="section-title" data-aos="fade-up">文物考察</h2>
                        <div class="bookshelf-row">
                            <div class="books-track">
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/7.png" alt="复原竹简拼图" class="book-image" data-title="复原竹简拼图">
                                        <div class="book-title">复原竹简拼图</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/8.png" alt="集体会读史料" class="book-image" data-title="集体会读史料">
                                        <div class="book-title">集体会读史料</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/4.png" alt="解读竹简文脉" class="book-image" data-title="解读竹简文脉">
                                        <div class="book-title">解读竹简文脉</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/5.png" alt="古文字研究" class="book-image" data-title="古文字研究">
                                        <div class="book-title">古文字研究</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/1.png" alt="出土文献整理" class="book-image" data-title="出土文献整理">
                                        <div class="book-title">出土文献整理</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/6.png" alt="清华简史料研讨" class="book-image" data-title="清华简史料研讨">
                                        <div class="book-title">清华简史料研讨</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/7.png" alt="复原竹简拼图" class="book-image" data-title="复原竹简拼图">
                                        <div class="book-title">复原竹简拼图</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/8.png" alt="集体会读史料" class="book-image" data-title="集体会读史料">
                                        <div class="book-title">集体会读史料</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/4.png" alt="解读竹简文脉" class="book-image" data-title="解读竹简文脉">
                                        <div class="book-title">解读竹简文脉</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/5.png" alt="古文字研究" class="book-image" data-title="古文字研究">
                                        <div class="book-title">古文字研究</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/1.png" alt="出土文献整理" class="book-image" data-title="出土文献整理">
                                        <div class="book-title">出土文献整理</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/6.png" alt="清华简史料研讨" class="book-image" data-title="清华简史料研讨">
                                        <div class="book-title">清华简史料研讨</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="bookshelf-row">
                            <div class="books-track books-track-reverse">
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/3.png" alt="竹简修复技术" class="book-image" data-title="竹简修复技术">
                                        <div class="book-title">竹简修复技术</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/9.png" alt="挖掘算表奥秘" class="book-image" data-title="挖掘算表奥秘">
                                        <div class="book-title">挖掘算表奥秘</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/13.png" alt="当代文物传承" class="book-image" data-title="当代文物传承">
                                        <div class="book-title">当代文物传承</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/14.png" alt="文物成果发布" class="book-image" data-title="文物成果发布">
                                        <div class="book-title">文物成果发布</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/15.png" alt="文物历史探秘" class="book-image" data-title="文物历史探秘">
                                        <div class="book-title">文物历史探秘</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/11.png" alt="数字化保护" class="book-image" data-title="数字化保护">
                                        <div class="book-title">数字化保护</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/3.png" alt="竹简修复技术" class="book-image" data-title="竹简修复技术">
                                        <div class="book-title">竹简修复技术</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/9.png" alt="挖掘算表奥秘" class="book-image" data-title="挖掘算表奥秘">
                                        <div class="book-title">挖掘算表奥秘</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/13.png" alt="当代文物传承" class="book-image" data-title="当代文物传承">
                                        <div class="book-title">当代文物传承</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/14.png" alt="文物成果发布" class="book-image" data-title="文物成果发布">
                                        <div class="book-title">文物成果发布</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/15.png" alt="文物历史探秘" class="book-image" data-title="文物历史探秘">
                                        <div class="book-title">文物历史探秘</div>
                                    </div>
                                </div>
                                <div class="book">
                                    <div class="book-cover">
                                        <img src="images/examination/11.png" alt="数字化保护" class="book-image" data-title="数字化保护">
                                        <div class="book-title">数字化保护</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
                <footer>
                    <div class="footer-content">
                        <div class="footer-left">
                            <img src="images/logo/chatdev-logo.png" alt="ChatDev Logo" class="footer-logo">
                            <div class="contact" data-aos="fade-up">
                                <p>ChatDev数字博物馆</p>
                                <p>https://github.com/OpenBMB/ChatDev</p>
                            </div>
                        </div>
                        <div class="opening-hours" data-aos="fade-up" data-aos-delay="100">
                            <p>以上内容由AI生成，可能存在偏差，请谨慎使用</p>
                        </div>
                    </div>
                </footer>
            </div>
        </div>
    </div>
    <div class="modal" id="imageModal">
        <div class="modal-content">
            <button class="close-modal">&times;</button>
            <img src="" alt="" class="modal-image">
            <div class="modal-title"></div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>
        AOS.init({
            duration: 1000,
            once: true
        });
        const modal = document.getElementById('imageModal');
        const modalImage = modal.querySelector('.modal-image');
        const modalTitle = modal.querySelector('.modal-title');
        const closeButton = modal.querySelector('.close-modal');
        document.querySelectorAll('.book-image').forEach(image => {
            image.addEventListener('click', () => {
                modalImage.src = image.src;
                modalTitle.textContent = image.dataset.title;
                modal.classList.add('active');
            });
        });
        closeButton.addEventListener('click', () => {
            modal.classList.remove('active');
        });
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
    </script>
</body>
</html>


/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/styles.css

@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200;300;400;500;600&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Ma+Yen+Kai&display=swap');
:root {
    --primary-color: #8B0000;
    --accent-color: #FFD700;
    --text-color: #2A2A2A;
    --overlay-color: rgba(0, 0, 0, 0.8);
    --transition-slow: 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    --transition-medium: 0.5s cubic-bezier(0.77, 0, 0.175, 1);
    --transition-fast: 0.3s cubic-bezier(0.77, 0, 0.175, 1);
    --chinese-red: #c41e3a;
    --jade-green: #00a86b;
    --bg-dark: #1a1a1a;
    --bg-light: #ffffff;
    --text-light: #ffffff;
    --text-muted: #999999;
}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html {
    scroll-behavior: smooth;
}
body {
    font-family: 'Ma Yen Kai', sans-serif;
    line-height: 1.6;
    background: linear-gradient(135deg, var(--bg-dark), #2a2a2a);
    overflow-x: hidden;
    color: var(--text-color);
}
header {
    background: rgba(26, 26, 26, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 20px rgba(0,0,0,0.2);
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
    height: 70px;
}
nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 5%;
    max-width: 1200px;
    margin: 0 auto;
    height: 100%;
}
.logo {
    font-size: 1.8rem;
    font-weight: 400;
    letter-spacing: 2px;
    color: var(--accent-color);
}
nav ul {
    display: flex;
    list-style: none;
    gap: 2rem;
}
.magnetic-link {
    text-decoration: none;
    color: var(--text-light);
    font-weight: 400;
    position: relative;
    padding: 0.5rem 0;
    transition: color var(--transition-fast);
}
.magnetic-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: var(--accent-color);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform var(--transition-medium);
}
.magnetic-link:hover {
    color: var(--accent-color);
}
.magnetic-link:hover::after {
    transform: scaleX(1);
    transform-origin: left;
}
#hero {
    height: calc(100vh - 70px);
    position: relative;
    overflow: hidden;
    margin-top: 70px;
}
.hero-slider {
    width: 100%;
    height: 100%;
    position: relative;
}
.swiper-slide {
    overflow: hidden;
}
.slide-inner {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: #000;
}
.slide-inner img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform: scale(1);
    transition: transform 8s ease;
}
.swiper-slide-active .slide-inner img {
    transform: scale(1.1);
}
.slide-overlay {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 40%;
    padding: 3rem;
    background: var(--overlay-color);
    color: var(--text-light);
    text-align: right;
    transform: translateY(100%);
    opacity: 0;
    transition: all var(--transition-medium);
    backdrop-filter: blur(10px);
}
.swiper-slide-active .slide-overlay {
    transform: translateY(0);
    opacity: 1;
}
.slide-overlay h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    font-weight: 400;
    transform: translateX(50px);
    opacity: 0;
    transition: all var(--transition-medium) 0.5s;
    color: var(--accent-color);
}
.slide-overlay p {
    font-size: 1.2rem;
    line-height: 1.6;
    transform: translateX(50px);
    opacity: 0;
    transition: all var(--transition-medium) 0.7s;
    color: var(--text-light);
}
.swiper-slide-active .slide-overlay h2,
.swiper-slide-active .slide-overlay p {
    transform: translateX(0);
    opacity: 1;
}
.swiper-button-prev,
.swiper-button-next {
    width: 50px;
    height: 50px;
    color: white !important;
    opacity: 0;
    transition: all var(--transition-fast);
}
.hero-slider:hover .swiper-button-prev,
.hero-slider:hover .swiper-button-next {
    opacity: 1;
}
.swiper-pagination-bullet {
    width: 12px;
    height: 12px;
    background: rgba(255, 255, 255, 0.9);
    opacity: 0.5;
    transition: all var(--transition-fast);
}
.swiper-pagination-bullet-active {
    opacity: 1;
    background: white;
    transform: scale(1.2);
}
#exhibitions {
    padding: 100px 0;
    background: var(--bg-light);
    position: relative;
}
.section-title {
    text-align: center;
    font-size: 3rem;
    font-weight: 400;
    margin-bottom: 4rem;
    color: var(--primary-color);
    position: relative;
    padding: 20px 0;
}
.section-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 2px;
    background: repeating-linear-gradient(
        90deg,
        var(--accent-color),
        var(--accent-color) 4px,
        transparent 4px,
        transparent 8px
    );
    opacity: 0.3;
    transform: translateY(-50%);
}
.exhibition-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 3rem;
    padding: 0 5%;
    max-width: 1400px;
    margin: 0 auto;
}
.exhibition-card {
    position: relative;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 15px 45px rgba(0,0,0,0.1);
    transition: all var(--transition-medium);
    opacity: 0;
    transform: translateY(30px);
}
.exhibition-card.aos-animate {
    opacity: 1;
    transform: translateY(0);
}
.exhibition-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 25px 65px rgba(0,0,0,0.15);
}
.card-image-wrapper {
    position: relative;
    overflow: hidden;
    padding-top: 75%;
}
.card-image-wrapper img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-medium);
}
.exhibition-card:hover .card-image-wrapper img {
    transform: scale(1.1);
}
.card-content {
    padding: 2rem;
    background: white;
}
.card-content h3 {
    font-size: 1.5rem;
    font-weight: 400;
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}
.card-content p {
    color: var(--text-color);
    font-size: 1rem;
    line-height: 1.6;
}
footer {
    background: var(--bg-dark);
    color: white;
    padding: 5rem 5%;
}
.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 3rem;
}
.footer-content h3 {
    font-size: 1.5rem;
    font-weight: 400;
    margin-bottom: 1.5rem;
    color: var(--accent-color);
}
.footer-content p {
    color: var(--text-light);
    margin-bottom: 0.5rem;
}
@media (max-width: 768px) {
    nav {
        flex-direction: column;
        padding: 1rem;
    }
    nav ul {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    .slide-overlay {
        width: 100%;
        padding: 2rem;
    }
    .slide-overlay h2 {
        font-size: 2rem;
    }
    .exhibition-grid {
        gap: 2rem;
        padding: 0 2rem;
    }
}
[data-aos] {
    opacity: 0;
    transform: translateY(30px);
    transition: all var(--transition-medium);
}
[data-aos].aos-animate {
    opacity: 1;
    transform: translateY(0);
}
.pattern-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
        repeating-linear-gradient(45deg, 
            rgba(139, 0, 0, 0.03) 0px,
            rgba(139, 0, 0, 0.03) 2px,
            transparent 2px, 
            transparent 4px
        ),
        repeating-linear-gradient(-45deg,
            rgba(255, 215, 0, 0.03) 0px,
            rgba(255, 215, 0, 0.03) 2px,
            transparent 2px,
            transparent 4px
        );
    pointer-events: none;
    z-index: 1;
}
.digital-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    padding: 0 5%;
    perspective: 1000px;
}
.digital-card {
    height: 300px;
    perspective: 1000px;
    cursor: pointer;
}
.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform 0.8s cubic-bezier(0.23, 1, 0.32, 1);
}
.digital-card:hover .card-inner {
    transform: rotateY(180deg);
}
.card-front,
.card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    background: rgba(26, 26, 26, 0.9);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 215, 0, 0.2);
    border-radius: 15px;
    color: var(--text-light);
}
.card-back {
    transform: rotateY(180deg);
    background: rgba(196, 161, 98, 0.2);
}
.card-front h3 {
    font-size: 1.8rem;
    font-weight: 400;
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--accent-color);
}
.card-back p {
    font-size: 1.2rem;
    text-align: center;
    line-height: 1.6;
    margin-bottom: 1.5rem;
}
.experience-btn {
    display: inline-block;
    padding: 0.8rem 1.5rem;
    background: linear-gradient(45deg, var(--chinese-red), var(--primary-color));
    color: white;
    text-decoration: none;
    border-radius: 25px;
    font-size: 1rem;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
    margin-top: 1rem;
}
.experience-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(139, 0, 0, 0.3);
    background: linear-gradient(45deg, var(--primary-color), var(--chinese-red));
}
.section-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}
.section-title {
    text-align: center;
    font-size: 2.5rem;
    color: var(--accent-color);
    margin-bottom: 3rem;
    position: relative;
}
.section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
}
@media (max-width: 768px) {
    .digital-cards {
        grid-template-columns: 1fr;
        padding: 0 2rem;
    }
    .digital-card {
        height: 250px;
    }
    .card-front h3 {
        font-size: 1.5rem;
    }
    .card-back p {
        font-size: 1rem;
    }
    .section-title {
        font-size: 2rem;
    }
}
.dot-elastic {
    position: relative;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic 1s infinite linear;
    margin-top: 1rem;
}
.dot-elastic::before,
.dot-elastic::after {
    content: '';
    display: inline-block;
    position: absolute;
    top: 0;
}
.dot-elastic::before {
    left: -15px;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic-before 1s infinite linear;
}
.dot-elastic::after {
    left: 15px;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic-after 1s infinite linear;
}
@keyframes dot-elastic-before {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1.5); }
    50% { transform: scale(1,0.67); }
    75% { transform: scale(1,1); }
    100% { transform: scale(1,1); }
}
@keyframes dot-elastic {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1); }
    50% { transform: scale(1,1.5); }
    75% { transform: scale(1,1); }
    100% { transform: scale(1,1); }
}
@keyframes dot-elastic-after {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1); }
    50% { transform: scale(1,0.67); }
    75% { transform: scale(1,1.5); }
    100% { transform: scale(1,1); }
}
#cultural-heritage {
    padding: 100px 0;
    background: linear-gradient(to bottom, var(--bg-light) 0%, rgba(139, 0, 0, 0.1) 100%);
    position: relative;
}
.heritage-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 5%;
    position: relative;
}
.heritage-timeline {
    position: relative;
    padding: 4rem 0;
}
.heritage-timeline::before {
    content: '';
    position: absolute;
    left: 50%;
    top: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(to bottom, var(--accent-color) 0%, rgba(196, 161, 98, 0.3) 100%);
    transform: translateX(-50%);
}
.timeline-item {
    width: 50%;
    padding: 1rem;
    position: relative;
    margin-bottom: -5rem;
}
.timeline-item:last-child {
    margin-bottom: 0;
}
.timeline-item:nth-child(odd) {
    margin-left: auto;
    padding-left: 4rem;
}
.timeline-item:nth-child(even) {
    padding-right: 4rem;
}
.timeline-item::before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    background: var(--accent-color);
    border-radius: 50%;
    top: 50%;
    transform: translateY(-50%);
    box-shadow: 0 0 0 4px rgba(196, 161, 98, 0.2);
    transition: all var(--transition-medium);
    z-index: 1;
}
.timeline-item:hover::before {
    transform: translateY(-50%) scale(1.2);
    box-shadow: 0 0 0 8px rgba(196, 161, 98, 0.2);
}
.timeline-item:nth-child(odd)::before {
    left: -10px;
}
.timeline-item:nth-child(even)::before {
    right: -10px;
}
.timeline-content {
    background: var(--bg-light);
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    position: relative;
    transition: transform var(--transition-medium);
    border: 1px solid rgba(255, 215, 0, 0.2);
}
.timeline-content::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
    top: 50%;
    transform: translateY(-50%);
}
.timeline-item:nth-child(odd) .timeline-content::before {
    border-width: 10px 0 10px 10px;
    border-color: transparent transparent transparent rgba(255, 215, 0, 0.2);
    left: -10px;
}
.timeline-item:nth-child(even) .timeline-content::before {
    border-width: 10px 10px 10px 0;
    border-color: transparent rgba(255, 215, 0, 0.2) transparent transparent;
    right: -10px;
}
.timeline-content:hover {
    transform: translateY(-5px);
}
.timeline-content h3 {
    color: var(--primary-color);
    font-size: 1.8rem;
    margin-bottom: 1rem;
    font-weight: 400;
}
.timeline-content p {
    color: var(--text-color);
    line-height: 1.8;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}
.timeline-period {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: rgba(139, 0, 0, 0.1);
    border-radius: 20px;
    font-size: 0.9rem;
    color: var(--primary-color);
    margin-top: 1rem;
    font-weight: 500;
}
@media (max-width: 768px) {
    .heritage-timeline::before {
        left: 0;
    }
    .timeline-item {
        width: 100%;
        padding: 2rem 0 2rem 3rem;
        margin-bottom: 3rem;
    }
    .timeline-item:nth-child(odd),
    .timeline-item:nth-child(even) {
        margin-left: 0;
        padding-left: 3rem;
        padding-right: 1rem;
    }
    .timeline-item::before {
        left: -10px !important;
    }
    .timeline-content h3 {
        font-size: 1.5rem;
    }
    .timeline-content p {
        font-size: 1rem;
    }
}
.parallax-section {
    position: relative;
    height: 500px;
    background: linear-gradient(135deg, var(--bg-dark) 0%, #2a2a2a 100%);
    color: white;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}
.quote-container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    padding: 4rem;
    text-align: center;
    z-index: 2;
}
.cultural-slogan {
    font-size: 5.5rem;
    font-weight: 500;
    background: linear-gradient(120deg, var(--accent-color), #FFA500);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
    margin: 2rem 0;
    text-align: center;
    position: relative;
    animation: glowPulse 3s infinite;
}
#cultural-heritage .section-title {
    color: var(--chinese-red);
}
@media (max-width: 768px) {
    .parallax-section {
        height: 400px;
    }
    .quote-container {
        padding: 2rem;
    }
    .cultural-slogan {
        font-size: 5rem;
        padding: 0 1rem;
    }
}
.fade-up {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
}
.fade-up.visible {
    opacity: 1;
    transform: translateY(0);
}
.dot-elastic {
    position: relative;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic 1s infinite linear;
}
.dot-elastic::before,
.dot-elastic::after {
    content: '';
    display: inline-block;
    position: absolute;
    top: 0;
}
.dot-elastic::before {
    left: -15px;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic-before 1s infinite linear;
}
.dot-elastic::after {
    left: 15px;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: var(--accent-color);
    color: var(--accent-color);
    animation: dot-elastic-after 1s infinite linear;
}
@keyframes dot-elastic-before {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1.5); }
    50% { transform: scale(1,0.67); }
    75% { transform: scale(1,1); }
    100% { transform: scale(1,1); }
}
@keyframes dot-elastic {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1); }
    50% { transform: scale(1,1.5); }
    75% { transform: scale(1,1); }
    100% { transform: scale(1,1); }
}
@keyframes dot-elastic-after {
    0% { transform: scale(1,1); }
    25% { transform: scale(1,1); }
    50% { transform: scale(1,0.67); }
    75% { transform: scale(1,1.5); }
    100% { transform: scale(1,1); }
}
.scroll-container {
    width: 100%;
    margin: 0 auto;
}
.chinese-scroll {
    width: 100%;
}
.site-header {
    position: relative;
    padding: 20px 0;
    background: linear-gradient(
        to bottom, 
        rgba(139, 0, 0, 0.9), 
        transparent
    );
    overflow: hidden;
}
.site-header::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        45deg,
        transparent,
        rgba(255, 215, 0, 0.1),
        transparent
    );
    animation: lightSweep 3s linear infinite;
    transform: rotate(45deg);
}
@keyframes lightSweep {
    0% { transform: rotate(45deg) translateY(-100%); }
    100% { transform: rotate(45deg) translateY(100%); }
}
.site-header h1 {
    color: var(--accent-color);
    text-shadow: 
        2px 2px 4px rgba(0, 0, 0, 0.3),
        0 0 20px rgba(255, 215, 0, 0.5);
    font-weight: 300;
    letter-spacing: 2px;
    text-align: center;
    position: relative;
    z-index: 2;
}
.chinese-knot {
    position: absolute;
    top: 20px;
    right: 50px;
    width: 40px;
    height: 40px;
    transform: rotate(45deg);
}
.chinese-knot::before,
.chinese-knot::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    border: 2px solid var(--accent-color);
    border-radius: 0 50% 50% 50%;
    animation: knotFloat 3s ease-in-out infinite;
}
.chinese-knot::after {
    transform: rotate(90deg);
    border-color: var(--primary-color);
}
@keyframes knotFloat {
    0%, 100% { transform: rotate(90deg) scale(1); }
    50% { transform: rotate(90deg) scale(1.1); }
}
.bamboo-content {
    width: 100%;
    position: relative;
    background: 
        linear-gradient(45deg, rgba(255, 215, 0, 0.05) 25%, transparent 25%) -50px 0,
        linear-gradient(-45deg, rgba(255, 215, 0, 0.05) 25%, transparent 25%) -50px 0,
        linear-gradient(45deg, transparent 75%, rgba(255, 215, 0, 0.05) 75%),
        linear-gradient(-45deg, transparent 75%, rgba(255, 215, 0, 0.05) 75%);
    background-size: 100px 100px;
    background-attachment: fixed;
}
.stats-section {
    background: var(--overlay-color);
    padding: 60px 0;
    position: relative;
    overflow: hidden;
    margin: 40px 0;
}
.stats-container {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    max-width: 1200px;
    margin: 0 auto;
    gap: 40px;
}
.stat-item {
    position: relative;
    color: var(--accent-color);
    text-align: center;
    padding: 30px;
    min-width: 250px;
    background: rgba(26, 26, 26, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    border: 1px solid rgba(255, 215, 0, 0.2);
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.1);
}
.stat-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 30px rgba(255, 215, 0, 0.2);
    transition: all 0.3s ease;
}
.stat-number {
    font-size: 4rem;
    font-weight: 400;
    display: flex;
    justify-content: center;
    align-items: baseline;
    text-shadow: 0 0 15px rgba(255, 215, 0, 0.4);
    color: var(--accent-color);
}
.stat-number .plus {
    font-size: 2rem;
    margin-left: 5px;
}
.stat-label {
    color: var(--text-light);
    font-size: 1.2rem;
    margin-top: 10px;
    font-weight: 400;
}
.stat-wave {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
    animation: waveFlow 2s linear infinite;
}
@keyframes waveFlow {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}
.experience-btn {
    display: inline-block;
    padding: 8px 20px;
    margin-top: 15px;
    background: linear-gradient(45deg, var(--chinese-red), var(--primary-color));
    color: white;
    text-decoration: none;
    border-radius: 25px;
    font-size: 14px;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
}
.experience-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(139, 0, 0, 0.3);
    background: linear-gradient(45deg, var(--primary-color), var(--chinese-red));
}
.cultural-slogan {
    font-size: 2.5rem;
    font-weight: 500;
    background: linear-gradient(120deg, var(--accent-color), #FFA500);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
    margin: 1rem 0;
    text-align: center;
    position: relative;
    animation: glowPulse 3s infinite;
    transform: translateZ(0);
    backface-visibility: hidden;
    will-change: transform;
}
@keyframes glowPulse {
    0%, 100% {
        text-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
    }
    50% {
        text-shadow: 0 0 50px rgba(255, 215, 0, 0.5);
    }
}
.cultural-slogan::before {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 300px;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
}
@media (max-width: 768px) {
    .cultural-slogan {
        font-size: 4rem;
        padding: 0 1rem;
    }
}
.footer-left {
    display: flex;
    align-items: center;
    gap: 20px;
}
.footer-logo {
    width: 300px;
    height: auto;
    object-fit: contain;
}
.contact {
    text-align: left;
}
.opening-hours {
    text-align: right;
}

/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/research-achievements.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatDev数字博物馆</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Ma+Yen+Kai&display=swap" rel="stylesheet">
    <style>
        .achievements-container {
            padding: 50px 20px;
            background: rgba(244, 241, 234, 0.9);
            min-height: 100vh;
        }
        .section-title {
            text-align: center;
            font-size: 2.5em;
            color: #4A3728;
            margin-bottom: 60px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
        .scroll-gallery {
            position: relative;
            max-width: 1800px;
            margin: 0 auto;
            height: calc(800px * 3);
            display: flex;
            gap: 20px;
            padding: 20px;
            overflow: hidden;
        }
        .scroll-column {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
            animation-fill-mode: both;
            will-change: transform;
        }
        .scroll-column:nth-child(1) {
            animation-name: scrollDown;
            animation-duration: 17.5s;
            transform: translateY(-40%);
        }
        .scroll-column:nth-child(2) {
            animation-name: scrollUp;
            animation-duration: 22.5s;
            transform: translateY(-30%);
        }
        .scroll-column:nth-child(3) {
            animation-name: scrollDown;
            animation-duration: 20s;
            transform: translateY(-50%);
        }
        .scroll-column:nth-child(4) {
            animation-name: scrollUp;
            animation-duration: 25s;
            transform: translateY(-20%);
        }
        .scroll-column:nth-child(5) {
            animation-name: scrollDown;
            animation-duration: 19s;
            transform: translateY(-35%);
        }
        @keyframes scrollUp {
            0% {
                transform: translateY(0);
            }
            100% {
                transform: translateY(-50%);
            }
        }
        @keyframes scrollDown {
            0% {
                transform: translateY(-50%);
            }
            100% {
                transform: translateY(0);
            }
        }
        .scroll-column:hover {
            animation-play-state: paused;
        }
        .scroll-item {
            position: relative;
            height: 800px;
            min-width: 250px;
            background: #FFF;
            border-radius: 15px;
            overflow: hidden;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.4s ease;
            flex-shrink: 0;
        }
        .scroll-item:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            z-index: 10;
        }
        .scroll-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.4s ease;
        }
        .scroll-item:hover .scroll-image {
            transform: scale(1.05);
        }
        .scroll-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
            padding: 20px;
            color: #FFF;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.4s ease;
        }
        .scroll-item:hover .scroll-overlay {
            opacity: 1;
            transform: translateY(0);
        }
        .scroll-title {
            font-size: 1.4em;
            margin-bottom: 10px;
            color: #F4E4BC;
        }
        .scroll-date {
            font-size: 0.9em;
            color: #DEB887;
            margin-bottom: 10px;
        }
        .expanded-view {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 1000;
            display: none;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        .expanded-view.active {
            display: flex;
            opacity: 1;
        }
        .expanded-content {
            position: relative;
            width: 90%;
            max-width: 1200px;
            height: 90%;
            display: flex;
            gap: 30px;
            color: #FFF;
            transform: scale(0.9);
            transition: transform 0.5s ease;
        }
        .expanded-view.active .expanded-content {
            transform: scale(1);
        }
        .expanded-image {
            flex: 1;
            max-width: 70%;
            height: 100%;
            object-fit: contain;
        }
        .expanded-info {
            flex: 0 0 30%;
            padding: 20px;
            overflow-y: auto;
        }
        .close-expanded {
            position: absolute;
            top: 20px;
            right: 20px;
            color: #FFF;
            font-size: 30px;
            cursor: pointer;
            background: none;
            border: none;
            z-index: 1;
        }
        .scroll-item:nth-child(3n+1),
        .scroll-item:nth-child(3n+2),
        .scroll-item:nth-child(3n+3) {
            transform-origin: center;
        }
        @media (max-width: 1200px) {
            .scroll-gallery {
                gap: 15px;
                height: calc(700px * 3);
            }
            .scroll-item {
                height: 700px;
                min-width: 200px;
            }
        }
        @media (max-width: 768px) {
            .scroll-gallery {
                gap: 10px;
                height: calc(600px * 3);
            }
            .scroll-item {
                height: 600px;
                min-width: 150px;
            }
        }
        .scroll-indicator {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 100;
        }
        .indicator-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: rgba(139, 69, 19, 0.3);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .indicator-dot.active {
            background: #8B4513;
            transform: scale(1.5);
        }
    </style>
</head>
<body>
    <div class="scroll-container">
        <div class="chinese-scroll">
            <div class="bamboo-content">
                <div class="pattern-overlay"></div>
                <header>
                    <nav>
                        <div class="logo">ChatDev数字博物馆</div>
                        <ul>
                            <li><a href="index.html" class="magnetic-link"><span>返回首页</span></a></li>
                        </ul>
                    </nav>
                </header>
                <main>
                    <div class="achievements-container">
                        <h2 class="section-title" data-aos="fade-up">全辑整理</h2>
                        <div class="scroll-gallery">
                            <div class="scroll-column">
                                <div class="scroll-item">
                                    <img src="images/research-achievements/1.png" alt="清华简第一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第一辑</h3>
                                        <div class="scroll-date">2010年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/2.png" alt="清华简第二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第二辑</h3>
                                        <div class="scroll-date">2011年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/3.png" alt="清华简第三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第三辑</h3>
                                        <div class="scroll-date">2012年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/4.png" alt="清华简第四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第四辑</h3>
                                        <div class="scroll-date">2013年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/5.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/6.png" alt="清华简第六辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第六辑</h3>
                                        <div class="scroll-date">2016年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/7.png" alt="清华简第七辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第七辑</h3>
                                        <div class="scroll-date">2017年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/8.png" alt="清华简第八辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第八辑</h3>
                                        <div class="scroll-date">2018年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/9.png" alt="清华简第九辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第九辑</h3>
                                        <div class="scroll-date">2019年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/10.png" alt="清华简第十辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十辑</h3>
                                        <div class="scroll-date">2020年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/11.png" alt="清华简第十一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十一辑</h3>
                                        <div class="scroll-date">2021年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/12.png" alt="清华简第十二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十二辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/13.png" alt="清华简第十三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十三辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/14.png" alt="清华简第十四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十四辑</h3>
                                        <div class="scroll-date">2023年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/15.png" alt="清华简第一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第一辑</h3>
                                        <div class="scroll-date">2010年12月</div>
                                    </div>
                                </div>
                            </div>
                            <div class="scroll-column">
                                <div class="scroll-item">
                                    <img src="images/research-achievements/14.png" alt="清华简第二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第二辑</h3>
                                        <div class="scroll-date">2011年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/13.png" alt="清华简第三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第三辑</h3>
                                        <div class="scroll-date">2012年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/12.png" alt="清华简第四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第四辑</h3>
                                        <div class="scroll-date">2013年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/11.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/10.png" alt="清华简第六辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第六辑</h3>
                                        <div class="scroll-date">2016年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/9.png" alt="清华简第七辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第七辑</h3>
                                        <div class="scroll-date">2017年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/8.png" alt="清华简第八辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第八辑</h3>
                                        <div class="scroll-date">2018年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/7.png" alt="清华简第九辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第九辑</h3>
                                        <div class="scroll-date">2019年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/6.png" alt="清华简第十辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十辑</h3>
                                        <div class="scroll-date">2020年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/5.png" alt="清华简第十一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十一辑</h3>
                                        <div class="scroll-date">2021年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/4.png" alt="清华简第十二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十二辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/3.png" alt="清华简第十三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十三辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/2.png" alt="清华简第十四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十四辑</h3>
                                        <div class="scroll-date">2023年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/1.png" alt="清华简第二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第二辑</h3>
                                        <div class="scroll-date">2011年12月</div>
                                    </div>
                                </div>
                            </div>
                            <div class="scroll-column">
                                <div class="scroll-item">
                                    <img src="images/research-achievements/2.png" alt="清华简第三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第三辑</h3>
                                        <div class="scroll-date">2012年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/3.png" alt="清华简第四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第四辑</h3>
                                        <div class="scroll-date">2013年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/4.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/5.png" alt="清华简第六辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第六辑</h3>
                                        <div class="scroll-date">2016年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/6.png" alt="清华简第七辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第七辑</h3>
                                        <div class="scroll-date">2017年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/7.png" alt="清华简第八辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第八辑</h3>
                                        <div class="scroll-date">2018年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/8.png" alt="清华简第九辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第九辑</h3>
                                        <div class="scroll-date">2019年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/9.png" alt="清华简第十辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十辑</h3>
                                        <div class="scroll-date">2020年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/10.png" alt="清华简第十一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十一辑</h3>
                                        <div class="scroll-date">2021年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/11.png" alt="清华简第十二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十二辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/12.png" alt="清华简第十三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十三辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/13.png" alt="清华简第十四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十四辑</h3>
                                        <div class="scroll-date">2023年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/14.png" alt="清华简第三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第三辑</h3>
                                        <div class="scroll-date">2012年12月</div>
                                    </div>
                                </div>
                            </div>
                            <div class="scroll-column">
                                <div class="scroll-item">
                                    <img src="images/research-achievements/15.png" alt="清华简第四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第四辑</h3>
                                        <div class="scroll-date">2013年12月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/14.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/13.png" alt="清华简第六辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第六辑</h3>
                                        <div class="scroll-date">2016年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/12.png" alt="清华简第七辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第七辑</h3>
                                        <div class="scroll-date">2017年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/11.png" alt="清华简第八辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第八辑</h3>
                                        <div class="scroll-date">2018年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/10.png" alt="清华简第九辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第九辑</h3>
                                        <div class="scroll-date">2019年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/9.png" alt="清华简第十辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十辑</h3>
                                        <div class="scroll-date">2020年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/8.png" alt="清华简第十一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十一辑</h3>
                                        <div class="scroll-date">2021年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/7.png" alt="清华简第十二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十二辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/6.png" alt="清华简第十三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十三辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/5.png" alt="清华简第十四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十四辑</h3>
                                        <div class="scroll-date">2023年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/4.png" alt="清华简第四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第四辑</h3>
                                        <div class="scroll-date">2013年12月</div>
                                    </div>
                                </div>
                            </div>
                            <div class="scroll-column">
                                <div class="scroll-item">
                                    <img src="images/research-achievements/3.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/2.png" alt="清华简第六辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第六辑</h3>
                                        <div class="scroll-date">2016年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/1.png" alt="清华简第七辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第七辑</h3>
                                        <div class="scroll-date">2017年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/2.png" alt="清华简第八辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第八辑</h3>
                                        <div class="scroll-date">2018年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/3.png" alt="清华简第九辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第九辑</h3>
                                        <div class="scroll-date">2019年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/4.png" alt="清华简第十辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十辑</h3>
                                        <div class="scroll-date">2020年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/5.png" alt="清华简第十一辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十一辑</h3>
                                        <div class="scroll-date">2021年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/6.png" alt="清华简第十二辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十二辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/7.png" alt="清华简第十三辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十三辑</h3>
                                        <div class="scroll-date">2022年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/8.png" alt="清华简第十四辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第十四辑</h3>
                                        <div class="scroll-date">2023年</div>
                                    </div>
                                </div>
                                <div class="scroll-item">
                                    <img src="images/research-achievements/9.png" alt="清华简第五辑" class="scroll-image">
                                    <div class="scroll-overlay">
                                        <h3 class="scroll-title">《清华简》第五辑</h3>
                                        <div class="scroll-date">2015年4月</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
                <footer>
                    <div class="footer-content">
                        <div class="footer-left">
                            <img src="images/logo/chatdev-logo.png" alt="ChatDev Logo" class="footer-logo">
                            <div class="contact" data-aos="fade-up">
                                <p>ChatDev数字博物馆</p>
                                <p>https://github.com/OpenBMB/ChatDev</p>
                            </div>
                        </div>
                        <div class="opening-hours" data-aos="fade-up" data-aos-delay="100">
                            <p>以上内容由AI生成，可能存在偏差，请谨慎使用</p>
                        </div>
                    </div>
                </footer>
            </div>
        </div>
    </div>
    <div class="expanded-view">
        <button class="close-expanded">&times;</button>
        <div class="expanded-content">
            <img src="" alt="" class="expanded-image">
            <div class="expanded-info">
                <h2 class="expanded-title"></h2>
                <div class="expanded-date"></div>
                <div class="expanded-description"></div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>
        AOS.init({
            duration: 1000,
            once: true
        });
        const scrollItems = document.querySelectorAll('.scroll-item');
        const expandedView = document.querySelector('.expanded-view');
        const expandedImage = expandedView.querySelector('.expanded-image');
        const expandedTitle = expandedView.querySelector('.expanded-title');
        const expandedDate = expandedView.querySelector('.expanded-date');
        const expandedDescription = expandedView.querySelector('.expanded-description');
        const closeExpanded = expandedView.querySelector('.close-expanded');
        const descriptions = [
            "收录《周武王有疾周公所自以代王之志》《皇门》等重要文献为研究周代历史提供新材料。",
            "包含《系年》等重要历史文献，为战国时期编年史研究提供重要参考。",
            "收录《赵简子》《祭公》等文献，展现先秦时期政治制度与礼仪文化。",
            "包含《郑文公》《克殷》等篇章，丰富了我们对商周之际历史的认识。",
            "收录《湯處》《厚父》等重要文献，展现商周时期的政治思想。",
            "包含多篇重要历史文献，进一步丰富了先秦历史研究资料。",
            "展现了战国时期的政治、文化等多个方面的珍贵史料。",
            "记载了大量先秦时期的重要历史事件和文化现象。",
            "为研究先秦历史提供了新的文献依据和研究视角。",
            "展现了战国时期的文化特征和历史发展脉络。",
            "记录了大量珍贵的历史资料和文化遗产。",
            "为研究先秦历史提供了重要的文献支持。",
            "包含多篇重要的历史文献和文化记载。",
            "展现了战国时期丰富的历史文化内涵。"
        ];
        scrollItems.forEach((item, index) => {
            item.addEventListener('click', () => {
                const image = item.querySelector('.scroll-image');
                const title = item.querySelector('.scroll-title');
                const date = item.querySelector('.scroll-date');
                expandedImage.src = image.src.replace('600x800', '1200x1600');
                expandedTitle.textContent = title.textContent;
                expandedDate.textContent = date.textContent;
                const randomIndex = Math.floor(Math.random() * descriptions.length);
                expandedDescription.textContent = descriptions[randomIndex];
                expandedView.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
        });
        closeExpanded.addEventListener('click', () => {
            expandedView.classList.remove('active');
            document.body.style.overflow = '';
        });
        expandedView.addEventListener('click', (e) => {
            if (e.target === expandedView) {
                expandedView.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && expandedView.classList.contains('active')) {
                expandedView.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    </script>
</body>
</html> 

/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/warring-states-bamboo.html

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatDev数字博物馆</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Ma+Yen+Kai&display=swap" rel="stylesheet">
    <style>
        .bamboo-container {
            padding: 50px 20px;
            background: rgba(244, 241, 234, 0.9);
            min-height: 100vh;
        }
        .section-title {
            text-align: center;
            font-size: 2.5em;
            color: #4A3728;
            margin-bottom: 60px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
        .gallery-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        .gallery-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 40px;
            margin-bottom: 60px;
        }
        .gallery-item {
            position: relative;
            background: #DEB887;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .gallery-item:hover {
            transform: translateY(-10px);
        }
        .gallery-image {
            width: 100%;
            height: 500px;
            object-fit: cover;
            border-radius: 15px 15px 0 0;
            transition: transform 0.3s ease;
        }
        .gallery-item:hover .gallery-image {
            transform: scale(1.05);
        }
        .gallery-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(89, 44, 12, 0.95), transparent);
            padding: 30px;
            color: #FFFFFF;
            transform: translateY(70%);
            transition: transform 0.3s ease;
        }
        .gallery-item:hover .gallery-overlay {
            transform: translateY(0);
        }
        .gallery-title {
            font-size: 1.8em;
            margin-bottom: 15px;
            color: #FFE4B5;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .gallery-description {
            font-size: 1.1em;
            line-height: 1.6;
            margin-bottom: 20px;
            opacity: 1;
            color: #FFFFFF;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
        }
        .gallery-details {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
            font-size: 0.95em;
        }
        .gallery-details ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .gallery-details li {
            margin-bottom: 8px;
            padding-left: 20px;
            position: relative;
            color: #FFE4B5;
        }
        .gallery-details li::before {
            content: '•';
            position: absolute;
            left: 0;
            color: #FFE4B5;
        }
        .featured-section {
            position: relative;
            height: 600px;
            margin-bottom: 60px;
            border-radius: 20px;
            overflow: hidden;
        }
        .featured-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .featured-content {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 40px;
            background: linear-gradient(to top, rgba(89, 44, 12, 0.95), transparent);
            color: #FFFFFF;
        }
        .featured-title {
            font-size: 2.5em;
            margin-bottom: 20px;
            color: #FFE4B5;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .featured-description {
            font-size: 1.2em;
            line-height: 1.8;
            max-width: 800px;
            color: #FFFFFF;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
            opacity: 1;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            transition: background-color 0.5s ease-in-out;
        }
        .modal.active {
            display: flex;
            background-color: rgba(0, 0, 0, 0.9);
        }
        .modal-content {
            position: relative;
            max-width: 90%;
            max-height: 90vh;
        }
        .modal-image {
            max-width: 100%;
            max-height: 90vh;
            object-fit: contain;
        }
        .close-modal {
            position: absolute;
            top: -40px;
            right: 0;
            color: white;
            font-size: 30px;
            cursor: pointer;
            background: none;
            border: none;
            padding: 10px;
        }
        @media (max-width: 768px) {
            .gallery-grid {
                grid-template-columns: 1fr;
            }
            .gallery-image {
                height: 400px;
            }
            .featured-section {
                height: 400px;
            }
            .featured-title {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="scroll-container">
        <div class="chinese-scroll">
            <div class="bamboo-content">
                <div class="pattern-overlay"></div>
                <header>
                    <nav>
                        <div class="logo">ChatDev数字博物馆</div>
                        <ul>
                            <li><a href="index.html" class="magnetic-link"><span>返回首页</span></a></li>
                        </ul>
                    </nav>
                </header>
                <main>
                    <div class="bamboo-container">
                        <h2 class="section-title" data-aos="fade-up">战国文化</h2>
                        <div class="gallery-container">
                            <div class="featured-section" data-aos="fade-up">
                                <img src="./images/warring-states-bamboo-1.png" alt="清华简" class="featured-image">
                                <div class="featured-content">
                                    <h2 class="featured-title">清华简 - 战国时期的文化瑰宝</h2>
                                    <p class="featured-description">2008年入藏清华大学的2500余枚战国竹简，是迄今为止最重要的先秦文献发现之一，为研究中国古代历史提供了珍贵的第一手资料。</p>
                                </div>
                            </div>
                            <div class="gallery-grid">
                                <div class="gallery-item" data-aos="fade-up">
                                    <img src="./images/warring-states-bamboo-sub1.png" alt="礼仪记录" class="gallery-image">
                                    <div class="gallery-overlay">
                                        <h3 class="gallery-title">礼仪记录</h3>
                                        <p class="gallery-description">两篇文献编连成卷，竹简长约46厘米，宽约0.6厘米，详细记载了楚国大夫饮食礼仪制度。</p>
                                        <div class="gallery-details">
                                            <ul>
                                                <li>《大夫食礼》51支简，《大夫食礼记》14支简</li>
                                                <li>简背有刻画痕迹，各简均有编号</li>
                                                <li>前者记载食礼内容，后者论述执事者职责</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="gallery-item" data-aos="fade-up" data-aos-delay="100">
                                    <img src="./images/warring-states-bamboo-sub2.png" alt="八卦图" class="gallery-image">
                                    <div class="gallery-overlay">
                                        <h3 class="gallery-title">八卦占卜</h3>
                                        <p class="gallery-description">战国时期楚国独特的占筮方法，是目前所见最早的《易》图。</p>
                                        <div class="gallery-details">
                                            <ul>
                                                <li>保存完好，维持原来成卷状态</li>
                                                <li>分栏书写，附有插图和表格</li>
                                                <li>首次展现八卦分置八方的卦位图</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="gallery-item" data-aos="fade-up" data-aos-delay="200">
                                    <img src="./images/warring-states-bamboo-sub3.png" alt="算表" class="gallery-image">
                                    <div class="gallery-overlay">
                                        <h3 class="gallery-title">数学算表</h3>
                                        <p class="gallery-description">形成于公元前305年左右的古代数学文献，比里耶秦简九九表更早。</p>
                                        <div class="gallery-details">
                                            <ul>
                                                <li>21支竹简构成21行20列的计算表</li>
                                                <li>可用于两位数乘除法运算</li>
                                                <li>支持含分数1/2的两位数乘法</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
                <footer>
                    <div class="footer-content">
                        <div class="footer-left">
                            <img src="images/logo/chatdev-logo.png" alt="ChatDev Logo" class="footer-logo">
                            <div class="contact" data-aos="fade-up">
                                <p>ChatDev数字博物馆</p>
                                <p>https://github.com/OpenBMB/ChatDev</p>
                            </div>
                        </div>
                        <div class="opening-hours" data-aos="fade-up" data-aos-delay="100">
                            <p>以上内容由AI生成，可能存在偏差，请谨慎使用</p>
                        </div>
                    </div>
                </footer>
            </div>
        </div>
    </div>
    <div class="modal" id="imageModal">
        <div class="modal-content">
            <button class="close-modal">&times;</button>
            <img src="" alt="" class="modal-image">
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>
        AOS.init({
            duration: 1000,
            once: true
        });
        const modal = document.getElementById('imageModal');
        const modalImage = modal.querySelector('.modal-image');
        const closeButton = modal.querySelector('.close-modal');
        const images = document.querySelectorAll('.gallery-image, .featured-image');
        images.forEach(image => {
            image.addEventListener('click', () => {
                modalImage.src = image.src.replace('600x800', '1200x1600').replace('1400x600', '2800x1200');
                modal.classList.add('active');
            });
        });
        closeButton.addEventListener('click', () => {
            modal.classList.remove('active');
        });
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.classList.contains('active')) {
                modal.classList.remove('active');
            }
        });
    </script>
</body>
</html> 

/home/brandon/Projects/ChatDev/WareHouse/TsinghuaBambooWebsite_THUNLPDemo_2024/script.js

document.addEventListener('DOMContentLoaded', function() {
    AOS.init({
        duration: 1000,
        once: true,
        offset: 100,
        disable: '.parallax-section'     });
    const swiper = new Swiper('.hero-slider', {
        loop: true,
        speed: 1000,
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
    });
    const magneticLinks = document.querySelectorAll('.magnetic-link');
    magneticLinks.forEach(link => {
        link.addEventListener('mousemove', function(e) {
            const bounds = this.getBoundingClientRect();
            const mouseX = e.clientX - bounds.left;
            const mouseY = e.clientY - bounds.top;
            const centerX = bounds.width / 2;
            const centerY = bounds.height / 2;
            const deltaX = mouseX - centerX;
            const deltaY = mouseY - centerY;
            gsap.to(this, {
                x: deltaX * 0.3,
                y: deltaY * 0.3,
                duration: 0.3
            });
        });
        link.addEventListener('mouseleave', function() {
            gsap.to(this, {
                x: 0,
                y: 0,
                duration: 0.3
            });
        });
    });
    gsap.registerPlugin(ScrollTrigger);
    const timelineItems = document.querySelectorAll('.timeline-item');
    timelineItems.forEach((item, index) => {
        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: item,
                start: "top center+=100",
                end: "bottom center",
                toggleActions: "play none none reverse"
            }
        });
        tl.from(item.querySelector('::before'), {
            scale: 0,
            opacity: 0,
            duration: 0.6,
            ease: "back.out(1.7)"
        });
        tl.from(item.querySelector('.timeline-content'), {
            x: index % 2 === 0 ? 50 : -50,
            opacity: 0,
            duration: 0.8,
            ease: "power2.out"
        }, "-=0.3");
        tl.from(item.querySelector('.timeline-period'), {
            y: 20,
            opacity: 0,
            duration: 0.5,
            ease: "power2.out"
        }, "-=0.4");
    });
    VanillaTilt.init(document.querySelectorAll('.digital-card'), {
        max: 15,
        speed: 400,
        glare: true,
        'max-glare': 0.2
    });
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                window.scrollTo({
                    top: target.offsetTop - 70,
                    behavior: 'smooth'
                });
            }
        });
    });
    const patternOverlay = document.querySelector('.pattern-overlay');
    window.addEventListener('mousemove', (e) => {
        const moveX = (e.clientX - window.innerWidth / 2) * 0.01;
        const moveY = (e.clientY - window.innerHeight / 2) * 0.01;
        gsap.to(patternOverlay, {
            x: moveX,
            y: moveY,
            duration: 1,
            ease: 'power2.out'
        });
    });
    const exhibitionCards = document.querySelectorAll('.exhibition-card');
    exhibitionCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            gsap.to(card, {
                y: -10,
                scale: 1.02,
                duration: 0.3,
                ease: 'power2.out'
            });
        });
        card.addEventListener('mouseleave', () => {
            gsap.to(card, {
                y: 0,
                scale: 1,
                duration: 0.3,
                ease: 'power2.out'
            });
        });
    });
    function createParticles() {
        const particleContainer = document.createElement('div');
        particleContainer.className = 'particle-container';
        document.body.appendChild(particleContainer);
        for (let i = 0; i < 50; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + 'vw';
            particle.style.animationDelay = Math.random() * 5 + 's';
            particleContainer.appendChild(particle);
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        createParticles();
        const scrollElements = document.querySelectorAll('.bamboo-content > *');
        scrollElements.forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateX(-20px)';
        });
        const revealOnScroll = () => {
            scrollElements.forEach(element => {
                const elementTop = element.getBoundingClientRect().top;
                if (elementTop < window.innerHeight - 100) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateX(0)';
                    element.style.transition = 'all 0.8s ease';
                }
            });
        };
        window.addEventListener('scroll', revealOnScroll);
        revealOnScroll();
    });
    function animateCounter(element) {
        const target = parseInt(element.dataset.target);
        const duration = 2000; 
        const step = target / (duration / 16);         let current = 0;
        const updateCounter = () => {
            current += step;
            if (current < target) {
                element.textContent = Math.floor(current);
                requestAnimationFrame(updateCounter);
            } else {
                element.textContent = target;
            }
        };
        updateCounter();
    }
    const observerOptions = {
        threshold: 0.5
    };
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const counters = entry.target.querySelectorAll('.counter');
                counters.forEach(counter => animateCounter(counter));
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    document.querySelectorAll('.stats-section').forEach(section => {
        observer.observe(section);
    });
});


/home/brandon/Projects/ChatDev/WareHouse/Fish_Tycoon_THUNLP_20230825093543/main.py

'''
This is the main file of the virtual aquarium life simulator.
'''
import tkinter as tk
from aquarium import Aquarium, Fish, Effect
class AquariumApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Virtual Aquarium")
        self.aquarium = Aquarium()
        self.canvas = tk.Canvas(self, width=800, height=600)
        self.canvas.pack()
        self.update_aquarium()
    def update_aquarium(self):
        self.canvas.delete("all")
        self.aquarium.update()
        self.draw_aquarium()
        self.after(100, self.update_aquarium)
    def draw_aquarium(self):
        for fish in self.aquarium.fishes:
            self.canvas.create_oval(fish.x, fish.y, fish.x+20, fish.y+20, fill="blue")
        for effect in self.aquarium.effects:
            self.canvas.create_oval(effect.x, effect.y, effect.x+10, effect.y+10, fill="yellow")
if __name__ == "__main__":
    app = AquariumApp()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Fish_Tycoon_THUNLP_20230825093543/aquarium.py

'''
This file contains the Aquarium class which represents the virtual aquarium.
'''
import random
class Fish:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed = random.randint(1, 5)
    def update(self):
        self.x += self.speed
class Effect:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed = random.randint(1, 3)
    def update(self):
        self.x += self.speed
class Aquarium:
    def __init__(self):
        self.fishes = []
        self.effects = []
        for _ in range(10):
            x = random.randint(0, 780)
            y = random.randint(0, 580)
            self.fishes.append(Fish(x, y))
        for _ in range(5):
            x = random.randint(0, 780)
            y = random.randint(0, 580)
            self.effects.append(Effect(x, y))
    def update(self):
        for fish in self.fishes:
            fish.update()
        for effect in self.effects:
            effect.update()

/home/brandon/Projects/ChatDev/WareHouse/md2html_THUNLP_20230823102935/markdown_parser.py

'''
This file contains the MarkdownParser class responsible for parsing markdown syntax.
'''
import re
class MarkdownParser:
    def parse(self, markdown_content):
        parsed_content = []
        lines = markdown_content.split("\n")
        for line in lines:
            if line.startswith("#"):
                parsed_content.append(self.parse_heading(line))
            elif line.startswith("*") or line.startswith("-"):
                parsed_content.append(self.parse_list(line))
            elif line.startswith(">"):
                parsed_content.append(self.parse_blockquote(line))
            elif line.startswith("`"):
                parsed_content.append(self.parse_code_block(line))
            else:
                parsed_content.append(self.parse_paragraph(line))
        return parsed_content
    def parse_heading(self, line):
        level = line.count("#")
        content = line.strip("#").strip()
        return {"type": "heading", "level": level, "content": content}
    def parse_list(self, line):
        ordered = line.startswith("1.")
        items = [item.strip() for item in re.split(r"[*-]\s", line) if item.strip()]
        return {"type": "list", "ordered": ordered, "content": items}
    def parse_blockquote(self, line):
        content = line.strip(">")
        return {"type": "blockquote", "content": content}
    def parse_code_block(self, line):
        content = line.strip("`")
        return {"type": "code_block", "content": content}
    def parse_paragraph(self, line):
        return {"type": "paragraph", "content": line}

/home/brandon/Projects/ChatDev/WareHouse/md2html_THUNLP_20230823102935/html_generator.py

'''
This file contains the HTMLGenerator class responsible for generating HTML markup from parsed markdown content.
'''
class HTMLGenerator:
    def generate_html(self, parsed_content):
        html_output = ""
        for element in parsed_content:
            if element["type"] == "heading":
                html_output += self.generate_heading(element["content"], element["level"])
            elif element["type"] == "paragraph":
                html_output += self.generate_paragraph(element["content"])
            elif element["type"] == "list":
                html_output += self.generate_list(element["content"], element["ordered"])
            elif element["type"] == "emphasis":
                html_output += self.generate_emphasis(element["content"])
            elif element["type"] == "link":
                html_output += self.generate_link(element["content"], element["url"])
            elif element["type"] == "image":
                html_output += self.generate_image(element["alt_text"], element["url"])
            elif element["type"] == "code_block":
                html_output += self.generate_code_block(element["content"])
        return html_output
    def generate_heading(self, content, level):
        return f"<h{level}>{content}</h{level}>\n"
    def generate_paragraph(self, content):
        return f"<p>{content}</p>\n"
    def generate_list(self, items, ordered):
        list_type = "ol" if ordered else "ul"
        list_items = "".join([f"<li>{item}</li>\n" for item in items])
        return f"<{list_type}>\n{list_items}</{list_type}>\n"
    def generate_emphasis(self, content):
        return f"<em>{content}</em>"
    def generate_link(self, content, url):
        return f'<a href="{url}">{content}</a>'
    def generate_image(self, alt_text, url):
        return f'<img src="{url}" alt="{alt_text}">'
    def generate_code_block(self, content):
        return f"<pre><code>{content}</code></pre>\n"

/home/brandon/Projects/ChatDev/WareHouse/md2html_THUNLP_20230823102935/main.py

'''
This is the main file that serves as the entry point for the markdown to HTML converter application.
'''
import tkinter as tk
from tkinter import filedialog
from markdown_parser import MarkdownParser
from html_generator import HTMLGenerator
class MarkdownToHTMLConverter:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Markdown to HTML Converter")
        self.root.geometry("500x300")
        self.file_path = tk.StringVar()
        self.create_widgets()
    def create_widgets(self):
        label = tk.Label(self.root, text="Select a Markdown file:")
        label.pack()
        file_entry = tk.Entry(self.root, textvariable=self.file_path, width=50)
        file_entry.pack()
        browse_button = tk.Button(self.root, text="Browse", command=self.browse_file)
        browse_button.pack()
        convert_button = tk.Button(self.root, text="Convert", command=self.convert_to_html)
        convert_button.pack()
    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Markdown Files", "*.md")])
        self.file_path.set(file_path)
    def convert_to_html(self):
        markdown_file = self.file_path.get()
        if markdown_file:
            parser = MarkdownParser()
            html_generator = HTMLGenerator()
            with open(markdown_file, 'r',encoding="utf-8") as file:
                markdown_content = file.read()
            parsed_content = parser.parse(markdown_content)
            html_output = html_generator.generate_html(parsed_content)
            save_path = filedialog.asksaveasfilename(defaultextension=".html", filetypes=[("HTML Files", "*.html")])
            if save_path:
                with open(save_path, 'w') as file:
                    file.write(html_output)
                tk.messagebox.showinfo("Conversion Complete", "Markdown to HTML conversion successful!")
        else:
            tk.messagebox.showerror("Error", "Please select a Markdown file.")
    def run(self):
        self.root.mainloop()
if __name__ == "__main__":
    converter = MarkdownToHTMLConverter()
    converter.run()

/home/brandon/Projects/ChatDev/WareHouse/BMI Calculator_DefaultOrganization_20230918110521/bmi_calculator.py

'''
This file contains the BMICalculator class.
'''
class BMICalculator:
    def calculate_bmi(self, weight, height):
        if height <= 0:
            raise ValueError("Height cannot be zero or negative.")
        bmi = weight / (height ** 2)
        return bmi

/home/brandon/Projects/ChatDev/WareHouse/BMI Calculator_DefaultOrganization_20230918110521/main.py

'''
This is the main file of the BMI calculator application.
'''
import tkinter as tk
from bmi_calculator import BMICalculator
class BMIApplication(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("BMI Calculator")
        self.geometry("300x200")
        self.bmi_calculator = BMICalculator()
        self.weight_label = tk.Label(self, text="Weight (kg):")
        self.weight_label.pack()
        self.weight_entry = tk.Entry(self)
        self.weight_entry.pack()
        self.height_label = tk.Label(self, text="Height (cm):")
        self.height_label.pack()
        self.height_entry = tk.Entry(self)
        self.height_entry.pack()
        self.calculate_button = tk.Button(self, text="Calculate", command=self.calculate_bmi)
        self.calculate_button.pack()
        self.result_label = tk.Label(self, text="")
        self.result_label.pack()
    def calculate_bmi(self):
        try:
            weight = float(self.weight_entry.get())
            height = float(self.height_entry.get()) / 100
            bmi = self.bmi_calculator.calculate_bmi(weight, height)
            self.result_label.config(text=f"BMI: {bmi:.2f}")
        except ValueError:
            self.result_label.config(text="Invalid input. Please enter numeric values for weight and height.")
        except ZeroDivisionError:
            self.result_label.config(text="Invalid input. Height cannot be zero.")
if __name__ == "__main__":
    app = BMIApplication()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/2048_THUNLP_20230822144615/main.py

'''
2048 Game
'''
import tkinter as tk
from game import Game
class GameApp:
    def __init__(self, master):
        self.master = master
        self.master.title("2048 Game")
        self.game = Game()
        self.create_widgets()
    def create_widgets(self):
        self.canvas = tk.Canvas(self.master, width=400, height=400, bg="white")
        self.canvas.pack()
        self.canvas.bind("<Key>", self.handle_keypress)
        self.canvas.focus_set()
    def handle_keypress(self, event):
        if event.keysym == "Up":
            self.game.move_up()
        elif event.keysym == "Down":
            self.game.move_down()
        elif event.keysym == "Left":
            self.game.move_left()
        elif event.keysym == "Right":
            self.game.move_right()
        self.update_grid()
        if self.game.is_game_over():
            self.canvas.unbind("<Key>")
            self.canvas.create_text(200, 200, text="Game Over", font=("Arial", 24), fill="red")
    def update_grid(self):
        self.canvas.delete("all")
        for row in range(10):
            for col in range(10):
                value = self.game.grid[row][col]
                x1 = col * 40
                y1 = row * 40
                x2 = x1 + 40
                y2 = y1 + 40
                self.canvas.create_rectangle(x1, y1, x2, y2, fill="light gray")
                if value != 0:
                    self.canvas.create_text((x1 + x2) / 2, (y1 + y2) / 2, text=str(value))
        self.canvas.update()
def main():
    root = tk.Tk()
    app = GameApp(root)
    root.mainloop()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/2048_THUNLP_20230822144615/game.py

'''
Game Logic
'''
import random
class Game:
    def __init__(self):
        self.grid = [[0] * 10 for _ in range(10)]
        self.add_random_tile()
        self.add_random_tile()
    def add_random_tile(self):
        empty_spots = []
        for row in range(10):
            for col in range(10):
                if self.grid[row][col] == 0:
                    empty_spots.append((row, col))
        if empty_spots:
            row, col = random.choice(empty_spots)
            self.grid[row][col] = random.choice([2, 4])
    def move_up(self):
        self.move_tiles("up")
        self.merge_tiles("up")
        self.move_tiles("up")
        self.add_random_tile()
    def move_down(self):
        self.move_tiles("down")
        self.merge_tiles("down")
        self.move_tiles("down")
        self.add_random_tile()
    def move_left(self):
        self.move_tiles("left")
        self.merge_tiles("left")
        self.move_tiles("left")
        self.add_random_tile()
    def move_right(self):
        self.move_tiles("right")
        self.merge_tiles("right")
        self.move_tiles("right")
        self.add_random_tile()
    def move_tiles(self, direction):
        if direction == "up":
            for col in range(10):
                for row in range(1, 10):
                    if self.grid[row][col] != 0:
                        self.move_tile(row, col, -1, 0)
        elif direction == "down":
            for col in range(10):
                for row in range(8, -1, -1):
                    if self.grid[row][col] != 0:
                        self.move_tile(row, col, 1, 0)
        elif direction == "left":
            for row in range(10):
                for col in range(1, 10):
                    if self.grid[row][col] != 0:
                        self.move_tile(row, col, 0, -1)
        elif direction == "right":
            for row in range(10):
                for col in range(8, -1, -1):
                    if self.grid[row][col] != 0:
                        self.move_tile(row, col, 0, 1)
    def move_tile(self, row, col, row_offset, col_offset):
        value = self.grid[row][col]
        self.grid[row][col] = 0
        while 0 <= row + row_offset < 10 and 0 <= col + col_offset < 10 and self.grid[row + row_offset][col + col_offset] == 0:
            row += row_offset
            col += col_offset
        self.grid[row][col] = value
    def merge_tiles(self, direction):
        if direction == "up":
            for col in range(10):
                for row in range(1, 10):
                    if self.grid[row][col] == self.grid[row - 1][col]:
                        self.grid[row - 1][col] *= 2
                        self.grid[row][col] = 0
        elif direction == "down":
            for col in range(10):
                for row in range(8, -1, -1):
                    if self.grid[row][col] == self.grid[row + 1][col]:
                        self.grid[row + 1][col] *= 2
                        self.grid[row][col] = 0
        elif direction == "left":
            for row in range(10):
                for col in range(1, 10):
                    if self.grid[row][col] == self.grid[row][col - 1]:
                        self.grid[row][col - 1] *= 2
                        self.grid[row][col] = 0
        elif direction == "right":
            for row in range(10):
                for col in range(8, -1, -1):
                    if self.grid[row][col] == self.grid[row][col + 1]:
                        self.grid[row][col + 1] *= 2
                        self.grid[row][col] = 0
    def is_game_over(self):
        for row in range(10):
            for col in range(10):
                if self.grid[row][col] == 2048:
                    return True
                if self.grid[row][col] == 0:
                    return False
                if row < 9 and self.grid[row][col] == self.grid[row + 1][col]:
                    return False
                if col < 9 and self.grid[row][col] == self.grid[row][col + 1]:
                    return False
        return True

/home/brandon/Projects/ChatDev/WareHouse/WordExpand_THUNLP_20230825093623/main.py

'''
This is the main file of the vocabulary builder app.
'''
import tkinter as tk
from tkinter import messagebox
from vocabulary import Vocabulary
class VocabularyApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Vocabulary Builder")
        self.vocabulary = Vocabulary()
        self.word_label = tk.Label(self.root, text="Word:")
        self.word_label.pack()
        self.word_entry = tk.Entry(self.root)
        self.word_entry.pack()
        self.synonyms_label = tk.Label(self.root, text="Synonyms:")
        self.synonyms_label.pack()
        self.synonyms_text = tk.Text(self.root, height=5, width=30)
        self.synonyms_text.pack()
        self.antonyms_label = tk.Label(self.root, text="Antonyms:")
        self.antonyms_label.pack()
        self.antonyms_text = tk.Text(self.root, height=5, width=30)
        self.antonyms_text.pack()
        self.examples_label = tk.Label(self.root, text="Usage Examples:")
        self.examples_label.pack()
        self.examples_text = tk.Text(self.root, height=5, width=30)
        self.examples_text.pack()
        self.search_button = tk.Button(self.root, text="Search", command=self.search_word)
        self.search_button.pack()
        self.root.mainloop()
    def search_word(self):
        word = self.word_entry.get()
        synonyms, antonyms, examples = self.vocabulary.search(word)
        if not any([synonyms, antonyms, examples]):
            messagebox.showinfo("Word Not Found", "The word was not found in the vocabulary.")
        else:
            self.synonyms_text.delete(1.0, tk.END)
            self.synonyms_text.insert(tk.END, "\n".join(synonyms))
            self.antonyms_text.delete(1.0, tk.END)
            self.antonyms_text.insert(tk.END, "\n".join(antonyms))
            self.examples_text.delete(1.0, tk.END)
            self.examples_text.insert(tk.END, "\n".join(examples))
if __name__ == "__main__":
    app = VocabularyApp()

/home/brandon/Projects/ChatDev/WareHouse/WordExpand_THUNLP_20230825093623/vocabulary.py

'''
This file contains the Vocabulary class.
'''
class Vocabulary:
    def __init__(self):
        self.words = {
            "happy": {
                "synonyms": ["joyful", "delighted", "content"],
                "antonyms": ["sad", "unhappy", "miserable"],
                "examples": ["I am happy to see you.", "She is always happy."]
            },
            "beautiful": {
                "synonyms": ["gorgeous", "stunning", "lovely"],
                "antonyms": ["ugly", "hideous", "unattractive"],
                "examples": ["The sunset looks beautiful.", "She is a beautiful person."]
            },
        }
    def search(self, word):
        if word in self.words:
            return self.words[word]["synonyms"], self.words[word]["antonyms"], self.words[word]["examples"]
        else:
            return [], [], []

/home/brandon/Projects/ChatDev/WareHouse/RandomPick_ModelBest1024_20231022154124/main.py

'''
Design a software that allows users to input several strings. Then the user randomly chooses one.
'''
from tkinter import Tk, Label, Entry, Button
import random
window = Tk()
window.title("String Chooser")
label = Label(window, text="Enter strings (separated by commas):")
label.pack()
entry = Entry(window)
entry.pack()
def choose_string():
    strings = entry.get().split(",")
    chosen_string = random.choice(strings)
    result_label.config(text=f"Randomly chosen string: {chosen_string}")
button = Button(window, text="Choose", command=choose_string)
button.pack()
result_label = Label(window, text="")
result_label.pack()
window.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/FlappyBird_THUNLP_20230726121145/main.py

'''
Flappy Bird Game
'''
import tkinter as tk
import random
class FlappyBirdGame:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Flappy Bird")
        self.canvas = tk.Canvas(self.window, width=400, height=600)
        self.canvas.pack()
        self.bird = Bird(self.canvas)
        self.pipes = []
        self.score = 0
        self.is_game_over = False
        self.canvas.bind("<space>", self.jump)
        self.canvas.bind("<Button-1>", self.jump)
        self.canvas.focus_set()
        self.update()
    def jump(self, event):
        if not self.is_game_over:
            self.bird.jump()
    def create_pipe(self):
        if random.random() < 0.01:
            gap_height = random.randint(100, 250)              print("gap_height", gap_height)
            pipe = Pipe(self.canvas, gap_height)
            self.pipes.append(pipe)
    def move_pipes(self):
        for pipe in self.pipes:
            pipe.move()
            if pipe.is_offscreen():
                self.pipes.remove(pipe)
                self.score += 1
    def check_collision(self):
        for pipe in self.pipes:
            if pipe.collides_with(self.bird):
                self.is_game_over = True
    def update(self):
        if not self.is_game_over:
            self.bird.move()
            self.move_pipes()
            self.create_pipe()
            self.check_collision()
            self.canvas.delete("score")
            self.canvas.create_text(50, 50, text=f"Score: {self.score}", tag="score", fill="white", font=("Arial", 16))
            self.canvas.after(20, self.update)
        else:
            self.canvas.create_text(200, 300, text="Game Over", fill="white", font=("Arial", 32))
class Bird:
    def __init__(self, canvas):
        self.canvas = canvas
        self.id = self.canvas.create_oval(50, 300, 70, 320, fill="yellow")
        self.y_speed = 0
    def jump(self):
        self.y_speed = -5
    def move(self):
        self.canvas.move(self.id, 0, self.y_speed)
        self.y_speed += 0.2
    def get_position(self):
        return self.canvas.coords(self.id)
class Pipe:
    def __init__(self, canvas, gap_height):
        self.canvas = canvas
        self.top_pipe = self.canvas.create_rectangle(400, 0, 420, gap_height, fill="green")
        self.bottom_pipe = self.canvas.create_rectangle(400, gap_height + 150, 420, 600, fill="green")
        self.x_speed = -2
    def move(self):
        self.canvas.move(self.top_pipe, self.x_speed, 0)
        self.canvas.move(self.bottom_pipe, self.x_speed, 0)
    def is_offscreen(self):
        return self.canvas.coords(self.top_pipe)[2] < 0
    def collides_with(self, bird):
        bird_pos = bird.get_position()
        top_pipe_pos = self.canvas.coords(self.top_pipe)
        bottom_pipe_pos = self.canvas.coords(self.bottom_pipe)
        if bird_pos[2] > top_pipe_pos[0] and bird_pos[0] < top_pipe_pos[2]:
            if bird_pos[1] < top_pipe_pos[3] or bird_pos[3] > bottom_pipe_pos[1]:
                return True
        return False
if __name__ == "__main__":
    game = FlappyBirdGame()
    game.window.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/chess_DefaultOrganization_20250202130130/chess_pieces.py

'''
This file contains the classes for different chess pieces.
'''
import tkinter as tk
class Piece:
    def __init__(self, color):
        self.color = color
        self.image = None
    def place(self, square):
        self.square = square
        self.image = tk.Label(square, image=self.get_image())
        self.image.pack()
    def get_image(self):
        pass
class Pawn(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_pawn.png")
        else:
            return tk.PhotoImage(file="white_pawn.png")
class Rook(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_rook.png")
        else:
            return tk.PhotoImage(file="white_rook.png")
class Knight(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_knight.png")
        else:
            return tk.PhotoImage(file="white_knight.png")
class Bishop(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_bishop.png")
        else:
            return tk.PhotoImage(file="white_bishop.png")
class Queen(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_queen.png")
        else:
            return tk.PhotoImage(file="white_queen.png")
class King(Piece):
    def __init__(self, color):
        super().__init__(color)
    def get_image(self):
        if self.color == "black":
            return tk.PhotoImage(file="black_king.png")
        else:
            return tk.PhotoImage(file="white_king.png")

/home/brandon/Projects/ChatDev/WareHouse/chess_DefaultOrganization_20250202130130/main.py

'''
This is the main file for the chess game.
'''
import tkinter as tk
from chess_board import ChessBoard
class ChessGame:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Chess Game")
        self.chess_board = ChessBoard(self.root)
        self.chess_board.pack()
        self.root.mainloop()
if __name__ == "__main__":
    game = ChessGame()

/home/brandon/Projects/ChatDev/WareHouse/chess_DefaultOrganization_20250202130130/chess_board.py

'''
This file contains the ChessBoard class which represents the chessboard GUI.
'''
import tkinter as tk
from chess_pieces import Pawn, Rook, Knight, Bishop, Queen, King
class ChessBoard(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.master = master
        self.board = [[None for _ in range(8)] for _ in range(8)]
        self.create_board()
    def create_board(self):
        for row in range(8):
            for col in range(8):
                if (row + col) % 2 == 0:
                    color = "white"
                else:
                    color = "black"
                square = tk.Frame(self, width=80, height=80, bg=color)
                square.grid(row=row, column=col)
                self.board[row][col] = square
        self.place_pieces()
    def place_pieces(self):
        for col in range(8):
            self.board[1][col].piece = Pawn("black")
            self.board[1][col].piece.place(self.board[1][col])
            self.board[6][col].piece = Pawn("white")
            self.board[6][col].piece.place(self.board[6][col])
        self.board[0][0].piece = Rook("black")
        self.board[0][0].piece.place(self.board[0][0])
        self.board[0][7].piece = Rook("black")
        self.board[0][7].piece.place(self.board[0][7])
        self.board[7][0].piece = Rook("white")
        self.board[7][0].piece.place(self.board[7][0])
        self.board[7][7].piece = Rook("white")
        self.board[7][7].piece.place(self.board[7][7])
        self.board[0][1].piece = Knight("black")
        self.board[0][1].piece.place(self.board[0][1])
        self.board[0][6].piece = Knight("black")
        self.board[0][6].piece.place(self.board[0][6])
        self.board[7][1].piece = Knight("white")
        self.board[7][1].piece.place(self.board[7][1])
        self.board[7][6].piece = Knight("white")
        self.board[7][6].piece.place(self.board[7][6])
        self.board[0][2].piece = Bishop("black")
        self.board[0][2].piece.place(self.board[0][2])
        self.board[0][5].piece = Bishop("black")
        self.board[0][5].piece.place(self.board[0][5])
        self.board[7][2].piece = Bishop("white")
        self.board[7][2].piece.place(self.board[7][2])
        self.board[7][5].piece = Bishop("white")
        self.board[7][5].piece.place(self.board[7][5])
        self.board[0][3].piece = Queen("black")
        self.board[0][3].piece.place(self.board[0][3])
        self.board[7][3].piece = Queen("white")
        self.board[7][3].piece.place(self.board[7][3])
        self.board[0][4].piece = King("black")
        self.board[0][4].piece.place(self.board[0][4])
        self.board[7][4].piece = King("white")
        self.board[7][4].piece.place(self.board[7][4])

/home/brandon/Projects/ChatDev/WareHouse/Matchy_Match_THUNLP_20230825101854/main.py

'''
This is the main file for the card matching memory game.
'''
import tkinter as tk
from game import Game
def main():
    root = tk.Tk()
    root.title("Memory Game")
    game = Game(root)
    root.mainloop()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Matchy_Match_THUNLP_20230825101854/game.py

'''
This file contains the Game class which represents the memory game.
'''
import tkinter as tk
from tkinter import messagebox
from card import CardItem
class Game:
    def __init__(self, root):
        self.root = root
        self.cards = []
        self.create_cards()
        self.shuffle_cards()
        self.create_board()
        self.current_card = None
        self.num_moves = 0
        self.num_matches = 0
        self.create_labels()
    def create_cards(self):
        values = ["A", "B", "C", "D", "E", "F", "G", "H"]
        for value in values:
            card1 = CardItem(value)
            card2 = CardItem(value)
            self.cards.append(card1)
            self.cards.append(card2)
    def shuffle_cards(self):
        import random
        random.shuffle(self.cards)
    def create_board(self):
        self.buttons = []
        for i, card in enumerate(self.cards):
            button = tk.Button(self.root, text=" ", width=5, height=3, command=lambda i=i: self.select_card(i))
            button.grid(row=i // 4, column=i % 4)
            card.button = button
            self.buttons.append(button)
    def create_labels(self):
        self.moves_label = tk.Label(self.root, text="Moves: 0")
        self.moves_label.grid(row=len(self.cards) // 4 + 1, column=0, columnspan=2)
        self.matches_label = tk.Label(self.root, text="Matches: 0")
        self.matches_label.grid(row=len(self.cards) // 4 + 1, column=2, columnspan=2)
    def select_card(self, index):
        card = self.cards[index]
        if not card.is_visible:
            card.show()
            if self.current_card is None:
                self.current_card = card
            else:
                if self.current_card.value == card.value:
                    self.current_card = None
                    self.num_matches += 1
                    self.matches_label.config(text="Matches: " + str(self.num_matches))
                    if self.num_matches == len(self.cards) // 2:
                        self.show_game_over_message()
                else:
                    self.root.after(1000, lambda: self.hide_cards(card))
                self.num_moves += 1
                self.moves_label.config(text="Moves: " + str(self.num_moves))
    def hide_cards(self, card):
        self.current_card.hide()
        card.hide()
        self.current_card = None
    def show_game_over_message(self):
        messagebox.showinfo("Game Over", "Congratulations! You have completed the game.")

/home/brandon/Projects/ChatDev/WareHouse/Matchy_Match_THUNLP_20230825101854/card.py

'''
This file contains the CardItem class which represents a single card in the memory game.
'''
import tkinter as tk
class CardItem:
    def __init__(self, value):
        self.value = value
        self.button = None
        self.is_visible = False
    def __str__(self):
        return str(self.value)
    def show(self):
        self.button.config(text=str(self))
        self.is_visible = True
    def hide(self):
        self.button.config(text=" ")
        self.is_visible = False

/home/brandon/Projects/ChatDev/WareHouse/DesignDream_THUNLP_20230825072340/main.py

'''
This is the main file of the virtual interior design application. It provides the entry point for the application and handles the user interface.
'''
import tkinter as tk
from room import Room
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Virtual Interior Design Application")
        self.geometry("800x600")
        self.room = Room()
        self.create_menu()
        self.create_toolbar()
        self.create_canvas()
    def create_menu(self):
        menu_bar = tk.Menu(self)
        self.config(menu=menu_bar)
        file_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Save", command=self.save_design)
        file_menu.add_command(label="Load", command=self.load_design)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.quit)
        edit_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Edit", menu=edit_menu)
        edit_menu.add_command(label="Undo", command=self.undo)
        edit_menu.add_command(label="Redo", command=self.redo)
    def create_toolbar(self):
        toolbar = tk.Frame(self)
        toolbar.pack(side=tk.TOP, fill=tk.X)
        button1 = tk.Button(toolbar, text="Chair", command=self.add_chair)
        button1.pack(side=tk.LEFT)
        button2 = tk.Button(toolbar, text="Table", command=self.add_table)
        button2.pack(side=tk.LEFT)
    def create_canvas(self):
        self.canvas = tk.Canvas(self)
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.canvas.bind("<Button-1>", self.on_canvas_click)
        self.canvas.bind("<B1-Motion>", self.on_canvas_drag)
    def add_chair(self):
        self.room.add_furniture("chair")
        self.update_canvas()
    def add_table(self):
        self.room.add_furniture("table")
        self.update_canvas()
    def update_canvas(self):
        self.canvas.delete("all")
        self.room.draw(self.canvas)
    def on_canvas_click(self, event):
        self.room.select_furniture(event.x, event.y)
    def on_canvas_drag(self, event):
        self.room.move_selected_furniture(event.x, event.y)
        self.update_canvas()
    def save_design(self):
        self.room.save_design()
    def load_design(self):
        self.room.load_design()
        self.update_canvas()
    def undo(self):
        self.room.undo()
        self.update_canvas()
    def redo(self):
        self.room.redo()
        self.update_canvas()
if __name__ == "__main__":
    app = Application()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/DesignDream_THUNLP_20230825072340/room.py

'''
This file defines the Room class, which represents a virtual room in the interior design application.
'''
class Room:
    def __init__(self):
        self.furniture = []
        self.selected_furniture = None
        self.undo_stack = []
        self.redo_stack = []
    def add_furniture(self, furniture_type):
        furniture = Furniture(furniture_type)
        self.furniture.append(furniture)
        self.selected_furniture = furniture
    def select_furniture(self, x, y):
        for furniture in self.furniture:
            if furniture.contains_point(x, y):
                self.selected_furniture = furniture
                break
    def move_selected_furniture(self, x, y):
        if self.selected_furniture is not None:
            self.selected_furniture.move(x, y)
    def draw(self, canvas):
        canvas.create_rectangle(0, 0, 800, 600, fill="white")
        for furniture in self.furniture:
            furniture.draw(canvas)
    def save_design(self):
        with open("design.txt", "w") as file:
            for furniture in self.furniture:
                file.write(furniture.type + "," + str(furniture.x) + "," + str(furniture.y) + "\n")
    def load_design(self):
        self.furniture = []
        with open("design.txt", "r") as file:
            for line in file:
                furniture_data = line.strip().split(",")
                furniture_type = furniture_data[0]
                furniture_x = int(furniture_data[1])
                furniture_y = int(furniture_data[2])
                furniture = Furniture(furniture_type, furniture_x, furniture_y)
                self.furniture.append(furniture)
    def undo(self):
        if len(self.undo_stack) > 0:
            action = self.undo_stack.pop()
            action.undo()
            self.redo_stack.append(action)
    def redo(self):
        if len(self.redo_stack) > 0:
            action = self.redo_stack.pop()
            action.redo()
class Furniture:
    def __init__(self, furniture_type, x=0, y=0):
        self.type = furniture_type
        self.x = x
        self.y = y
    def contains_point(self, x, y):
        return self.x <= x <= self.x + 50 and self.y <= y <= self.y + 50
    def move(self, x, y):
        self.x = x
        self.y = y
    def draw(self, canvas):
        if self.type == "chair":
            canvas.create_rectangle(self.x, self.y, self.x + 50, self.y + 50, fill="brown")
        elif self.type == "table":
            canvas.create_rectangle(self.x, self.y, self.x + 100, self.y + 100, fill="gray")
class Action:
    def __init__(self):
        pass
    def undo(self):
        pass
    def redo(self):
        pass

/home/brandon/Projects/ChatDev/WareHouse/Space_Invasion_Classified39_20231006210047/main.py

'''
This is the main file that runs the arcade game.
'''
import pygame
from game import Game
def main():
    pygame.init()
    screen_width = 800
    screen_height = 600
    screen = pygame.display.set_mode((screen_width, screen_height))
    pygame.display.set_caption("Space Invaders")
    game = Game(screen)
    while True:
        game.handle_events()
        game.update()
        game.draw()
        if len(game.enemies) == 0:
            game.spawn_enemies()
        destroyed_count = game.get_destroyed_count()
        font = pygame.font.Font(None, 36)
        text = font.render(f"Destroyed: {destroyed_count}", True, (255, 255, 255))
        screen.blit(text, (screen_width - text.get_width() - 10, 10))
        if game.enemy_reached_bottom():
            game.pause()
            game_over_text = font.render("GAME OVER", True, (255, 0, 0))
            screen.blit(game_over_text, (screen_width // 2 - game_over_text.get_width() // 2, screen_height // 2 - game_over_text.get_height() // 2))
        pygame.display.update()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Space_Invasion_Classified39_20231006210047/game.py

'''
This file contains the Game class which manages the game logic.
'''
import pygame
from player import Player
from enemy import Enemy
from bullet import Bullet
class Game:
    def __init__(self, screen):
        self.screen = screen
        self.clock = pygame.time.Clock()
        self.destroyed_count = 0
        self.paused = False
        player_x = 400
        player_y = 500
        self.player = Player(player_x, player_y)
        self.enemies = []
        self.spawn_enemies()
        self.bullets = []
    def spawn_enemies(self):
        enemy_x = 100
        enemy_y = 50
        enemy_spacing = 100
        num_enemies = 6
        for i in range(num_enemies):
            enemy = Enemy(enemy_x + i * enemy_spacing, enemy_y)
            self.enemies.append(enemy)
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bullet_x = self.player.x + self.player.width / 2
                    bullet_y = self.player.y
                    bullet = Bullet(bullet_x, bullet_y)
                    self.bullets.append(bullet)
    def update(self):
        if not self.paused:
            for bullet in self.bullets:
                bullet.update()
            for enemy in self.enemies:
                enemy.update()
            self.player.update()
            destroyed_enemies = []
            for bullet in self.bullets:
                for enemy in self.enemies:
                    if bullet.collides_with(enemy):
                        destroyed_enemies.append(enemy)
                        self.destroyed_count += 1
            for enemy in destroyed_enemies:
                self.enemies.remove(enemy)
            self.bullets = [bullet for bullet in self.bullets if not bullet.collides_with_any(self.enemies)]
    def draw(self):
        self.screen.fill((0, 0, 0))
        for bullet in self.bullets:
            bullet.draw(self.screen)
        for enemy in self.enemies:
            enemy.draw(self.screen)
        self.player.draw(self.screen)
        self.clock.tick(60)
    def get_destroyed_count(self):
        return self.destroyed_count
    def enemy_reached_bottom(self):
        for enemy in self.enemies:
            if enemy.y + enemy.height >= 600:
                return True
        return False
    def pause(self):
        self.paused = True

/home/brandon/Projects/ChatDev/WareHouse/Space_Invasion_Classified39_20231006210047/player.py

'''
This file contains the Player class which represents the player's spaceship.
'''
import pygame
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 64
        self.height = 64
        self.speed = 5
    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.x -= self.speed
        if keys[pygame.K_RIGHT]:
            self.x += self.speed
        if self.x < 0:
            self.x = 0
        if self.x > 800 - self.width:
            self.x = 800 - self.width
    def draw(self, screen):
        pygame.draw.rect(screen, (255, 255, 255), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/Space_Invasion_Classified39_20231006210047/enemy.py

'''
This file contains the Enemy class which represents the enemy spaceships.
'''
import pygame
class Enemy:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 64
        self.height = 64
        self.speed = 2
    def update(self):
        self.y += self.speed
        if self.y > 600:
            self.y = 0
    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/Space_Invasion_Classified39_20231006210047/bullet.py

'''
This file contains the Bullet class which represents the bullets fired by the player.
'''
import pygame
class Bullet:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 8
        self.height = 16
        self.speed = 10
    def update(self):
        self.y -= self.speed
    def draw(self, screen):
        pygame.draw.rect(screen, (0, 255, 0), (self.x, self.y, self.width, self.height))
    def collides_with(self, enemy):
        return pygame.Rect(self.x, self.y, self.width, self.height).colliderect(
            pygame.Rect(enemy.x, enemy.y, enemy.width, enemy.height)
        )
    def collides_with_any(self, enemies):
        for enemy in enemies:
            if self.collides_with(enemy):
                return True
        return False

/home/brandon/Projects/ChatDev/WareHouse/RPG_V1_ModelBest1024_20231026174838/projectile.py

'''
This file contains the Projectile class.
'''
import pygame
class Projectile:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 10
        self.height = 10
        self.velocity = 10
    def update(self):
        self.y -= self.velocity
    def draw(self, window):
        pygame.draw.rect(window, (0, 255, 0), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/RPG_V1_ModelBest1024_20231026174838/main.py

'''
This is the main file of the 2D horizontal shooting RPG game.
'''
import pygame
from player import Player
from enemy import Enemy
from projectile import Projectile
pygame.init()
window_width = 800
window_height = 600
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("2D Shooting RPG Game")
player = Player(window_width // 2, window_height - 50)
enemies = []
for i in range(5):
    enemy = Enemy()
    enemies.append(enemy)
projectiles = []
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                projectile = Projectile(player.x + player.width // 2 - 5, player.y)
                projectiles.append(projectile)
    player.update()
    for enemy in enemies:
        enemy.update()
    for projectile in projectiles:
        projectile.update()
    for projectile in projectiles:
        for enemy in enemies:
            if projectile.x < enemy.x + enemy.width and projectile.x + projectile.width > enemy.x and \
                    projectile.y < enemy.y + enemy.height and projectile.y + projectile.height > enemy.y:
                projectiles.remove(projectile)
                enemies.remove(enemy)
    window.fill((0, 0, 0))
    player.draw(window)
    for enemy in enemies:
        enemy.draw(window)
    for projectile in projectiles:
        projectile.draw(window)
    pygame.display.update()
pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/RPG_V1_ModelBest1024_20231026174838/player.py

'''
This file contains the Player class.
'''
import pygame
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 50
        self.height = 50
        self.velocity = 2
    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.x -= self.velocity
        if keys[pygame.K_RIGHT]:
            self.x += self.velocity
        if keys[pygame.K_UP]:
            self.y -= self.velocity
        if keys[pygame.K_DOWN]:
            self.y += self.velocity
    def draw(self, window):
        pygame.draw.rect(window, (255, 0, 0), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/RPG_V1_ModelBest1024_20231026174838/enemy.py

'''
This file contains the Enemy class.
'''
import pygame
import random
class Enemy:
    def __init__(self):
        self.x = random.randint(0, 750)
        self.y = random.randint(50, 200)
        self.width = 50
        self.height = 50
        self.velocity = random.randint(1, 2)
    def update(self):
        self.y += self.velocity
        if self.y > 600:
            self.y = random.randint(50, 200)
            self.x = random.randint(0, 750)
    def draw(self, window):
        pygame.draw.rect(window, (0, 0, 255), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/videoplayer_THUNLP_20230824233151/videoplayer.py

import os

/home/brandon/Projects/ChatDev/WareHouse/videoplayer_THUNLP_20230824233151/video_player.py

import cv2
class VideoPlayer:
    def __init__(self):
        self.video = None
    def load_video(self, file_path):
        """
        Load a video file from the given file path.
        """
        self.video = cv2.VideoCapture(file_path)
    def is_loaded(self):
        """
        Check if a video is loaded.
        """
        return self.video is not None
    def play(self):
        """
        Play the loaded video.
        """
        while True:
            ret, frame = self.video.read()
            if not ret:
                break
            cv2.imshow("Video Player", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        self.video.release()
        cv2.destroyAllWindows()

/home/brandon/Projects/ChatDev/WareHouse/videoplayer_THUNLP_20230824233151/main.py

'''
This is the main file of the video player application.
'''
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
from video_player import VideoPlayer
class VideoPlayerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Video Player")
        self.video_player = VideoPlayer()
        self.open_button = tk.Button(self.root, text="Open", command=self.open_file)
        self.open_button.pack()
        self.play_button = tk.Button(self.root, text="Play", command=self.play_video)
        self.play_button.pack()
    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("MP4 files", "*.mp4")])
        if file_path:
            self.video_player.load_video(file_path)
            messagebox.showinfo("Success", "Video loaded successfully!")
    def play_video(self):
        if self.video_player.is_loaded():
            self.video_player.play()
        else:
            messagebox.showerror("Error", "No video loaded!")
if __name__ == "__main__":
    root = tk.Tk()
    app = VideoPlayerApp(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/GreedySnakeGame_THUNLP_20231008212648/menu.py

'''
Game Menu
'''
import pygame
pygame.init()
window_width = 800
window_height = 600
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Greedy Snake Game")
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
menu_font = pygame.font.Font(None, 36)
def menu():
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    running = False
        window.fill(BLACK)
        text = menu_font.render("Press Enter to Start", True, WHITE)
        text_rect = text.get_rect(center=(window_width // 2, window_height // 2))
        window.blit(text, text_rect)
        pygame.display.update()
menu()
pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/GreedySnakeGame_THUNLP_20231008212648/main.py

'''
Greedy Snake Game
'''
import pygame
import random
pygame.init()
window_width = 800
window_height = 600
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Greedy Snake Game")
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
snake_size = 20
snake_speed = 10
clock = pygame.time.Clock()
class Snake:
    def __init__(self):
        self.x = window_width // 2
        self.y = window_height // 2
        self.direction = "RIGHT"
        self.length = 1
        self.body = []
    def move(self):
        if self.direction == "UP":
            self.y -= snake_size
        elif self.direction == "DOWN":
            self.y += snake_size
        elif self.direction == "LEFT":
            self.x -= snake_size
        elif self.direction == "RIGHT":
            self.x += snake_size
    def draw(self):
        for part in self.body:
            pygame.draw.rect(window, GREEN, (part[0], part[1], snake_size, snake_size))
    def check_collision(self):
        if self.x < 0 or self.x >= window_width or self.y < 0 or self.y >= window_height:
            return True
        for part in self.body[1:]:
            if self.x == part[0] and self.y == part[1]:
                return True
        return False
class Food:
    def __init__(self):
        self.x = random.randint(0, (window_width - snake_size) // snake_size) * snake_size
        self.y = random.randint(0, (window_height - snake_size) // snake_size) * snake_size
    def draw(self):
        pygame.draw.rect(window, RED, (self.x, self.y, snake_size, snake_size))
snake = Snake()
food = Food()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake.direction != "DOWN":
                snake.direction = "UP"
            elif event.key == pygame.K_DOWN and snake.direction != "UP":
                snake.direction = "DOWN"
            elif event.key == pygame.K_LEFT and snake.direction != "RIGHT":
                snake.direction = "LEFT"
            elif event.key == pygame.K_RIGHT and snake.direction != "LEFT":
                snake.direction = "RIGHT"
    snake.move()
    if snake.x == food.x and snake.y == food.y:
        snake.length += 1
        food = Food()
    snake.body.insert(0, (snake.x, snake.y))
    if len(snake.body) > snake.length:
        snake.body.pop()
    if snake.check_collision():
        running = False
    window.fill(BLACK)
    snake.draw()
    food.draw()
    pygame.display.update()
    clock.tick(snake_speed)
pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/GreedySnakeGame_THUNLP_20231008212648/settings.py

'''
Game Settings
'''
snake_size = 20
snake_speed = 10
window_width = 800
window_height = 600

/home/brandon/Projects/ChatDev/WareHouse/snake_THUNLPDemo_2024/main.py

import pygame
import random
import sys
import math
pygame.init()
WHITE = (255, 255, 255)
RED = (255, 50, 50)
GREEN = (50, 255, 50)
BLUE = (50, 50, 255)
BLACK = (0, 0, 0)
DARK_GREEN = (34, 139, 34)
GOLD = (255, 215, 0)
WINDOW_SIZE = 800
GRID_SIZE = 20
GRID_COUNT = WINDOW_SIZE // GRID_SIZE
GAME_SPEED = 10
screen = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))
pygame.display.set_caption('贪吃蛇')
clock = pygame.time.Clock()
background = pygame.Surface((WINDOW_SIZE, WINDOW_SIZE))
for y in range(0, WINDOW_SIZE, 4):
    for x in range(0, WINDOW_SIZE, 4):
        shade = random.randint(0, 20)
        pygame.draw.rect(background, (shade, shade, shade), (x, y, 4, 4))
class Particle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.vx = random.uniform(-2, 2)
        self.vy = random.uniform(-2, 2)
        self.lifetime = 30
        self.color = (random.randint(200, 255), random.randint(200, 255), random.randint(0, 50))
    def update(self):
        self.x += self.vx
        self.y += self.vy
        self.lifetime -= 1
    def draw(self, surface):
        alpha = int((self.lifetime / 30) * 255)
        particle_surface = pygame.Surface((4, 4), pygame.SRCALPHA)
        particle_surface.fill((*self.color, alpha))
        surface.blit(particle_surface, (int(self.x), int(self.y)))
class Snake:
    def __init__(self):
        self.body = [(GRID_COUNT//2, GRID_COUNT//2)]
        self.direction = (1, 0)
        self.grow = False
        self.angle = 0      def move(self):
        head = self.body[0]
        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])
        if not self.grow:
            self.body.pop()
        else:
            self.grow = False
        self.body.insert(0, new_head)
        self.angle += 0.2      def draw(self):
        for i, segment in enumerate(self.body):
            x = segment[0] * GRID_SIZE
            y = segment[1] * GRID_SIZE
            base_color = (34, max(50, 255 - (i * 8)), 34)
            offset = math.sin(self.angle + i * 0.3) * 2
            pygame.draw.rect(screen, base_color, (x, y + offset, GRID_SIZE-2, GRID_SIZE-2))
            if i > 0:
                scale_color = (max(20, base_color[0] - 20), 
                             max(20, base_color[1] - 20),
                             max(20, base_color[2] - 20))
                pygame.draw.arc(screen, scale_color,
                              (x + 2, y + offset + 2, GRID_SIZE-6, GRID_SIZE-6),
                              0, 3.14, 2)
            if i == 0:
                eye_size = GRID_SIZE // 4
                pygame.draw.circle(screen, WHITE, 
                    (x + GRID_SIZE//3, y + offset + GRID_SIZE//3), eye_size)
                pygame.draw.circle(screen, BLACK, 
                    (x + GRID_SIZE//3, y + offset + GRID_SIZE//3), eye_size//2)
                pygame.draw.circle(screen, WHITE,
                    (x + GRID_SIZE//3 - 1, y + offset + GRID_SIZE//3 - 1), eye_size//4)
                pygame.draw.circle(screen, WHITE, 
                    (x + 2*GRID_SIZE//3, y + offset + GRID_SIZE//3), eye_size)
                pygame.draw.circle(screen, BLACK, 
                    (x + 2*GRID_SIZE//3, y + offset + GRID_SIZE//3), eye_size//2)
                pygame.draw.circle(screen, WHITE,
                    (x + 2*GRID_SIZE//3 - 1, y + offset + GRID_SIZE//3 - 1), eye_size//4)
class Food:
    def __init__(self):
        self.position = self.get_random_position()
        self.angle = 0
        self.particles = []
    def get_random_position(self):
        return (random.randint(0, GRID_COUNT-1), random.randint(0, GRID_COUNT-1))
    def update(self):
        self.angle += 0.1
        self.particles = [p for p in self.particles if p.lifetime > 0]
        for particle in self.particles:
            particle.update()
    def draw(self):
        x = self.position[0] * GRID_SIZE
        y = self.position[1] * GRID_SIZE
        for particle in self.particles:
            particle.draw(screen)
        size_mod = math.sin(self.angle) * 2
        apple_size = GRID_SIZE//2 - 2 + size_mod
        shadow_pos = (x + GRID_SIZE//2 + 2, y + GRID_SIZE//2 + 2)
        pygame.draw.circle(screen, (20, 20, 20), shadow_pos, apple_size)
        apple_pos = (x + GRID_SIZE//2, y + GRID_SIZE//2)
        pygame.draw.circle(screen, RED, apple_pos, apple_size)
        highlight_pos = (x + GRID_SIZE//2 - 2, y + GRID_SIZE//2 - 2)
        pygame.draw.circle(screen, (255, 150, 150), highlight_pos, apple_size//3)
        leaf_x = x + GRID_SIZE//2 + math.sin(self.angle) * 2
        leaf_y = y + math.cos(self.angle) * 2
        pygame.draw.ellipse(screen, GREEN, (leaf_x, leaf_y, GRID_SIZE//4, GRID_SIZE//3))
def draw_title_and_score(score):
    title_font = pygame.font.Font(None, 74)
    title_text = title_font.render('Snake Game', True, GOLD)
    title_shadow = title_font.render('Snake Game', True, (50, 50, 50))
    screen.blit(title_shadow, (WINDOW_SIZE//2 - title_text.get_width()//2 + 2,
                              42))
    screen.blit(title_text, (WINDOW_SIZE//2 - title_text.get_width()//2,
                            40))
    score_font = pygame.font.Font(None, 48)
    score_text = score_font.render(f'Score: {score}', True, WHITE)
    score_shadow = score_font.render(f'Score: {score}', True, (50, 50, 50))
    screen.blit(score_shadow, (12, 12))
    screen.blit(score_text, (10, 10))
def main():
    snake = Snake()
    food = Food()
    score = 0
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and snake.direction != (0, 1):
                    snake.direction = (0, -1)
                if event.key == pygame.K_DOWN and snake.direction != (0, -1):
                    snake.direction = (0, 1)
                if event.key == pygame.K_LEFT and snake.direction != (1, 0):
                    snake.direction = (-1, 0)
                if event.key == pygame.K_RIGHT and snake.direction != (-1, 0):
                    snake.direction = (1, 0)
        snake.move()
        food.update()
        if snake.body[0] == food.position:
            snake.grow = True
            food.position = food.get_random_position()
            score += 1
            x = food.position[0] * GRID_SIZE
            y = food.position[1] * GRID_SIZE
            for _ in range(20):
                food.particles.append(Particle(x + GRID_SIZE//2, y + GRID_SIZE//2))
        head = snake.body[0]
        if head[0] < 0 or head[0] >= GRID_COUNT or head[1] < 0 or head[1] >= GRID_COUNT:
            pygame.quit()
            sys.exit()
        if head in snake.body[1:]:
            pygame.quit()
            sys.exit()
        screen.blit(background, (0, 0))
        for i in range(GRID_COUNT):
            alpha = abs(math.sin(i * 0.1 + pygame.time.get_ticks() * 0.001)) * 30 + 20
            grid_surface = pygame.Surface((WINDOW_SIZE, 1), pygame.SRCALPHA)
            grid_surface.fill((50, 50, 50, int(alpha)))
            screen.blit(grid_surface, (0, i * GRID_SIZE))
            screen.blit(grid_surface, (i * GRID_SIZE, 0))
        snake.draw()
        food.draw()
        draw_title_and_score(score)
        pygame.display.flip()
        clock.tick(GAME_SPEED)
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/PixelCraft_THUNLP_20230825072340/pixel_io.py

'''
Pixel Art I/O
'''
from PIL import Image
def export_pixel_art(pixel_canvas, file_path, file_format):
    image = create_image_from_pixel_canvas(pixel_canvas)
    image.save(file_path, format=file_format)
def create_image_from_pixel_canvas(pixel_canvas):
    width = pixel_canvas.winfo_width()
    height = pixel_canvas.winfo_height()
    pixels = []
    for y in range(0, height, pixel_canvas.pixel_size):
        for x in range(0, width, pixel_canvas.pixel_size):
            pixel_color = pixel_canvas.itemcget(pixel_canvas.find_closest(x, y), "fill")
            pixels.extend([pixel_color] * pixel_canvas.pixel_size)
    image = Image.new("RGB", (width, height), "white")
    image.putdata(pixels)
    return image

/home/brandon/Projects/ChatDev/WareHouse/PixelCraft_THUNLP_20230825072340/main.py

'''
Pixel Art Creator App
'''
import tkinter as tk
from tkinter import ttk, colorchooser, filedialog
from PIL import Image
class PixelArtCreatorApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Pixel Art Creator")
        self.canvas = PixelCanvas(self)
        self.toolbar = Toolbar(self, self.canvas)
        self.toolbar.pack(side=tk.LEFT, fill=tk.Y)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
class PixelCanvas(tk.Canvas):
    def __init__(self, master):
        super().__init__(master, bg="white")
        self.pixel_size = 10
        self.current_color = "black"
        self.undo_stack = []
        self.redo_stack = []
        self.bind("<Button-1>", self.on_click)
        self.bind("<B1-Motion>", self.on_drag)
    def on_click(self, event):
        x, y = event.x, event.y
        self.draw_pixel(x, y)
    def on_drag(self, event):
        x, y = event.x, event.y
        self.draw_pixel(x, y)
    def draw_pixel(self, x, y):
        x1 = x - (x % self.pixel_size)
        y1 = y - (y % self.pixel_size)
        x2 = x1 + self.pixel_size
        y2 = y1 + self.pixel_size
        self.create_rectangle(x1, y1, x2, y2, fill=self.current_color, outline="")
        self.undo_stack.append(self.get_state())
    def set_pixel_size(self, size):
        self.pixel_size = size
    def set_color(self, color):
        self.current_color = color
    def clear_canvas(self):
        self.delete("all")
        self.undo_stack = []
        self.redo_stack = []
    def undo(self):
        if self.undo_stack:
            state = self.undo_stack.pop()
            self.redo_stack.append(self.get_state())
            self.set_state(state)
    def redo(self):
        if self.redo_stack:
            state = self.redo_stack.pop()
            self.undo_stack.append(self.get_state())
            self.set_state(state)
    def get_state(self):
        return self.postscript(colormode="color")
    def set_state(self, state):
        self.delete("all")
        self.create_image((0, 0), image=tk.PhotoImage(data=state), anchor=tk.NW)
class Toolbar(tk.Frame):
    def __init__(self, master, canvas):
        super().__init__(master)
        self.canvas = canvas
        self.create_widgets()
    def create_widgets(self):
        self.pixel_size_label = ttk.Label(self, text="Pixel Size:")
        self.pixel_size_entry = ttk.Entry(self, width=5)
        self.pixel_size_entry.insert(tk.END, "10")
        self.pixel_size_entry.bind("<Return>", self.on_pixel_size_change)
        self.color_button = ttk.Button(self, text="Color", command=self.on_color_button_click)
        self.clear_button = ttk.Button(self, text="Clear", command=self.on_clear_button_click)
        self.undo_button = ttk.Button(self, text="Undo", command=self.on_undo_button_click)
        self.redo_button = ttk.Button(self, text="Redo", command=self.on_redo_button_click)
        self.pixel_size_label.pack(side=tk.TOP, pady=5)
        self.pixel_size_entry.pack(side=tk.TOP)
        self.color_button.pack(side=tk.TOP, pady=5)
        self.clear_button.pack(side=tk.TOP)
        self.undo_button.pack(side=tk.TOP)
        self.redo_button.pack(side=tk.TOP)
    def on_pixel_size_change(self, event):
        size = int(self.pixel_size_entry.get())
        self.canvas.set_pixel_size(size)
    def on_color_button_click(self):
        color = colorchooser.askcolor()[1]
        self.canvas.set_color(color)
    def on_clear_button_click(self):
        self.canvas.clear_canvas()
    def on_undo_button_click(self):
        self.canvas.undo()
    def on_redo_button_click(self):
        self.canvas.redo()
if __name__ == "__main__":
    app = PixelArtCreatorApp()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Good_code_ModelBest1024_20231023013519/file_processor.py

'''
This file contains a function to process the selected Python file. 
The function reads the file, adds praises to each line, and writes the result to a new file. 
The new file has the same name as the original file, but with "praised_" added at the beginning.
'''
from praise_generator import generate_praise
def process_file(filename):
    try:
        with open(filename, "r", encoding="utf8") as file:
            lines = file.readlines()
    except IOError as e:
        print(f"Unable to open file: {e}")
        return
    new_lines = []
    for line in lines:
        if line.strip() and not line.strip().startswith("#"):
            if "#" not in line:
                line = line.rstrip() + "  # " + generate_praise(line) + "\n"
        new_lines.append(line)
    try:
        with open("praised_" + filename.split('/')[-1], "w", encoding="utf8") as file:
            for line in new_lines:
                file.write(line)
    except IOError as e:
        print(f"Unable to write to file: {e}")

/home/brandon/Projects/ChatDev/WareHouse/Good_code_ModelBest1024_20231023013519/praise_generator.py

'''
This file contains a function to generate random praises. 
The function checks the content of each line and generates a relevant praise. 
If the line does not contain any recognizable pattern, a random praise is generated.
'''
import random
def generate_praise(line):
    if 'def' in line:
        return "Incredible function definition!"
    elif 'if' in line or 'else' in line:
        return "Outstanding use of conditionals!"
    elif 'for' in line or 'while' in line:
        return "Brilliant loop implementation!"
    elif '=' in line:
        return "Excellent variable assignment!"
    else:
        praises = ["Remarkable coding!", "Innovative approach!", "Exceptional understanding of concepts!"]
        return random.choice(praises)

/home/brandon/Projects/ChatDev/WareHouse/Good_code_ModelBest1024_20231023013519/praised_what_ever.py

你挑着担  我牵着马  

/home/brandon/Projects/ChatDev/WareHouse/Good_code_ModelBest1024_20231023013519/main.py

'''
This is the main file that runs the application. 
When you run this application, a window will open with a button saying "Select Python File". 
Click on this button to select the Python file you want to process. 
The application will add a line of praise at the end of each line of code in the file.
'''
import tkinter as tk
from tkinter import filedialog, messagebox
from file_processor import process_file
def select_file():
    filename = filedialog.askopenfilename(filetypes=[("Python files", "*.py")])
    process_file(filename)
    messagebox.showinfo("Information","Task Completed Successfully")
root = tk.Tk()
button = tk.Button(root, text="Select Python File", command=select_file)
button.pack()
root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Good_code_ModelBest1024_20231023013519/what_ever.py

你挑着担
我牵着马

/home/brandon/Projects/ChatDev/WareHouse/Typing_THUNLP_20230824105537/main.py

'''
This is the main file for the typing practice software.
'''
from typing_practice import TypingPractice
from progress_tracker import ProgressTracker
def main():
    progress_tracker = ProgressTracker()
    typing_practice = TypingPractice(progress_tracker)
    typing_practice.start()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Typing_THUNLP_20230824105537/typing_tutor.py

'''
This file contains the TypingTutor class which provides real-time feedback on typing accuracy and speed.
'''
import keyboard
import time
class TypingTutor:
    def __init__(self, progress_tracker):
        self.current_sentence = ""
        self.errors = 0
        self.total_chars = 0
        self.progress_tracker = progress_tracker
        self.start_time = 0
    def start_tutor(self):
        print("Type the following sentence:")
        self.current_sentence = "The quick brown fox jumps over the lazy dog."
        print(self.current_sentence)
        self.start_time = time.time()
        keyboard.on_press(self.check_typing)
    def check_typing(self, key):
        if key.name == "enter":
            keyboard.unhook(self.check_typing)
            accuracy = self.calculate_accuracy()
            speed = self.calculate_speed()
            print(f"Accuracy: {accuracy}%")
            print(f"Speed: {speed} characters per minute")
            self.progress_tracker.record_performance(accuracy, speed)
        else:
            self.total_chars += 1
            if key.name != self.current_sentence[self.total_chars - 1]:
                self.errors += 1
    def calculate_accuracy(self):
        accuracy = ((self.total_chars - self.errors) / self.total_chars) * 100
        return round(accuracy, 2)
    def calculate_speed(self):
        elapsed_time = time.time() - self.start_time
        speed = (self.total_chars / elapsed_time) * 60
        return round(speed, 2)

/home/brandon/Projects/ChatDev/WareHouse/Typing_THUNLP_20230824105537/progress_tracker.py

'''
This file contains the ProgressTracker class which records users' performance and displays statistics.
'''
class ProgressTracker:
    def __init__(self):
        self.statistics = []
    def record_performance(self, accuracy, speed):
        self.statistics.append((accuracy, speed))
    def display_statistics(self):
        if len(self.statistics) == 0:
            print("No statistics available.")
        else:
            print("Statistics:")
            for i, (accuracy, speed) in enumerate(self.statistics):
                print(f"Exercise {i+1}:")
                print(f"Accuracy: {accuracy}%")
                print(f"Speed: {speed} characters per minute")

/home/brandon/Projects/ChatDev/WareHouse/Typing_THUNLP_20230824105537/typing_exercise.py

'''
This file contains the TypingExercise class which manages the typing exercises.
'''
import random
import time
class TypingExercise:
    def __init__(self, progress_tracker):
        self.exercises = [
            "The quick brown fox jumps over the lazy dog.",
            "Programming is fun and challenging.",
            "Practice makes perfect.",
            "Typing speed matters in the digital world.",
            "I love coding in Python."
        ]
        self.progress_tracker = progress_tracker
    def start_exercise(self):
        exercise = random.choice(self.exercises)
        print("Type the following sentence:")
        print(exercise)
        print("Press Enter to start.")
        input()
        start_time = time.time()
        user_input = input()
        end_time = time.time()
        elapsed_time = end_time - start_time
        accuracy = self.calculate_accuracy(exercise, user_input)
        speed = self.calculate_speed(user_input, elapsed_time)
        print(f"Accuracy: {accuracy}%")
        print(f"Speed: {speed} characters per minute")
        self.progress_tracker.record_performance(accuracy, speed)
    def calculate_accuracy(self, exercise, user_input):
        correct_chars = sum([1 for c1, c2 in zip(exercise, user_input) if c1 == c2])
        accuracy = (correct_chars / len(exercise)) * 100
        return round(accuracy, 2)
    def calculate_speed(self, user_input, elapsed_time):
        num_chars = len(user_input)
        speed = (num_chars / elapsed_time) * 60
        return round(speed, 2)

/home/brandon/Projects/ChatDev/WareHouse/Typing_THUNLP_20230824105537/typing_practice.py

'''
This file contains the TypingPractice class which manages the typing practice software.
'''
from typing_exercise import TypingExercise
from typing_tutor import TypingTutor
from progress_tracker import ProgressTracker
class TypingPractice:
    def __init__(self, progress_tracker):
        self.typing_exercise = TypingExercise(progress_tracker)
        self.typing_tutor = TypingTutor(progress_tracker)
        self.progress_tracker = progress_tracker
    def start(self):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")
            if choice == "1":
                self.typing_exercise.start_exercise()
            elif choice == "2":
                self.typing_tutor.start_tutor()
            elif choice == "3":
                self.progress_tracker.display_statistics()
            elif choice == "4":
                break
            else:
                print("Invalid choice. Please try again.")
    def display_menu(self):
        print("Typing Practice Software")
        print("1. Start Typing Exercise")
        print("2. Start Typing Tutor")
        print("3. Display Statistics")
        print("4. Exit")

/home/brandon/Projects/ChatDev/WareHouse/Gomoku_HumanAgentInteraction_20230920135038/main.py

'''
This is the main file of the Gomoku game.
'''
import tkinter as tk
from tkinter import messagebox
from game import Game
class GomokuApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Gomoku")
        self.game = Game()
        self.canvas = tk.Canvas(self.master, width=500, height=500, bg="white")
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.on_click)
        self.draw_board()
        self.restart_button = tk.Button(self.master, text="Restart", command=self.restart)
        self.restart_button.pack()
        self.status_bar = tk.Label(self.master, text="Black's Turn", bd=1, relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    def draw_board(self):
        self.canvas.delete("all")
        cell_width = 500 / 15
        cell_height = 500 / 15
        for row in range(15):
            self.canvas.create_line(0, row * cell_height, 500, row * cell_height)
        for col in range(15):
            self.canvas.create_line(col * cell_width, 0, col * cell_width, 500)
    def on_click(self, event):
        cell_width = 500 / 15
        cell_height = 500 / 15
        x = int(event.x // cell_width)
        y = int(event.y // cell_height)
        if self.game.make_move(x, y):
            self.draw_piece(x, y)
            self.update_status_bar()
        if self.game.check_winner(x, y):
            self.show_winner()
    def draw_piece(self, x, y):
        cell_width = 500 / 15
        cell_height = 500 / 15
        oval_coords = (x * cell_width, y * cell_height, (x + 1) * cell_width, (y + 1) * cell_height)
        color = "black" if self.game.current_player == 1 else "white"
        self.canvas.create_oval(*oval_coords, fill=color)
    def show_winner(self):
        winner = "Black" if self.game.current_player == 1 else "White"
        messagebox.showinfo("Game Over", f"{winner} wins!")
        self.canvas.unbind("<Button-1>")
        self.restart_button.pack_forget()
        self.canvas.bind("<Button-1>", self.restart)
    def restart(self):
        self.game.reset()
        self.draw_board()
        self.canvas.unbind("<Button-1>")
        self.canvas.bind("<Button-1>", self.on_click)
        self.restart_button.pack()
        self.update_status_bar()
    def update_status_bar(self):
        player = "Black" if self.game.current_player == 1 else "White"
        self.status_bar.config(text=f"{player}'s Turn")
if __name__ == "__main__":
    root = tk.Tk()
    app = GomokuApp(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Gomoku_HumanAgentInteraction_20230920135038/game.py

'''
This file contains the Game class which manages the game logic.
'''
class Game:
    def __init__(self):
        self.board = [[0] * 15 for _ in range(15)]
        self.current_player = 1
    def make_move(self, x, y):
        if self.board[y][x] == 0:
            self.board[y][x] = self.current_player
            self.current_player = 3 - self.current_player
            return True
        return False
    def check_winner(self, x, y):
        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
        for dx, dy in directions:
            count = 1
            count += self.count_in_direction(x, y, dx, dy)
            count += self.count_in_direction(x, y, -dx, -dy)
            if count >= 5:
                return True
        return False
    def count_in_direction(self, x, y, dx, dy):
        count = 0
        player = self.board[y][x]
        while True:
            x += dx
            y += dy
            if not (0 <= x < 15 and 0 <= y < 15):
                break
            if self.board[y][x] == player:
                count += 1
            else:
                break
        return count
    def reset(self):
        self.board = [[0] * 15 for _ in range(15)]
        self.current_player = 1

/home/brandon/Projects/ChatDev/WareHouse/WarmHeart_ModelBest1024_20231026180801/avoid_sitting_reminder.py

'''
This file contains the logic for reminding the user to avoid prolonged sitting.
'''
import schedule
from datetime import datetime, timedelta
def remind_avoid_sitting(app):
    current_time = datetime.now().strftime("%H:%M")
    next_reminder_time = datetime.now() + timedelta(hours=1)
    schedule.every().day.at(next_reminder_time.strftime("%H:%M")).do(lambda: remind_avoid_sitting(app))
    app.reminder_label.config(text=f"Reminder: It's {current_time}. Avoid prolonged sitting!\n" + f"Next reminder: {next_reminder_time.strftime('%H:%M')}")


/home/brandon/Projects/ChatDev/WareHouse/WarmHeart_ModelBest1024_20231026180801/main.py

'''
This is the main file of the reminder app.
'''
import tkinter as tk
from datetime import datetime, timedelta
import schedule
from drink_water_reminder import remind_drink_water
from avoid_sitting_reminder import remind_avoid_sitting
from leave_work_reminder import remind_leave_work
from conversation_topics import get_conversation_topics
class ReminderApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Reminder App")
        self.create_widgets()
        self.root.mainloop()
    def create_widgets(self):
        self.reminder_label = tk.Label(self.root, text="")
        self.reminder_label.pack()
        self.drink_water_button = tk.Button(self.root, text="Drink Water", command=lambda: remind_drink_water(self))
        self.drink_water_button.pack()
        self.avoid_sitting_button = tk.Button(self.root, text="Avoid Sitting", command=lambda: remind_avoid_sitting(self))
        self.avoid_sitting_button.pack()
        self.leave_work_button = tk.Button(self.root, text="Leave Work", command=lambda: remind_leave_work(self))
        self.leave_work_button.pack()
if __name__ == "__main__":
    app = ReminderApp()

/home/brandon/Projects/ChatDev/WareHouse/WarmHeart_ModelBest1024_20231026180801/leave_work_reminder.py

'''
This file contains the logic for reminding the user to leave work at 9 PM.
'''
from datetime import datetime, time
import schedule
import conversation_topics  def remind_leave_work(app):
    current_time = datetime.now().strftime("%H:%M")
    print(f"Reminder: It's {current_time}. Leave work now!")
    app.reminder_label.config(text=f"Reminder: It's {current_time}. Leave work now!")
    topics = conversation_topics.get_conversation_topics()
    print("Conversation topics for tomorrow:")
    topics = "\n".join(topics)
    app.reminder_label.config(text=f"To avoid awkward moments in the office elevator, here are some conversation topics: \n{topics}")
schedule.every().day.at("21:00").do(lambda: remind_leave_work(app))

/home/brandon/Projects/ChatDev/WareHouse/WarmHeart_ModelBest1024_20231026180801/conversation_topics.py

'''
This file contains the logic for getting conversation topics.
'''
import requests
from bs4 import BeautifulSoup
def get_conversation_topics():
    url = "https://top.baidu.com/board?tab=realtime"
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        trending_topics = soup.find_all("div", class_="c-single-text-ellipsis")
        top_three_topics = trending_topics[:5]
        return [topic.get_text() for topic in top_three_topics]
    else:
        return ["Error: Could not retrieve top trending topics"]

/home/brandon/Projects/ChatDev/WareHouse/WarmHeart_ModelBest1024_20231026180801/drink_water_reminder.py

'''
This file contains the logic for reminding the user to drink water.
'''
from datetime import datetime, timedelta
import schedule
from avoid_sitting_reminder import remind_avoid_sitting  def remind_drink_water(app):
    current_time = datetime.now().strftime("%H:%M")
    print(f"Reminder: It's {current_time}. Drink water!")
    next_reminder_time = datetime.now() + timedelta(minutes=60)
    schedule.every().day.at(next_reminder_time.strftime("%H:%M")).do(lambda: remind_drink_water(app))
    app.reminder_label.config(text=f"Reminder: It's {current_time}. Drink water in one hour!")

/home/brandon/Projects/ChatDev/WareHouse/tiny_rogue_like_DefaultOrganization_20230905232453/level.py

'''
Level class for managing the game level.
'''
import pygame
import random
class Level:
    def __init__(self):
        self.width = 80
        self.height = 80
        self.floor_color = (255, 255, 255)
        self.wall_color = (0, 0, 0)
        self.door_color = (0, 255, 0)
        self.treasure_color = (255, 255, 0)
        self.level_data = [[0 for _ in range(self.width)] for _ in range(self.height)]
        self.generate_level()
    def generate_level(self):
        for y in range(self.height):
            for x in range(self.width):
                if random.random() < 0.3:
                    self.level_data[y][x] = 1
                elif random.random() < 0.05:
                    self.level_data[y][x] = 2
                elif random.random() < 0.05:
                    self.level_data[y][x] = 3
                else:
                    self.level_data[y][x] = 0
    def is_wall(self, x, y):
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return True
        return self.level_data[y][x] == 1
    def is_door(self, x, y):
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return False
        return self.level_data[y][x] == 2
    def is_treasure(self, x, y):
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return False
        return self.level_data[y][x] == 3
    def next_level(self, player):
        player.x = 40          player.y = 40
        player.rect.x = player.x
        player.rect.y = player.y
        self.generate_level()
    def draw(self, screen):
        for y in range(self.height):
            for x in range(self.width):
                if self.level_data[y][x] == 0:
                    pygame.draw.rect(screen, self.floor_color, (x * 10, y * 10, 10, 10))
                elif self.level_data[y][x] == 1:
                    pygame.draw.rect(screen, self.wall_color, (x * 10, y * 10, 10, 10))
                elif self.level_data[y][x] == 2:
                    pygame.draw.rect(screen, self.door_color, (x * 10, y * 10, 10, 10))
                elif self.level_data[y][x] == 3:
                    pygame.draw.rect(screen, self.treasure_color, (x * 10, y * 10, 10, 10))

/home/brandon/Projects/ChatDev/WareHouse/tiny_rogue_like_DefaultOrganization_20230905232453/main.py

'''
Main file for the roguelike game.
'''
import pygame
from game import Game
def main():
    pygame.init()
    game = Game()
    game.run()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/tiny_rogue_like_DefaultOrganization_20230905232453/game.py

'''
Game class for managing the roguelike game.
'''
import pygame
from player import Player
from level import Level
class Game:
    def __init__(self):
        self.screen_width = 800
        self.screen_height = 800
        self.screen = pygame.display.set_mode((self.screen_width, self.screen_height))
        pygame.display.set_caption("Roguelike Game")
        self.clock = pygame.time.Clock()
        self.running = False
        self.player = Player(40, 40)          self.level = Level()
    def run(self):
        self.running = True
        while self.running:
            self.clock.tick(60)
            self.handle_events()
            self.update()
            self.render()
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_w:
                    self.player.move(0, -1)                  elif event.key == pygame.K_s:
                    self.player.move(0, 1)                  elif event.key == pygame.K_a:
                    self.player.move(-1, 0)                  elif event.key == pygame.K_d:
                    self.player.move(1, 0)      def update(self):
        self.player.update(self.level)
    def render(self):
        self.screen.fill((0, 0, 0))          self.level.draw(self.screen)
        self.player.draw(self.screen)
        pygame.display.flip()

/home/brandon/Projects/ChatDev/WareHouse/tiny_rogue_like_DefaultOrganization_20230905232453/player.py

'''
Player class for managing the player character.
'''
import pygame
import random
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 10
        self.height = 10
        self.rect = pygame.Rect(self.x, self.y, self.width, self.height)
        self.hp = 100
    def move(self, dx, dy):
        self.x += dx
        self.y += dy
        self.rect.x = self.x
        self.rect.y = self.y
    def update(self, level):
        dx, dy = 0, 0
        if level.is_wall(self.x + dx, self.y + dy):
            self.x -= dx
            self.y -= dy
            self.rect.x = self.x
            self.rect.y = self.y
        elif level.is_door(self.x, self.y):
            level.next_level(self)
        elif level.is_treasure(self.x, self.y):
            self.hp += random.randint(20, 30)
    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), self.rect)

/home/brandon/Projects/ChatDev/WareHouse/BackgroundRemoval_THUNLP_20231015220703/background_removal.py

import cv2
import numpy as np
from PIL import Image
def remove_background(image):
    image = np.array(image)
    mask = np.zeros(image.shape[:2], np.uint8)
    bgdModel = np.zeros((1, 65), np.float64)
    fgdModel = np.zeros((1, 65), np.float64)
    rect = (50, 50, image.shape[1] - 50, image.shape[0] - 50)
    cv2.grabCut(image, mask, rect, bgdModel, fgdModel, 5, cv2.GC_INIT_WITH_RECT)
    fg_mask = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')
    result = image * fg_mask[:, :, np.newaxis]
    result = Image.fromarray(result)
    return result


/home/brandon/Projects/ChatDev/WareHouse/BackgroundRemoval_THUNLP_20231015220703/main.py

'''
This is the main file that handles the user interface and image processing.
'''
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import background_removal
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Background Removal")
        self.geometry("500x500")
        self.image_label = tk.Label(self)
        self.image_label.pack(pady=10)
        self.upload_button = tk.Button(self, text="Upload Image", command=self.upload_image)
        self.upload_button.pack(pady=10)
        self.remove_button = tk.Button(self, text="Remove Background", command=self.remove_background)
        self.remove_button.pack(pady=10)
        self.save_button = tk.Button(self, text="Save Image", command=self.save_image)
        self.save_button.pack(pady=10)
        self.image = None
        self.processed_image = None
    def upload_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png *.jpg *.jpeg")])
        if file_path:
            self.image = Image.open(file_path)
            self.processed_image = self.image.copy()
            self.display_image(self.image)
    def remove_background(self):
        if self.image:
            self.processed_image = background_removal.remove_background(self.image)
            self.display_image(self.processed_image)
    def save_image(self):
        if self.processed_image:
            file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG Files", "*.png"), ("JPEG Files", "*.jpg *.jpeg")])
            if file_path:
                self.processed_image.save(file_path)
    def display_image(self, image):
        image.thumbnail((400, 400))
        photo = ImageTk.PhotoImage(image)
        self.image_label.configure(image=photo)
        self.image_label.image = photo
if __name__ == "__main__":
    app = Application()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Maze_THUNLP_20231006154305/main.py

'''
This is the main file of the maze game application.
'''
import tkinter as tk
from maze import Maze
class MazeGameApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Maze Game")
        self.geometry("400x400")
        self.maze = Maze()
        self.canvas = tk.Canvas(self, width=400, height=400)
        self.canvas.pack()
        self.draw_maze()
        self.bind("<KeyPress>", self.move_player)
        self.game_over = False
    def draw_maze(self):
        for row in range(self.maze.rows):
            for col in range(self.maze.cols):
                if self.maze.maze[row][col] == 1:
                    self.canvas.create_rectangle(col*40, row*40, (col+1)*40, (row+1)*40, fill="black")
    def move_player(self, event):
        if not self.game_over:
            if event.keysym == "Up":
                self.maze.move_player("up")
            elif event.keysym == "Down":
                self.maze.move_player("down")
            elif event.keysym == "Left":
                self.maze.move_player("left")
            elif event.keysym == "Right":
                self.maze.move_player("right")
            self.canvas.delete("player")
            self.canvas.create_oval(self.maze.player_col*40, self.maze.player_row*40, (self.maze.player_col+1)*40, (self.maze.player_row+1)*40, fill="red", tags="player")
            if self.maze.player_row == self.maze.goal_row and self.maze.player_col == self.maze.goal_col:
                self.canvas.create_text(200, 200, text="Congratulations! You have reached the goal!", font=("Arial", 16), fill="white")
                self.game_over = True
if __name__ == "__main__":
    app = MazeGameApp()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Maze_THUNLP_20231006154305/maze.py

'''
This file contains the Maze class that represents the maze in the game.
'''
import random
import tkinter as tk
class Maze:
    def __init__(self):
        self.rows = 10
        self.cols = 10
        self.maze = [[0] * self.cols for _ in range(self.rows)]
        self.player_row = 0
        self.player_col = 0
        self.goal_row = self.rows - 1
        self.goal_col = self.cols - 1
        self.generate_maze()
    def generate_maze(self):
        for row in range(self.rows):
            for col in range(self.cols):
                if random.random() < 0.3:
                    self.maze[row][col] = 1
    def move_player(self, direction):
        if direction == "up" and self.player_row > 0 and self.maze[self.player_row-1][self.player_col] != 1:
            self.player_row -= 1
        elif direction == "down" and self.player_row < self.rows-1 and self.maze[self.player_row+1][self.player_col] != 1:
            self.player_row += 1
        elif direction == "left" and self.player_col > 0 and self.maze[self.player_row][self.player_col-1] != 1:
            self.player_col -= 1
        elif direction == "right" and self.player_col < self.cols-1 and self.maze[self.player_row][self.player_col+1] != 1:
            self.player_col += 1
        if self.player_row == self.goal_row and self.player_col == self.goal_col:
            print("Congratulations! You have reached the goal!")

/home/brandon/Projects/ChatDev/WareHouse/MoneyCtrl_THUNLP_20230825093546/main.py

'''
This is the main file of the personal budget app. It contains the main function that initializes the GUI and starts the application.
'''
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from budget import Budget
def main():
    budget = Budget()
    def add_income():
        amount = float(income_amount_entry.get())
        description = income_description_entry.get()
        budget.add_income(amount, description)
        messagebox.showinfo("Success", "Income added successfully!")
    def add_expenses():
        amount = float(expenses_amount_entry.get())
        description = expenses_description_entry.get()
        budget.add_expense(amount, description)
        messagebox.showinfo("Success", "Expenses added successfully!")
    def generate_report():
        report = budget.generate_report()
        report_text.delete(1.0, tk.END)
        report_text.insert(tk.END, report)
    root = tk.Tk()
    root.title("Personal Budget App")
    income_label = ttk.Label(root, text="Income:")
    income_label.grid(row=0, column=0, padx=10, pady=10)
    income_amount_entry = ttk.Entry(root)
    income_amount_entry.grid(row=0, column=1, padx=10, pady=10)
    income_description_entry = ttk.Entry(root)
    income_description_entry.grid(row=0, column=2, padx=10, pady=10)
    add_income_button = ttk.Button(root, text="Add Income", command=add_income)
    add_income_button.grid(row=0, column=3, padx=10, pady=10)
    expenses_label = ttk.Label(root, text="Expenses:")
    expenses_label.grid(row=1, column=0, padx=10, pady=10)
    expenses_amount_entry = ttk.Entry(root)
    expenses_amount_entry.grid(row=1, column=1, padx=10, pady=10)
    expenses_description_entry = ttk.Entry(root)
    expenses_description_entry.grid(row=1, column=2, padx=10, pady=10)
    add_expenses_button = ttk.Button(root, text="Add Expenses", command=add_expenses)
    add_expenses_button.grid(row=1, column=3, padx=10, pady=10)
    generate_report_button = ttk.Button(root, text="Generate Report", command=generate_report)
    generate_report_button.grid(row=2, column=0, columnspan=4, padx=10, pady=10)
    report_text = tk.Text(root, height=10, width=40)
    report_text.grid(row=3, column=0, columnspan=4, padx=10, pady=10)
    root.mainloop()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/MoneyCtrl_THUNLP_20230825093546/budget.py

'''
This file contains the Budget class which handles income, expense tracking, and reporting.
'''
class Budget:
    def __init__(self):
        self.income = []
        self.expenses = []
    def add_income(self, amount, description):
        self.income.append({"amount": amount, "description": description})
    def add_expense(self, amount, description):
        self.expenses.append({"amount": amount, "description": description})
    def calculate_total_income(self):
        total_income = sum(income["amount"] for income in self.income)
        return total_income
    def calculate_total_expenses(self):
        total_expenses = sum(expense["amount"] for expense in self.expenses)
        return total_expenses
    def generate_report(self):
        total_income = self.calculate_total_income()
        total_expenses = self.calculate_total_expenses()
        net_income = total_income - total_expenses if total_expenses else total_income
        report = f"Total Income: ${total_income}\n"
        report += f"Total Expenses: ${total_expenses}\n"
        report += f"Net Income: ${net_income}\n"
        return report

/home/brandon/Projects/ChatDev/WareHouse/FAIR_ENOUGH_ModelBest1024_20231026000126/project_evaluator.py

import json
import re
import openai
class ProjectEvaluator:
    def __init__(self):
        self.prompt = """You are a professional start-up project judge. Please score the following open source software project based on the information provided, on a scale of 1 to 10. Your scoring should be divided into three dimensions: feasibility, usability, and innovativeness. Your return result should be a JSON format dictionary. An example is in the following line\n'{"feasibility": {"score": 8.5, "reason": "the idea of this project is simple but natural. tools and tech-schemes it requires are very mature so that it is easy to be implemented"}, "usability": {"score": 9.0, "reason": "the function it claims is very useful. it can help many people enhance efficiency"}, "novelty": {"score": 3.5, "reason": "main the idea of this project is not very frontier"}}'.\nNOTE: You should NOT copy the statement in the example above. You should write your reason independently."""
    def evaluate_project(self, readme_file):
        readme_content = self.read_file(readme_file)
        project_name = self.extract_project_name(readme_content)
        project_description = self.extract_project_description(readme_content)
        score = self.calculate_score(project_name, project_description)
        return score
    def read_file(self, file_path):
        with open(file_path, "r") as file:
            content = file.read()
        return content
    def extract_project_name(self, readme_content):
        project_name = ""
        match = re.search(r"#\s*(.*)", readme_content)
        if match:
            project_name = match.group(1)
        return project_name
    def extract_project_description(self, readme_content):
        project_description = ""
        match = re.search(r"##\s*Description\n\n(.*)", readme_content)
        if match:
            project_description = match.group(1)
        return project_description
    def calculate_score(self, project_name, project_description):
        score = 0
        resp = "### NOT POST YET ###"
        for i in range(10):
            try:
                print("post request ", i)
                resp = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo", 
                    messages=[
                        {"role": "system", "content": self.prompt}, 
                        {"role": "user", "content": f"Project Name: {project_name}\nProject Description: {project_description}\n"}
                    ]
                )
                print("response got", i)
                content = resp.choices[0]["message"]["content"]
                json_str = re.search(r'\{.+\}', content, re.S).group(0) 
                scores_dict = json.loads(json_str)
                return scores_dict
            except Exception as e:
                print(e)
                print(resp)
                print('api calling failed')
        return 


/home/brandon/Projects/ChatDev/WareHouse/FAIR_ENOUGH_ModelBest1024_20231026000126/main.py

import json
import tkinter as tk
from tkinter import messagebox
from project_evaluator import ProjectEvaluator
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Project Evaluator")
        self.geometry("400x200")
        self.evaluator = ProjectEvaluator()
        self.create_widgets()
    def create_widgets(self):
        self.label = tk.Label(self, text="Enter README.md file path:")
        self.label.pack()
        self.entry = tk.Entry(self)
        self.entry.pack()
        self.button = tk.Button(self, text="Evaluate", command=self.evaluate_project)
        self.button.pack()
    def evaluate_project(self):
        readme_file = self.entry.get()
        scores_dict = self.evaluator.evaluate_project(readme_file)
        scores_dict_str = json.dumps(scores_dict, indent=4, ensure_ascii=False)
        result = f"Project score:\n{scores_dict_str}"
        messagebox.showinfo("Evaluation Result", result)
if __name__ == "__main__":
    app = Application()
    app.mainloop()


/home/brandon/Projects/ChatDev/WareHouse/tetris_THUNLPDemo_2024/main.py

import pygame
import random
import numpy as np
from typing import List, Tuple, Optional
import os
import math
import time
pygame.init()
pygame.mixer.init()
BLOCK_SIZE = 30
GRID_WIDTH = 10
GRID_HEIGHT = 20
PREVIEW_SIZE = 4
SIDE_PANEL_WIDTH = 200
WINDOW_WIDTH = BLOCK_SIZE * GRID_WIDTH + SIDE_PANEL_WIDTH
WINDOW_HEIGHT = BLOCK_SIZE * GRID_HEIGHT
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)
COLORS = {
    'I': (0, 255, 255),        'O': (255, 255, 0),        'T': (128, 0, 128),        'S': (0, 255, 0),          'Z': (255, 0, 0),          'J': (0, 0, 255),          'L': (255, 165, 0),    }
INITIAL_FALL_SPEED = 0.8  SOFT_DROP_SPEED = 0.05    SPEED_UP_FACTOR = 0.08    MIN_FALL_SPEED = 0.1      LOCK_DELAY = 0.5          MAX_LOCK_RESETS = 15      MOVE_ANIMATION_SPEED = 0.05  ROTATION_ANIMATION_SPEED = 0.08  LINE_CLEAR_ANIMATION_TIME = 0.3  FLASH_SPEED = 0.05  SHAPES = {
    'I': [[1, 1, 1, 1]],
    'O': [[1, 1], [1, 1]],
    'T': [[0, 1, 0], [1, 1, 1]],
    'S': [[0, 1, 1], [1, 1, 0]],
    'Z': [[1, 1, 0], [0, 1, 1]],
    'J': [[1, 0, 0], [1, 1, 1]],
    'L': [[0, 0, 1], [1, 1, 1]]
}
class AnimationState:
    def __init__(self):
        self.move_progress = 0
        self.rotation_progress = 0
        self.line_clear_progress = 0
        self.flash_progress = 0
        self.last_pos = None
        self.last_shape = None
        self.target_pos = None
        self.target_shape = None
        self.lines_being_cleared = []
        self.flash_active = False
class Particle:
    def __init__(self, x: int, y: int, color: Tuple[int, int, int]):
        self.x = x
        self.y = y
        self.color = color
        self.velocity = [random.uniform(-3, 3), random.uniform(-8, -4)]
        self.life = 255
        self.size = random.randint(2, 6)
        self.rotation = random.uniform(0, 360)
        self.rotation_speed = random.uniform(-5, 5)
    def update(self):
        self.x += self.velocity[0]
        self.y += self.velocity[1]
        self.velocity[1] += 0.2          self.velocity[0] *= 0.99          self.life -= 3
        self.rotation += self.rotation_speed
        return self.life > 0
    def draw(self, screen):
        if self.life <= 0:
            return
        alpha = max(0, min(255, self.life))
        color = (*self.color, alpha)
        surface = pygame.Surface((self.size * 2, self.size * 2), pygame.SRCALPHA)
        points = [
            (self.size + math.cos(math.radians(self.rotation)) * self.size,
             self.size + math.sin(math.radians(self.rotation)) * self.size),
            (self.size + math.cos(math.radians(self.rotation + 120)) * self.size,
             self.size + math.sin(math.radians(self.rotation + 120)) * self.size),
            (self.size + math.cos(math.radians(self.rotation + 240)) * self.size,
             self.size + math.sin(math.radians(self.rotation + 240)) * self.size)
        ]
        pygame.draw.polygon(surface, color, points)
        screen.blit(surface, (self.x - self.size, self.y - self.size))
class Tetris:
    def __init__(self):
        self.screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        pygame.display.set_caption('俄罗斯方块')
        self.clock = pygame.time.Clock()
        self.grid = [[None for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
        self.current_piece = None
        self.current_shape = None
        self.current_pos = None
        self.held_piece = None
        self.can_hold = True
        self.next_piece = self._get_random_piece()
        self.game_over = False
        self.score = 0
        self.level = 1
        self.lines_cleared = 0
        self.particles = []
        self.fall_speed = INITIAL_FALL_SPEED
        self.current_fall_speed = INITIAL_FALL_SPEED
        self.last_fall_time = time.time()
        self.lock_delay_time = 0
        self.lock_delay_active = False
        self.lock_reset_count = 0
        self.last_move_time = time.time()
        self.paused = False
        self.combo = 0
        self.force_down = False          self.animation = AnimationState()
        self.high_score = self._load_high_score()
        self.font_big = pygame.font.Font(None, 48)
        self.font_small = pygame.font.Font(None, 36)
        self._load_sounds()
        self.background = self._create_background()
    def _load_sounds(self):
        if not os.path.exists('sounds'):
            os.makedirs('sounds')
        empty_sound = pygame.mixer.Sound(buffer=bytes([0]*44))          self.sounds = {
            'move': empty_sound,
            'rotate': empty_sound,
            'drop': empty_sound,
            'clear': empty_sound,
            'game_over': empty_sound
        }
    def _create_background(self):
        surface = pygame.Surface((WINDOW_WIDTH, WINDOW_HEIGHT))
        for y in range(WINDOW_HEIGHT):
            progress = y / WINDOW_HEIGHT
            color = (
                int(20 + 20 * math.sin(progress * math.pi)),
                int(10 + 10 * math.sin(progress * math.pi * 2)),
                int(40 + 20 * math.sin(progress * math.pi * 0.5))
            )
            pygame.draw.line(surface, color, (0, y), (WINDOW_WIDTH, y))
        return surface
    def _load_high_score(self) -> int:
        try:
            if os.path.exists('highscore.txt'):
                with open('highscore.txt', 'r') as f:
                    return int(f.read())
        except:
            pass
        return 0
    def _save_high_score(self):
        with open('highscore.txt', 'w') as f:
            f.write(str(self.high_score))
    def _get_random_piece(self) -> str:
        return random.choice(list(SHAPES.keys()))
    def new_piece(self):
        self.current_piece = self.next_piece
        self.next_piece = self._get_random_piece()
        self.current_shape = SHAPES[self.current_piece]
        self.current_pos = [0, GRID_WIDTH//2 - len(self.current_shape[0])//2]
        self.can_hold = True
        self.animation.move_progress = 0
        self.animation.rotation_progress = 0
        self.animation.last_pos = self.current_pos.copy()
        self.animation.last_shape = [row[:] for row in self.current_shape]
        self.animation.target_pos = self.current_pos.copy()
        self.animation.target_shape = [row[:] for row in self.current_shape]
        if self._check_collision():
            self.game_over = True
            self.sounds['game_over'].play()
    def hold_piece(self):
        if not self.can_hold:
            return
        self.sounds['rotate'].play()
        if self.held_piece is None:
            self.held_piece = self.current_piece
            self.new_piece()
        else:
            self.held_piece, self.current_piece = self.current_piece, self.held_piece
            self.current_shape = SHAPES[self.current_piece]
            self.current_pos = [0, GRID_WIDTH//2 - len(self.current_shape[0])//2]
        self.can_hold = False
    def rotate_piece(self, clockwise: bool = True):
        if self.current_piece == 'O':
            return
        self.sounds['rotate'].play()
        old_shape = self.current_shape
        self.current_shape = np.rot90(self.current_shape, 1 if not clockwise else -1).tolist()
        self.animation.last_shape = old_shape
        self.animation.target_shape = self.current_shape
        self.animation.rotation_progress = 0
        if self._check_collision():
            self.current_shape = old_shape
            self.animation.target_shape = old_shape
    def _check_collision(self) -> bool:
        for y, row in enumerate(self.current_shape):
            for x, cell in enumerate(row):
                if cell:
                    grid_y = self.current_pos[0] + y
                    grid_x = self.current_pos[1] + x
                    if (grid_x < 0 or grid_x >= GRID_WIDTH or
                        grid_y >= GRID_HEIGHT or
                        (grid_y >= 0 and self.grid[grid_y][grid_x] is not None)):
                        return True
        return False
    def _get_ghost_position(self) -> List[int]:
        ghost_pos = self.current_pos.copy()
        temp = self.current_pos.copy()
        while True:
            ghost_pos[0] += 1
            self.current_pos = ghost_pos.copy()
            if self._check_collision():
                ghost_pos[0] -= 1
                self.current_pos = temp
                break
        return ghost_pos
    def move(self, dx: int, dy: int):
        old_pos = self.current_pos.copy()
        self.current_pos[1] += dx
        self.current_pos[0] += dy
        if dx != 0:
            self.sounds['move'].play()
        collision = self._check_collision()
        if collision:
            self.current_pos[1] -= dx
            self.current_pos[0] -= dy
            if dy > 0:                  if not self.lock_delay_active:
                    self.lock_delay_active = True
                    self.lock_delay_time = time.time()
                    self.lock_reset_count = 0
                elif time.time() - self.lock_delay_time > LOCK_DELAY or self.force_down:
                    self._place_piece()
                    self._clear_lines()
                    self.new_piece()
                    self.lock_delay_active = False
                    self.force_down = False
            return True
        else:
            if self.lock_delay_active and self.lock_reset_count < MAX_LOCK_RESETS:
                self.current_pos[0] += 1
                if self._check_collision():
                    self.lock_delay_time = time.time()
                    self.lock_reset_count += 1
                self.current_pos[0] -= 1
            else:
                self.current_pos[0] += 1
                if not self._check_collision():
                    self.lock_delay_active = False
                self.current_pos[0] -= 1
            if dx != 0:
                self.animation.last_pos = old_pos
                self.animation.target_pos = self.current_pos.copy()
                self.animation.move_progress = 0
        return False
    def hard_drop(self):
        self.sounds['drop'].play()
        ghost_pos = self._get_ghost_position()
        self.current_pos = ghost_pos
        self.force_down = True          self.move(0, 1)      def _place_piece(self):
        for y, row in enumerate(self.current_shape):
            for x, cell in enumerate(row):
                if cell:
                    grid_y = self.current_pos[0] + y
                    grid_x = self.current_pos[1] + x
                    if 0 <= grid_y < GRID_HEIGHT:
                        self.grid[grid_y][grid_x] = self.current_piece
        for x in range(len(self.current_shape[0])):
            color = COLORS[self.current_piece]
            px = (self.current_pos[1] + x) * BLOCK_SIZE
            py = (self.current_pos[0] + len(self.current_shape) - 1) * BLOCK_SIZE
            for _ in range(5):
                self.particles.append(Particle(px, py, color))
    def _clear_lines(self):
        lines_to_clear = []
        for y in range(GRID_HEIGHT):
            if all(cell is not None for cell in self.grid[y]):
                lines_to_clear.append(y)
        if not lines_to_clear:
            self.combo = 0
            return
        self.sounds['clear'].play()
        self.animation.lines_being_cleared = lines_to_clear
        self.animation.line_clear_progress = 0
        self.animation.flash_active = True
        self.animation.flash_progress = 0
        for y in lines_to_clear:
            for x in range(GRID_WIDTH):
                color = COLORS[self.grid[y][x]]
                px = x * BLOCK_SIZE
                py = y * BLOCK_SIZE
                for _ in range(5):                      self.particles.append(Particle(px, py, color))
        for y in lines_to_clear:
            self.grid.pop(y)
            self.grid.insert(0, [None] * GRID_WIDTH)
        lines_count = len(lines_to_clear)
        self.lines_cleared += lines_count
        self.combo += 1
        combo_multiplier = min(self.combo, 10)          base_score = [100, 300, 500, 800][lines_count - 1]
        self.score += base_score * self.level * combo_multiplier
        self.level = self.lines_cleared // 10 + 1
        self.fall_speed = max(MIN_FALL_SPEED, 
                            INITIAL_FALL_SPEED - (self.level - 1) * SPEED_UP_FACTOR)
        if self.score > self.high_score:
            self.high_score = self.score
            self._save_high_score()
    def _interpolate_position(self, progress: float) -> List[int]:
        if self.animation.last_pos is None or self.animation.target_pos is None:
            return self.current_pos
        return [
            self.current_pos[0],              self.animation.last_pos[1] + (self.animation.target_pos[1] - self.animation.last_pos[1]) * progress
        ]
    def draw(self):
        self.screen.blit(self.background, (0, 0))
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                pygame.draw.rect(self.screen, GRAY,
                               (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 1)
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                if self.grid[y][x]:
                    if y in self.animation.lines_being_cleared:
                        if self.animation.line_clear_progress < LINE_CLEAR_ANIMATION_TIME:
                            continue
                    color = COLORS[self.grid[y][x]]
                    pygame.draw.rect(self.screen, color,
                                   (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))
                    pygame.draw.rect(self.screen, WHITE,
                                   (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 1)
        if self.current_piece:
            ghost_pos = self._get_ghost_position()
            for y, row in enumerate(self.current_shape):
                for x, cell in enumerate(row):
                    if cell:
                        color = (*COLORS[self.current_piece], 128)
                        ghost_x = (ghost_pos[1] + x) * BLOCK_SIZE
                        ghost_y = (ghost_pos[0] + y) * BLOCK_SIZE
                        surface = pygame.Surface((BLOCK_SIZE, BLOCK_SIZE), pygame.SRCALPHA)
                        pygame.draw.rect(surface, color, (0, 0, BLOCK_SIZE, BLOCK_SIZE))
                        self.screen.blit(surface, (ghost_x, ghost_y))
        if self.current_piece:
            pos = self._interpolate_position(min(1, self.animation.move_progress / MOVE_ANIMATION_SPEED))
            for y, row in enumerate(self.current_shape):
                for x, cell in enumerate(row):
                    if cell:
                        color = COLORS[self.current_piece]
                        block_x = (pos[1] + x) * BLOCK_SIZE
                        block_y = (pos[0] + y) * BLOCK_SIZE
                        if self.animation.rotation_progress < ROTATION_ANIMATION_SPEED:
                            progress = self.animation.rotation_progress / ROTATION_ANIMATION_SPEED
                            scale = 1 - math.sin(progress * math.pi) * 0.2
                            center_x = pos[1] * BLOCK_SIZE + len(row) * BLOCK_SIZE / 2
                            center_y = pos[0] * BLOCK_SIZE + len(self.current_shape) * BLOCK_SIZE / 2
                            block_x = center_x + (block_x - center_x) * scale
                            block_y = center_y + (block_y - center_y) * scale
                        pygame.draw.rect(self.screen, color,
                                       (block_x, block_y, BLOCK_SIZE, BLOCK_SIZE))
                        pygame.draw.rect(self.screen, WHITE,
                                       (block_x, block_y, BLOCK_SIZE, BLOCK_SIZE), 1)
        panel_x = GRID_WIDTH * BLOCK_SIZE + 10
        next_text = self.font_small.render('Next:', True, WHITE)
        self.screen.blit(next_text, (panel_x, 20))
        next_shape = SHAPES[self.next_piece]
        for y, row in enumerate(next_shape):
            for x, cell in enumerate(row):
                if cell:
                    color = COLORS[self.next_piece]
                    pygame.draw.rect(self.screen, color,
                                   (panel_x + x * BLOCK_SIZE,
                                    60 + y * BLOCK_SIZE,
                                    BLOCK_SIZE, BLOCK_SIZE))
                    pygame.draw.rect(self.screen, WHITE,
                                   (panel_x + x * BLOCK_SIZE,
                                    60 + y * BLOCK_SIZE,
                                    BLOCK_SIZE, BLOCK_SIZE), 1)
        held_text = self.font_small.render('Hold:', True, WHITE)
        self.screen.blit(held_text, (panel_x, 160))
        if self.held_piece:
            held_shape = SHAPES[self.held_piece]
            for y, row in enumerate(held_shape):
                for x, cell in enumerate(row):
                    if cell:
                        color = COLORS[self.held_piece]
                        if not self.can_hold:
                            color = tuple(c//2 for c in color)                          pygame.draw.rect(self.screen, color,
                                       (panel_x + x * BLOCK_SIZE,
                                        200 + y * BLOCK_SIZE,
                                        BLOCK_SIZE, BLOCK_SIZE))
                        pygame.draw.rect(self.screen, WHITE,
                                       (panel_x + x * BLOCK_SIZE,
                                        200 + y * BLOCK_SIZE,
                                        BLOCK_SIZE, BLOCK_SIZE), 1)
        score_text = self.font_small.render(f'Score: {self.score}', True, WHITE)
        self.screen.blit(score_text, (panel_x, 300))
        high_score_text = self.font_small.render(f'High: {self.high_score}', True, WHITE)
        self.screen.blit(high_score_text, (panel_x, 340))
        level_text = self.font_small.render(f'Level: {self.level}', True, WHITE)
        self.screen.blit(level_text, (panel_x, 380))
        lines_text = self.font_small.render(f'Lines: {self.lines_cleared}', True, WHITE)
        self.screen.blit(lines_text, (panel_x, 420))
        if self.combo > 1:
            combo_text = self.font_small.render(f'Combo: x{self.combo}', True, WHITE)
            self.screen.blit(combo_text, (panel_x, 460))
        self.particles = [p for p in self.particles if p.update()]
        for particle in self.particles:
            particle.draw(self.screen)
        if self.animation.flash_active and self.animation.lines_being_cleared:
            flash_alpha = int(255 * (1 - self.animation.flash_progress / FLASH_SPEED))
            if flash_alpha > 0:
                flash_surface = pygame.Surface((WINDOW_WIDTH, WINDOW_HEIGHT), pygame.SRCALPHA)
                for y in self.animation.lines_being_cleared:
                    pygame.draw.rect(flash_surface, (255, 255, 255, flash_alpha),
                                   (0, y * BLOCK_SIZE, GRID_WIDTH * BLOCK_SIZE, BLOCK_SIZE))
                self.screen.blit(flash_surface, (0, 0))
        if self.game_over:
            self._draw_overlay("Game Over! Press R to restart")
        elif self.paused:
            self._draw_overlay("Paused")
        pygame.display.flip()
    def _draw_overlay(self, text: str):
        overlay = pygame.Surface((WINDOW_WIDTH, WINDOW_HEIGHT))
        overlay.set_alpha(128)
        overlay.fill(BLACK)
        self.screen.blit(overlay, (0, 0))
        text_surface = self.font_big.render(text, True, WHITE)
        text_rect = text_surface.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2))
        self.screen.blit(text_surface, text_rect)
    def reset(self):
        self.grid = [[None for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
        self.current_piece = None
        self.current_shape = None
        self.current_pos = None
        self.held_piece = None
        self.can_hold = True
        self.next_piece = self._get_random_piece()
        self.game_over = False
        self.score = 0
        self.level = 1
        self.lines_cleared = 0
        self.particles = []
        self.fall_speed = INITIAL_FALL_SPEED
        self.current_fall_speed = INITIAL_FALL_SPEED
        self.last_fall_time = time.time()
        self.lock_delay_time = 0
        self.lock_delay_active = False
        self.lock_reset_count = 0
        self.combo = 0
        self.animation = AnimationState()
        self.paused = False
        self.new_piece()
    def update_animations(self, dt: float):
        if self.animation.move_progress < MOVE_ANIMATION_SPEED:
            self.animation.move_progress += dt
        if self.animation.rotation_progress < ROTATION_ANIMATION_SPEED:
            self.animation.rotation_progress += dt
        if self.animation.line_clear_progress < LINE_CLEAR_ANIMATION_TIME:
            self.animation.line_clear_progress += dt
        if self.animation.flash_active:
            self.animation.flash_progress += dt
            if self.animation.flash_progress >= FLASH_SPEED:
                self.animation.flash_active = False
                self.animation.flash_progress = 0
    def run(self):
        self.new_piece()
        last_time = time.time()
        while True:
            current_time = time.time()
            dt = current_time - last_time
            last_time = current_time
            self.clock.tick(60)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        return
                    if self.game_over:
                        if event.key == pygame.K_r:
                            self.reset()
                        continue
                    if event.key == pygame.K_p:
                        self.paused = not self.paused
                        continue
                    if self.paused:
                        continue
                    if event.key == pygame.K_LEFT:
                        self.move(-1, 0)
                    elif event.key == pygame.K_RIGHT:
                        self.move(1, 0)
                    elif event.key == pygame.K_DOWN:
                        self.current_fall_speed = SOFT_DROP_SPEED
                    elif event.key == pygame.K_UP:
                        self.rotate_piece()
                    elif event.key == pygame.K_z:
                        self.rotate_piece(False)
                    elif event.key == pygame.K_SPACE:
                        self.hard_drop()
                    elif event.key == pygame.K_c:
                        self.hold_piece()
                elif event.type == pygame.KEYUP:
                    if event.key == pygame.K_DOWN:
                        self.current_fall_speed = self.fall_speed
            if not self.game_over and not self.paused:
                self.update_animations(dt)
                if current_time - self.last_fall_time > self.current_fall_speed:
                    self.move(0, 1)                      self.last_fall_time = current_time
            self.draw()
if __name__ == '__main__':
    game = Tetris()
    game.run() 

/home/brandon/Projects/ChatDev/WareHouse/Calculator_THUNLP_20230628184918/main.py

'''
This is the main file that initializes the calculator GUI.
'''
import tkinter as tk
from calculator import Calculator
if __name__ == "__main__":
    root = tk.Tk()
    calculator = Calculator(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Calculator_THUNLP_20230628184918/calculator.py

'''
This file contains the Calculator class that defines the calculator GUI and its functionality.
'''
import tkinter as tk
from PIL import Image, ImageTk
class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Basic Calculator")
        self.entry = tk.Entry(self.root, width=30)
        self.entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10)
        self.create_buttons()
    def create_buttons(self):
        buttons = [
            ("7", "button_7.png"), ("8", "button_8.png"), ("9", "button_9.png"), ("/", "button_divide.png"),
            ("4", "button_4.png"), ("5", "button_5.png"), ("6", "button_6.png"), ("*", "button_multiply.png"),
            ("1", "button_1.png"), ("2", "button_2.png"), ("3", "button_3.png"), ("-", "button_minus.png"),
            ("0", "button_0.png"), (".", "button_decimal.png"), ("=", "button_equal.png"), ("+", "button_plus.png")
        ]
        row = 1
        col = 0
        for button_text, image_file in buttons:
            image = Image.open(image_file).resize((50, 50))
            photo = ImageTk.PhotoImage(image)
            button = tk.Button(self.root, image=photo, command=lambda button_text=button_text: self.button_click(button_text))
            button.image = photo
            button.grid(row=row, column=col, padx=5, pady=5)
            col += 1
            if col > 3:
                col = 0
                row += 1
    def button_click(self, button_text):
        current_value = self.entry.get()
        if button_text == "=":
            try:
                result = eval(current_value)
                self.entry.delete(0, tk.END)
                self.entry.insert(tk.END, str(result))
            except:
                self.entry.delete(0, tk.END)
                self.entry.insert(tk.END, "Error")
        else:
            self.entry.insert(tk.END, button_text)

/home/brandon/Projects/ChatDev/WareHouse/WordCloud_THUNLP_20231015215721/setup.py

from setuptools import setup
setup(
    name="wordcloud_generator",
    version="1.0",
    description="A word cloud generator program",
    author="ChatDev",
    py_modules=["main"],
    install_requires=[
        "wordcloud",
        "matplotlib"
    ],
    entry_points={
        "console_scripts": [
            "wordcloud_generator=main:WordCloudGenerator"
        ]
    }
)

/home/brandon/Projects/ChatDev/WareHouse/WordCloud_THUNLP_20231015215721/main.py

'''
Word Cloud Generator
This program generates a word cloud from user input text.
Author: ChatDev
'''
import tkinter as tk
from tkinter import messagebox, filedialog
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from PIL import ImageTk, Image
class WordCloudGenerator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Word Cloud Generator")
        self.text_entry = tk.Text(self.root, height=10, width=50)
        self.text_entry.pack()
        self.generate_button = tk.Button(self.root, text="Generate Word Cloud", command=self.generate_word_cloud)
        self.generate_button.pack()
        self.canvas = tk.Canvas(self.root, width=400, height=400)
        self.canvas.pack()
        self.root.mainloop()
    def generate_word_cloud(self):
        text = self.text_entry.get("1.0", tk.END)
        if not text.strip():
            messagebox.showerror("Error", "Please enter some text.")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG Image", "*.png")])
        if not file_path:
            return
        wordcloud = WordCloud().generate(text)
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis("off")
        plt.savefig(file_path)
        plt.close()
        self.update_canvas(file_path)
    def update_canvas(self, image_path):
        image = Image.open(image_path)
        image = image.resize((400, 400), Image.ANTIALIAS)
        self.wordcloud_image = ImageTk.PhotoImage(image)
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.wordcloud_image)
if __name__ == "__main__":
    WordCloudGenerator()

/home/brandon/Projects/ChatDev/WareHouse/umbrella_stops_raindrops_DefaultOrganization_20240104193702/main.py

import tkinter as tk
from raindrop import Raindrop
import random
class MainApp:
    def __init__(self, root):
        self.root = root
        self.canvas = tk.Canvas(root, width=800, height=600)
        self.canvas.pack()
        self.umbrella = self.canvas.create_oval(0, 0, 50, 50, fill='blue')
        self.canvas.bind('<Motion>', self.move_umbrella)
        self.raindrops = []
        self.create_raindrop()          self.root.after(100, self.check_raindrop_collision)      def move_umbrella(self, event):
        x, y = event.x, event.y
        self.canvas.coords(self.umbrella, x-25, y-25, x+25, y+25)
    def check_raindrop_collision(self):
        umbrella_coords = self.canvas.coords(self.umbrella)
        for raindrop in self.raindrops:
            raindrop_coords = self.canvas.coords(raindrop.id)
            if self.is_collision(umbrella_coords, raindrop_coords):
                self.canvas.delete(raindrop.id)
                self.raindrops.remove(raindrop)
        self.root.after(100, self.check_raindrop_collision)      def is_collision(self, coords1, coords2):
        if len(coords2) < 4:
            return False
        x1, y1, x2, y2 = coords1
        x3, y3, x4, y4 = coords2
        if x3 < x2 and x4 > x1 and y3 < y2 and y4 > y1:
            return True
        return False
    def create_raindrop(self):
        x = random.randint(0, self.canvas.winfo_width())          raindrop = Raindrop(self.canvas, x)
        self.raindrops.append(raindrop)
        self.canvas.after(10, self.create_raindrop)
root = tk.Tk()
app = MainApp(root)
root.mainloop()


/home/brandon/Projects/ChatDev/WareHouse/umbrella_stops_raindrops_DefaultOrganization_20240104193702/raindrop.py

import tkinter as tk
import random
class Raindrop:
    def __init__(self, canvas, x):
        self.canvas = canvas
        self.x = x
        self.y = 0
        self.id = self.canvas.create_oval(self.x-5, self.y-5, self.x+5, self.y+5, fill='gray')
        self.canvas.move(self.id, 0, self.y)
        self.fall_speed = random.randint(1, 5)
        self.canvas.after(50, self.fall)
    def fall(self):
        self.y += self.fall_speed
        self.canvas.move(self.id, 0, self.fall_speed)
        if self.y < self.canvas.winfo_height():
            self.canvas.after(50, self.fall)
        else:
            self.canvas.delete(self.id)

/home/brandon/Projects/ChatDev/WareHouse/PixelRunner_THUNLP_20230825072339/obstacle.py

'''
This file contains the Obstacle class which represents the obstacles in the game.
'''
import pygame
class Obstacle:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    def update(self):
        self.x -= 5
    def draw(self, screen):
        pygame.draw.rect(screen, (0, 255, 0), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/PixelRunner_THUNLP_20230825072339/powerup.py

'''
This file contains the Powerup class which represents the powerups in the game.
'''
import pygame
class Powerup:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    def update(self):
        self.x -= 5
    def draw(self, screen):
        pygame.draw.rect(screen, (0, 0, 255), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/PixelRunner_THUNLP_20230825072339/main.py

'''
This is the main file that runs the retro-style endless runner game.
'''
import pygame
from game import Game
def main():
    pygame.init()
    game = Game()
    game.run()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/PixelRunner_THUNLP_20230825072339/game.py

'''
This file contains the Game class which manages the game loop and overall game logic.
'''
import pygame
from player import Player
from obstacle import Obstacle
from powerup import Powerup
import random
class Game:
    def __init__(self):
        self.screen_width = 800
        self.screen_height = 600
        self.screen = pygame.display.set_mode((self.screen_width, self.screen_height))
        pygame.display.set_caption("Retro Runner")
        self.clock = pygame.time.Clock()
        self.is_running = True
        self.player = Player()
        self.obstacles = []
        self.powerups = []
        self.score = 0
    def run(self):
        while self.is_running:
            self.handle_events()
            self.update()
            self.render()
            self.clock.tick(60)
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.is_running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    self.player.jump()
                elif event.key == pygame.K_DOWN:
                    self.player.slide()
    def update(self):
        self.player.update()
        self.spawn_obstacles()
        self.spawn_powerups()
        self.check_collisions()
        self.score += 1
        for obstacle in self.obstacles:
            obstacle.update()
            if obstacle.x + obstacle.width < 0:
                self.obstacles.remove(obstacle)
        for powerup in self.powerups:
            powerup.update()
            if powerup.x + powerup.width < 0:
                self.powerups.remove(powerup)
    def render(self):
        self.screen.fill((0, 0, 0))
        self.player.draw(self.screen)
        for obstacle in self.obstacles:
            obstacle.draw(self.screen)
        for powerup in self.powerups:
            powerup.draw(self.screen)
        self.draw_score()
        pygame.display.flip()
    def spawn_obstacles(self):
        if len(self.obstacles) < 5:
            x = self.screen_width
            y = random.randint(400, 500)
            width = random.randint(50, 100)
            height = random.randint(50, 100)
            obstacle = Obstacle(x, y, width, height)
            self.obstacles.append(obstacle)
    def spawn_powerups(self):
        if len(self.powerups) < 2:
            x = self.screen_width
            y = random.randint(300, 400)
            width = 50
            height = 50
            powerup = Powerup(x, y, width, height)
            self.powerups.append(powerup)
    def check_collisions(self):
        player_rect = pygame.Rect(self.player.x, self.player.y, self.player.width, self.player.height)
        powerups_to_remove = []
        for powerup in self.powerups:
            powerup_rect = pygame.Rect(powerup.x, powerup.y, powerup.width, powerup.height)
            if player_rect.colliderect(powerup_rect):
                powerups_to_remove.append(powerup)
                self.score += 10
        for powerup in powerups_to_remove:
            self.powerups.remove(powerup)
    def draw_score(self):
        font = pygame.font.Font(None, 36)
        score_text = font.render("Score: " + str(self.score), True, (255, 255, 255))
        self.screen.blit(score_text, (10, 10))

/home/brandon/Projects/ChatDev/WareHouse/PixelRunner_THUNLP_20230825072339/player.py

'''
This file contains the Player class which represents the player character.
'''
import pygame
class Player:
    def __init__(self):
        self.width = 50
        self.height = 50
        self.x = 100
        self.y = 400
        self.velocity = 0
        self.is_jumping = False
        self.is_sliding = False
    def jump(self):
        if not self.is_jumping and not self.is_sliding:
            self.velocity = -10
            self.is_jumping = True
    def slide(self):
        if not self.is_jumping and not self.is_sliding:
            self.height = 25
            self.y += 25
            self.is_sliding = True
    def update(self):
        if self.is_jumping:
            self.velocity += 0.5
            self.y += self.velocity
            if self.y >= 400:
                self.y = 400
                self.velocity = 0
                self.is_jumping = False
        elif self.is_sliding:
            self.height = 50
            self.y -= 25
            self.is_sliding = False
    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, self.width, self.height))

/home/brandon/Projects/ChatDev/WareHouse/rock_paper_scissors_tangxixi_ModelBest1024_20231026190617/gui.py

'''
The GUI class representing the graphical user interface.
'''
import tkinter as tk
from tkinter import messagebox
class GUI:
    def __init__(self, game):
        self.game = game
        self.window = tk.Tk()
        self.window.title("Rock, Paper, Scissors")
        self.window.geometry("300x200")
        self.message_label = tk.Label(self.window, text="Make your choice:")
        self.message_label.pack()
        self.choices_frame = tk.Frame(self.window)
        self.choices_frame.pack()
        self.rock_button = tk.Button(self.choices_frame, text="Rock", command=self.play_rock)
        self.rock_button.pack(side=tk.LEFT)
        self.paper_button = tk.Button(self.choices_frame, text="Paper", command=self.play_paper)
        self.paper_button.pack(side=tk.LEFT)
        self.scissors_button = tk.Button(self.choices_frame, text="Scissors", command=self.play_scissors)
        self.scissors_button.pack(side=tk.LEFT)
        self.scores_label = tk.Label(self.window, text="Scores: Player - 0, Computer - 0")
        self.scores_label.pack()
    def run(self):
        self.window.mainloop()
    def play_rock(self):
        self.play_round("rock")
    def play_paper(self):
        self.play_round("paper")
    def play_scissors(self):
        self.play_round("scissors")
    def play_round(self, player_choice):
        self.game.play_round(player_choice)
        self.update_scores()
        self.update_choices()
        winner = self.game.determine_winner(self.game.player_choice, self.game.computer_choice)
        if winner == "player":
            messagebox.showinfo("Result", "You win!")
        elif winner == "computer":
            messagebox.showinfo("Result", "Computer wins!")
        else:
            messagebox.showinfo("Result", "It's a tie!")
    def update_scores(self):
        scores_text = f"Scores: Player - {self.game.player_score}, Computer - {self.game.computer_score}"
        self.scores_label.config(text=scores_text)
    def update_choices(self):
        self.message_label.config(text=f"Your choice: {self.game.player_choice}, Computer's choice: {self.game.computer_choice}")

/home/brandon/Projects/ChatDev/WareHouse/rock_paper_scissors_tangxixi_ModelBest1024_20231026190617/main.py

'''
The main file to run the rock, paper, scissors game.
'''
from game import Game
from gui import GUI
if __name__ == "__main__":
    game = Game()
    gui = GUI(game)
    gui.run()

/home/brandon/Projects/ChatDev/WareHouse/rock_paper_scissors_tangxixi_ModelBest1024_20231026190617/game.py

'''
The Game class representing the game logic.
'''
import random
class Game:
    def __init__(self):
        self.player_score = 0
        self.computer_score = 0
        self.player_choice = None
        self.computer_choice = None
    def start_game(self):
        self.player_score = 0
        self.computer_score = 0
    def play_round(self, player_choice):
        self.player_choice = player_choice
        self.computer_choice = self.get_computer_choice()
        winner = self.determine_winner(self.player_choice, self.computer_choice)
        if winner == "player":
            self.player_score += 1
        elif winner == "computer":
            self.computer_score += 1
    def get_computer_choice(self):
        choices = ["rock", "paper", "scissors"]
        return random.choice(choices)
    def determine_winner(self, player_choice, computer_choice):
        if player_choice == computer_choice:
            return "tie"
        elif (
            (player_choice == "rock" and computer_choice == "scissors")
            or (player_choice == "paper" and computer_choice == "rock")
            or (player_choice == "scissors" and computer_choice == "paper")
        ):
            return "player"
        else:
            return "computer"
    def reset_game(self):
        self.player_score = 0
        self.computer_score = 0
        self.player_choice = None
        self.computer_choice = None

/home/brandon/Projects/ChatDev/WareHouse/BookBreeze_THUNLP_20230825072339/.py

pip install mobi

/home/brandon/Projects/ChatDev/WareHouse/BookBreeze_THUNLP_20230825072339/ebook_reader.py

'''
This file contains the EbookReader class which represents the e-book reader application.
'''
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import PyPDF2
import ebooklib
from ebooklib import epub
import mobi
class EbookReader:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("E-book Reader")
        self.root.geometry("800x600")
        self.current_book = None
        self.bookmarks = []
        self.create_menu()
        self.create_book_display()
        self.create_bookmarks_panel()
    def create_menu(self):
        menu_bar = tk.Menu(self.root)
        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Open", command=self.open_book)
        file_menu.add_command(label="Exit", command=self.root.quit)
        menu_bar.add_cascade(label="File", menu=file_menu)
        self.root.config(menu=menu_bar)
    def create_book_display(self):
        self.book_display = tk.Text(self.root, wrap=tk.WORD)
        self.book_display.pack(fill=tk.BOTH, expand=True)
    def create_bookmarks_panel(self):
        self.bookmarks_panel = tk.Frame(self.root)
        self.bookmarks_panel.pack(side=tk.RIGHT, fill=tk.Y)
        self.bookmarks_label = tk.Label(self.bookmarks_panel, text="Bookmarks")
        self.bookmarks_label.pack()
        self.bookmarks_listbox = tk.Listbox(self.bookmarks_panel)
        self.bookmarks_listbox.pack(fill=tk.BOTH, expand=True)
        self.add_bookmark_button = tk.Button(self.bookmarks_panel, text="Add Bookmark", command=self.add_bookmark)
        self.add_bookmark_button.pack()
        self.remove_bookmark_button = tk.Button(self.bookmarks_panel, text="Remove Bookmark", command=self.remove_bookmark)
        self.remove_bookmark_button.pack()
    def open_book(self):
        filetypes = [("PDF Files", "*.pdf"), ("EPUB Files", "*.epub"), ("MOBI Files", "*.mobi")]
        filepath = filedialog.askopenfilename(filetypes=filetypes)
        if filepath:
            self.current_book = filepath
            self.book_display.delete(1.0, tk.END)
            self.book_display.insert(tk.END, f"Opening book: {filepath}")
            if filepath.endswith(".pdf"):
                pdf_file = open(filepath, "rb")
                pdf_reader = PyPDF2.PdfReader(pdf_file)
                num_pages = len(pdf_reader.pages)
                for page_num in range(num_pages):
                    page = pdf_reader.pages[page_num]
                    self.book_display.insert(tk.END, page.extract_text())
                pdf_file.close()
            elif filepath.endswith(".epub"):
                book = epub.read_epub(filepath)
                for item in book.get_items():
                    if item.get_type() == ebooklib.ITEM_DOCUMENT:
                        self.book_display.insert(tk.END, item.get_content())
            elif filepath.endswith(".mobi"):
                mobi_book = mobi.open(filepath)
                for i in range(mobi_book.num_pages):
                    self.book_display.insert(tk.END, mobi_book.read_page(i))
        else:
            messagebox.showinfo("No File Selected", "No e-book file selected.")
    def add_bookmark(self):
        if self.current_book:
            bookmark = self.book_display.index(tk.INSERT)
            self.bookmarks.append(bookmark)
            self.bookmarks_listbox.insert(tk.END, f"Bookmark {len(self.bookmarks)}")
    def remove_bookmark(self):
        selected_index = self.bookmarks_listbox.curselection()
        if selected_index:
            bookmark_index = selected_index[0]
            self.bookmarks.pop(bookmark_index)
            self.bookmarks_listbox.delete(selected_index)
    def start(self):
        self.root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/BookBreeze_THUNLP_20230825072339/main.py

'''
This is the main file of the e-book reader application.
'''
from ebook_reader import EbookReader
def main():
    reader = EbookReader()
    reader.start()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Website_THUNLP_20230725154612/index.html

<!DOCTYPE html>
<html>
<head>
    <title>Transformer Model Introduction</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <h1>Transformer Model Introduction</h1>
    <h2>History</h2>
    <p>Provide a brief history of the Transformer model here.</p>
    <h2>Architecture</h2>
    <p>Explain the architecture of the Transformer model here.</p>
    <h2>Potentials</h2>
    <p>Discuss the potentials and advantages of the Transformer model here.</p>
    <h2>Future Work</h2>
    <p>Outline the future work and potential improvements for the Transformer model here.</p>
    <script src="script.js"></script>
</body>
</html>


/home/brandon/Projects/ChatDev/WareHouse/Website_THUNLP_20230725154612/style.css

body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f2f2f2; 
}
h1 {
    color: #333;
    font-size: 28px; 
    line-height: 1.5; 
}
h2 {
    color: #666;
    margin-top: 30px;
    font-size: 24px; 
}
p {
    color: #999;
    margin-bottom: 20px;
    font-size: 16px; 
}
h2:hover {
    color: #ff0000;
    cursor: pointer;
}
*/

/home/brandon/Projects/ChatDev/WareHouse/Website_THUNLP_20230725154612/script.js



/home/brandon/Projects/ChatDev/WareHouse/Poker1_DefaultOrganization_20231006035628/main.py

'''
Main file for the Texas Hold'em Poker game.
'''
from game import Game
from player import HumanPlayer, AIPlayer
from deck import Deck
def main():
    game = Game()
    game.start()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/Poker1_DefaultOrganization_20231006035628/game.py

'''
Game module that manages the Texas Hold'em Poker game.
'''
from player import HumanPlayer, AIPlayer
from deck import Deck
class Game:
    def __init__(self):
        self.players = []
        self.deck = Deck()
        self.community_cards = []
        self.small_blind = 5
        self.big_blind = 10
        self.current_bet = 0
        self.pot = 0
    def start(self):
        self.initialize_players()
        self.initialize_blinds()
        self.play_round()
    def initialize_players(self):
        self.players.append(HumanPlayer("Human", 1000))
        self.players.append(AIPlayer("AI 1", 1000))
        self.players.append(AIPlayer("AI 2", 1000))
        self.players.append(AIPlayer("AI 3", 1000))
        self.players.append(AIPlayer("AI 4", 1000))
    def initialize_blinds(self):
        for player in self.players:
            if player.name == "AI 4":
                player.blind = self.small_blind
            elif player.name == "Human":
                player.blind = self.big_blind
    def play_round(self):
        while len(self.players) > 1:
            self.deck.shuffle()
            self.reset_round()
            self.collect_blinds()
            self.deal_hole_cards()
            self.play_betting_round()
            if len(self.players) > 1:
                self.deal_community_cards()
                self.play_betting_round()
                self.deal_community_cards()
                self.play_betting_round()
                self.deal_community_cards()
                self.play_betting_round()
                if len(self.players) > 1:
                    self.determine_winner()
                elif len(self.players) == 1:
                    self.players[0].chips += pot
    def reset_round(self):
        self.community_cards = []
        self.current_bet = 0
        self.pot = 0
        for player in self.players:
            player.reset()
    def collect_blinds(self):
        for player in self.players:
            if player.blind == self.small_blind:
                self.pot += player.blind_bet(self.small_blind)
            elif player.blind == self.big_blind:
                self.pot += player.blind_bet(self.big_blind)
    def deal_hole_cards(self):
        for player in self.players:
            player.receive_cards(self.deck.draw(2))
    def play_betting_round(self):
        for player in self.players:
            if len(self.community_cards) != 0:
                player.previous_bet = 0
                player.blind = 0
                self.current_bet = 0
            else:
                self.current_bet = 10
        if len(self.community_cards) != 0:
            print (f"Community cards: {self.community_cards}")
        print (f"Pot: {self.pot}")
        current_player_index = self.get_next_player_index(0)
        last_raiser_index = None
        while True:
            current_player = self.players[current_player_index]
            if current_player.is_active():
                action = current_player.make_decision(self.current_bet)
                if action == "fold":
                    current_player.fold()
                elif action == "check":
                    if last_raiser_index is not None:
                        if (self.current_bet > current_player.previous_bet):
                            print(f"{current_player.name} attempted to check. Forcing fold...")
                            current_player.fold()                     else:
                        current_player.check()
                elif action == "call":
                    if last_raiser_index is not None:                         if (amount >= current_player.chips):                             self.pot += current_player.all_in()
                        else:                             prev_bet = current_player.call(self.current_bet - current_player.previous_bet - current_player.blind)
                            self.pot += prev_bet                           
                            current_player.previous_bet += prev_bet + current_player.blind
                            current_player.blind = 0
                    else:                         self.pot += current_player.call(self.big_blind - current_player.blind)
                        self.previous_bet = 10
                        current_player.previous_bet = 10
                        current_player.blind = 0
                elif action == "raise":             
                    amount = current_player.get_raise_amount(self.current_bet)                   
                    new_amount = amount + self.current_bet*2 - current_player.blind - current_player.previous_bet
                    self.current_bet = new_amount + current_player.blind + current_player.previous_bet
                    current_player.blind = 0                    
                    self.pot += current_player.raise_bet(new_amount)                   
                    print(f"Current top bet is: {self.current_bet}")
                    last_raiser_index = current_player_index
                    current_player.previous_bet = self.current_bet
            current_player_index = self.get_next_player_index(current_player_index)
            if current_player_index == last_raiser_index:
                break
    def deal_community_cards(self):
        if len(self.players[0].community_cards) == 0:
            self.community_cards.extend(self.deck.draw(3))
        elif len(self.players[0].community_cards) == 3:
            self.community_cards.extend(self.deck.draw(1))
        elif len(self.players[0].community_cards) == 4:
            self.community_cards.extend(self.deck.draw(1))
        for player in self.players:
            player.receive_community_cards(self.community_cards)
    def determine_winner(self):
        best_hand_value = 0
        winners = []
        for player in self.players:
            if player.is_active():
                hand_value = self.calculate_hand_value(player)
                if hand_value > best_hand_value:
                    best_hand_value = hand_value
                    winners = [player]
                elif hand_value == best_hand_value:
                    winners.append(player)
        if len(winners) == 1:
            winning_player = winners[0]
            print(f"{winning_player.name} wins with {self.get_hand_name(best_hand_value)}!")
            winning_player.chips += self.pot
        else:
            print("It's a tie!")
    def calculate_hand_value(self, player):
        hand_type = self.determine_hand_type(player.hand)
        card_values = [self.get_card_value(card) for card in player.hand]
        hand_value = hand_type
        for card_value in card_values:
            hand_value = (hand_value << 4) + card_value
        print(f"{player.name} with cards: {player.hand} has hand value: {hand_value}")
        return hand_value
    def determine_hand_type(self, hand):
        sorted_hand = sorted(hand, key=lambda card: self.get_card_value(card), reverse=True)
        if self.is_royal_flush(sorted_hand):
            return 9          if self.is_straight_flush(sorted_hand):
            return 8          if self.is_four_of_a_kind(sorted_hand):
            return 7          if self.is_full_house(sorted_hand):
            return 6          if self.is_flush(sorted_hand):
            return 5          if self.is_straight(sorted_hand):
            return 4          if self.is_three_of_a_kind(sorted_hand):
            return 3          if self.is_two_pair(sorted_hand):
            return 2          if self.is_pair(sorted_hand):
            return 1          return 0      def get_card_value(self, card):
        rank_to_value = {
            "2": 0, "3": 1, "4": 2, "5": 3, "6": 4, "7": 5, "8": 6,
            "9": 7, "10": 8, "J": 9, "Q": 10, "K": 11, "A": 12
        }
        rank = card.split()[0]          return rank_to_value.get(rank, 0)      def get_hand_name(self, hand_type):
        hand_names = {
            9: "Royal flush", 8: "Straight flush", 7: "Four of a kind",
            6: "Full house", 5: "Flush", 4: "Straight",
            3: "Three of a kind", 2: "Two pair", 1: "Pair", 0: "High card"
        }
        return hand_names.get(hand_type, "Unknown")
    def is_royal_flush(self, hand):
        return self.is_straight_flush(hand) and self.get_card_value(hand[0]) == 12
    def is_straight_flush(self, hand):
        return self.is_straight(hand) and self.is_flush(hand)
    def is_four_of_a_kind(self, hand):
        return self.has_n_of_a_kind(hand, 4)
    def is_full_house(self, hand):
        return self.has_n_of_a_kind(hand, 3) and self.has_n_of_a_kind(hand, 2)
    def is_flush(self, hand):
        suits = [card.split()[-1] for card in hand]
        return all(suit == suits[0] for suit in suits)
    def is_straight(self, hand):
        values = [self.get_card_value(card) for card in hand]
        values.sort()
        return all(values[i] == values[i - 1] + 1 for i in range(1, len(values)))
    def is_three_of_a_kind(self, hand):
        return self.has_n_of_a_kind(hand, 3)
    def is_two_pair(self, hand):
        ranks = [self.get_card_value(card) for card in hand]
        rank_counts = {rank: ranks.count(rank) for rank in set(ranks)}
        return list(rank_counts.values()).count(2) == 2
    def is_pair(self, hand):
        return self.has_n_of_a_kind(hand, 2)
    def has_n_of_a_kind(self, hand, n):
        ranks = [self.get_card_value(card) for card in hand]
        rank_counts = {rank: ranks.count(rank) for rank in set(ranks)}
        return n in rank_counts.values()
    def get_next_player_index(self, current_index):
        next_index = current_index + 1
        if next_index >= len(self.players):
            next_index = 0
        return next_index


/home/brandon/Projects/ChatDev/WareHouse/Poker1_DefaultOrganization_20231006035628/player.py

'''
Player module that defines the HumanPlayer and AIPlayer classes.
'''
import sys
import random
class Player:
    def __init__(self, name, chips):
        self.name = name
        self.chips = chips
        self.hand = []
        self.community_cards = []
        self.active = True
        self.blind = 0
        self.previous_bet = 0
        self.is_in_showdown = True
    def receive_cards(self, cards):
        self.hand.extend(cards)
    def receive_community_cards(self, cards):
        self.community_cards = cards
    def is_active(self):
        return self.active
    def all_in(self):
        tmp = self.chips
        self.chips = 0
        self.active = False
        print(f"{self.name} is All In for {tmp}")
        return tmp
    def fold(self):
        print(f"{self.name} folded.")
        self.active = False
        self.is_in_showdown = False
    def check(self):
        prompt = f"{self.name} checked."
        print(prompt)
        return 0
    def call(self, amount):
        self.chips -= amount
        prompt = f"{self.name} called {amount}. Remaining chips: {self.chips}"
        print(prompt)
        return amount
    def raise_bet(self, amount):
        self.chips -= amount
        prompt = f"{self.name} raised an additonal {amount}. Remaining chips: {self.chips}"
        print(prompt)
        return amount
    def blind_bet(self, amount):
        self.chips -= amount
        prompt = f"{self.name} posted blind of {amount}. Remaining chips: {self.chips}"
        print(prompt)
        return amount
    def reset(self):
        self.hand = []
        self.community_cards = []
        self.active = True
        self.is_in_showdown = True
class HumanPlayer(Player):
    def make_decision(self, current_bet):
        cards = ", ".join(self.hand)
        prompt = f"Your cards: {cards}"
        print(prompt)
        prompt = f"Community cards: {self.community_cards}"
        print(prompt)
        decision = input("Enter your decision (fold/check/bet/call/raise): ")
        if decision == "fold" or decision == "check":
            return decision
        elif decision == "q":
            print("Quitting...")
            sys.exit()         elif decision == "call":
            return decision
        elif decision == "raise":
            return decision
        else:
            print("Invalid decision. Please enter a valid decision.")
            return self.make_decision(current_bet)
    def get_raise_amount(self, current_bet):
        try:
                amount = int(input(f"Enter the raise amount: {current_bet*2} + "))
                return amount
        except ValueError:
            print("Invalid input.")
            return self.get_raise_amount(current_bet)
class AIPlayer(Player):
    def make_decision(self, current_bet):
        if random.random() < 0.05:              return random.choice(["fold", "check", "bet", "call", "raise"])
        else:
            if current_bet > self.chips:
                return random.choice(["call, fold"])
            elif current_bet == 0:
                return random.choice(["check", "raise"])
            elif current_bet > self.previous_bet:
                return random.choice(["fold", "call", "raise"])
            else:
                return random.choice(["check", "call", "raise"])
    def get_raise_amount(self, current_bet):
        therand = random.randint(0, 100)
        print(f"Raise increment: {therand}")
        return therand


/home/brandon/Projects/ChatDev/WareHouse/Poker1_DefaultOrganization_20231006035628/deck.py

'''
Deck module that defines the Deck class.
'''
import random
class Deck:
    def __init__(self):
        self.cards = self.create_deck()
    def create_deck(self):
        suits = ["Spades", "Hearts", "Diamonds", "Clubs"]
        ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append(rank + " of " + suit)
        return deck
    def shuffle(self):
        random.shuffle(self.cards)
    def draw(self, num_cards):
        cards = []
        for _ in range(num_cards):
            cards.append(self.cards.pop())
        return cards

/home/brandon/Projects/ChatDev/WareHouse/MBBusinessCardGen_jc_  ModelBest1024_20231024154846/main.py

'''
This is the main file that runs the business card generator program.
'''
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageDraw, ImageFont
class BusinessCardGenerator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Business Card Generator")
        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.root)
        self.name_entry.pack()
        self.title_label = tk.Label(self.root, text="Title:")
        self.title_label.pack()
        self.title_entry = tk.Entry(self.root)
        self.title_entry.pack()
        self.email_label = tk.Label(self.root, text="Email:")
        self.email_label.pack()
        self.email_entry = tk.Entry(self.root)
        self.email_entry.pack()
        self.generate_button = tk.Button(self.root, text="Generate", command=self.generate_business_card)
        self.generate_button.pack()
        self.root.mainloop()
    def generate_business_card(self):
        name = self.name_entry.get()
        title = self.title_entry.get()
        email = self.email_entry.get()
        image = Image.new("RGB", (500, 300), (53, 154, 256))
        draw = ImageDraw.Draw(image)
        company_name = "ModelBest"
        company_name_font = ImageFont.truetype("/Library/Fonts/Arial Unicode.ttf", 24)
        company_name_width, company_name_height = draw.textsize(company_name, font=company_name_font)
        draw.text((400 - company_name_width, 20), company_name, font=company_name_font, fill="black")
        name_font = ImageFont.truetype("/Library/Fonts/Arial Unicode.ttf", 18)
        name_width, name_height = draw.textsize(name, font=name_font)
        draw.text((20, 100), name, font=name_font, fill="black")
        title_font = ImageFont.truetype("/Library/Fonts/Arial Unicode.ttf", 14)
        title_width, title_height = draw.textsize(title, font=title_font)
        draw.text((20, 140), title, font=title_font, fill="black")
        email_font = ImageFont.truetype("/Library/Fonts/Arial Unicode.ttf", 14)
        email_width, email_height = draw.textsize(email, font=email_font)
        draw.text((20, 180), email, font=email_font, fill="black")
        slogan = "AGI For Lives"
        slogan_font = ImageFont.truetype("/Library/Fonts/Arial Unicode.ttf", 12)
        slogan_width, slogan_height = draw.textsize(slogan, font=slogan_font)
        draw.text((400 - slogan_width, 280 - slogan_height), slogan, font=slogan_font, fill="black")
        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG Image", "*.png"), ("JPEG Image", "*.jpg")])
        if file_path:
            image.save(file_path)
            print("Business card saved successfully!")
        else:
            print("Business card not saved.")
if __name__ == "__main__":
    BusinessCardGenerator()

/home/brandon/Projects/ChatDev/WareHouse/RGB_Color_Picker_DefaultOrganization_20231015003723/gui.py

'''
This file contains the ColorPickerGUI class which represents the graphical user interface of the RGB color picker application.
It uses the tkinter library to create the GUI.
'''
import tkinter as tk
from tkinter import ttk
from tkinter.colorchooser import askcolor
class ColorPickerGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("RGB Color Picker")
        self.red_slider = ttk.Scale(self.root, from_=0, to=255, orient=tk.HORIZONTAL)
        self.green_slider = ttk.Scale(self.root, from_=0, to=255, orient=tk.HORIZONTAL)
        self.blue_slider = ttk.Scale(self.root, from_=0, to=255, orient=tk.HORIZONTAL)
        self.color_label = tk.Label(self.root, width=20, height=5, relief=tk.RAISED)
        self.hex_label = tk.Label(self.root, width=20, height=2, relief=tk.SUNKEN)
        self.pick_color_button = ttk.Button(self.root, text="Pick Color", command=self.pick_color)
        self.red_slider.pack()
        self.green_slider.pack()
        self.blue_slider.pack()
        self.color_label.pack()
        self.hex_label.pack()
        self.pick_color_button.pack()
    def start(self):
        self.root.mainloop()
    def pick_color(self):
        color = askcolor()
        if color[1] is not None:
            self.red_slider.set(int(color[0][0]))
            self.green_slider.set(int(color[0][1]))
            self.blue_slider.set(int(color[0][2]))
            self.update_color_label()
    def update_color_label(self):
        red = int(self.red_slider.get())
        green = int(self.green_slider.get())
        blue = int(self.blue_slider.get())
        self.color_label.configure(bg=f"#{red:02x}{green:02x}{blue:02x}")
        self.hex_label.configure(text=f"#{red:02x}{green:02x}{blue:02x}")

/home/brandon/Projects/ChatDev/WareHouse/RGB_Color_Picker_DefaultOrganization_20231015003723/main.py

'''
This is the main file of the RGB color picker application.
It imports the ColorPickerGUI class from the gui.py file and initializes the GUI.
'''
from gui import ColorPickerGUI
if __name__ == "__main__":
    color_picker = ColorPickerGUI()
    color_picker.start()

/home/brandon/Projects/ChatDev/WareHouse/Tetris_zhuoyundu_20240115181403/tetris_game.py

import tkinter as tk
class TetrisGame(tk.Canvas):
    def __init__(self, master):
        super().__init__(master, width=300, height=600, bg="black")
        self.board = [[0] * 10 for _ in range(20)]
        self.current_shape = None
        self.score = 0
        self.delay = 500
        self.is_game_over = False
        self.bind_all("<Key>", self.handle_keypress)
        self.after(self.delay, self.update)
    def update(self):
        if not self.is_game_over:
            self.move_shape("down")
            self.after(self.delay, self.update)
    def move_shape(self, direction):
        pass      def rotate_shape(self):
        pass      def handle_keypress(self, event):
        pass      def draw_board(self):
        pass      def draw_shape(self):
        pass      def check_collision(self):
        pass      def clear_rows(self):
        pass      def game_over(self):
        pass      def draw_score(self):
        pass  

/home/brandon/Projects/ChatDev/WareHouse/Tetris_zhuoyundu_20240115181403/main.py

import tkinter as tk
import random
from tetris_shapes import ShapeI, ShapeJ, ShapeL, ShapeO, ShapeS, ShapeT, ShapeZ
class Tetris:
    def __init__(self, root):
        self.root = root
        self.canvas = tk.Canvas(self.root, width=300, height=600, bg="white")
        self.canvas.pack()
        self.board = Board()
        self.current_shape = None
        self.is_game_over = False
        self.root.bind("<KeyPress>", self.handle_keypress)
        self.root.after(1000, self.update)
    def start_game(self):
        self.current_shape = self.generate_shape()
        self.draw()
    def update(self):
        if not self.is_game_over:
            self.move_shape_down()
            self.draw()
            self.root.after(1000, self.update)
    def draw(self):
        self.canvas.delete("all")
        self.draw_board()
        if self.current_shape:
            self.draw_shape(self.current_shape)
    def draw_board(self):
        for row in range(len(self.board.grid)):
            for col in range(len(self.board.grid[row])):
                if self.board.grid[row][col] == 1:
                    x1 = col * 30
                    y1 = row * 30
                    x2 = x1 + 30
                    y2 = y1 + 30
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="blue")
    def draw_shape(self, shape):
        for coord in shape.get_coordinates():
            x1 = coord[0] * 30
            y1 = coord[1] * 30
            x2 = x1 + 30
            y2 = y1 + 30
            self.canvas.create_rectangle(x1, y1, x2, y2, fill="red")
    def handle_keypress(self, event):
        if event.keysym == "Left":
            self.move_shape_left()
        elif event.keysym == "Right":
            self.move_shape_right()
        elif event.keysym == "Down":
            self.move_shape_down()
        elif event.keysym == "Up":
            self.rotate_shape()
    def move_shape_left(self):
        if self.current_shape:
            self.current_shape.move_left()
            if not self.board.is_valid_move(self.current_shape):
                self.current_shape.move_right()
    def move_shape_right(self):
        if self.current_shape:
            self.current_shape.move_right()
            if not self.board.is_valid_move(self.current_shape):
                self.current_shape.move_left()
    def move_shape_down(self):
        if self.current_shape:
            self.current_shape.move_down()
            if not self.board.is_valid_move(self.current_shape):
                self.current_shape.move_up()
                self.board.place_shape(self.current_shape)
                self.clear_lines()
                self.current_shape = self.generate_shape()
                if not self.board.is_valid_move(self.current_shape):
                    self.is_game_over = True
    def rotate_shape(self):
        if self.current_shape:
            self.current_shape.rotate()
            if not self.board.is_valid_move(self.current_shape):
                self.current_shape.rotate_back()
    def clear_lines(self):
        lines_to_clear = []
        for row in range(len(self.board.grid)):
            if all(self.board.grid[row]):
                lines_to_clear.append(row)
        for line in lines_to_clear:
            del self.board.grid[line]
            self.board.grid.insert(0, [0] * self.board.cols)
    def generate_shape(self):
        shapes = [ShapeI, ShapeJ, ShapeL, ShapeO, ShapeS, ShapeT, ShapeZ]
        shape = random.choice(shapes)
        return shape()
class Board:
    def __init__(self):
        self.rows = 20
        self.cols = 10
        self.grid = [[0] * self.cols for _ in range(self.rows)]
    def is_valid_move(self, shape):
        for coord in shape.get_coordinates():
            row = coord[1]
            col = coord[0]
            if row < 0 or row >= self.rows or col < 0 or col >= self.cols or self.grid[row][col] == 1:
                return False
        return True
    def place_shape(self, shape):
        for coord in shape.get_coordinates():
            row = coord[1]
            col = coord[0]
            self.grid[row][col] = 1
    def is_game_over(self):
        return any(self.grid[0])
if __name__ == "__main__":
    root = tk.Tk()
    tetris = Tetris(root)
    tetris.start_game()
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/Tetris_zhuoyundu_20240115181403/tetris_shapes.py

'''
This file contains the Shape classes which represent the Tetris pieces.
'''
import random
class Shape:
    def __init__(self):
        self.rotation = 0
    def rotate(self):
        self.rotation = (self.rotation + 1) % 4
    def rotate_back(self):
        self.rotation = (self.rotation - 1) % 4
    def move_left(self):
        self.x -= 1
    def move_right(self):
        self.x += 1
    def move_down(self):
        self.y += 1
    def move_up(self):
        self.y -= 1
    def get_coordinates(self):
        pass
    def get_bounding_box(self):
        pass
class ShapeI(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0 or self.rotation == 2:
            return [(self.x, self.y), (self.x, self.y + 1), (self.x, self.y + 2), (self.x, self.y + 3)]
        else:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 2, self.y), (self.x + 3, self.y)]
    def get_bounding_box(self):
        if self.rotation == 0 or self.rotation == 2:
            return (self.x, self.y, self.x, self.y + 3)
        else:
            return (self.x, self.y, self.x + 3, self.y)
class ShapeJ(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0:
            return [(self.x, self.y), (self.x, self.y + 1), (self.x, self.y + 2), (self.x + 1, self.y + 2)]
        elif self.rotation == 1:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 2, self.y), (self.x, self.y + 1)]
        elif self.rotation == 2:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 1, self.y + 1), (self.x + 1, self.y + 2)]
        else:
            return [(self.x, self.y + 1), (self.x + 1, self.y + 1), (self.x + 2, self.y + 1), (self.x + 2, self.y)]
    def get_bounding_box(self):
        if self.rotation == 0:
            return (self.x, self.y, self.x + 1, self.y + 2)
        elif self.rotation == 1:
            return (self.x, self.y, self.x + 2, self.y + 1)
        elif self.rotation == 2:
            return (self.x, self.y, self.x + 1, self.y + 2)
        else:
            return (self.x, self.y + 1, self.x + 2, self.y)
class ShapeL(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0:
            return [(self.x, self.y + 2), (self.x + 1, self.y + 2), (self.x + 2, self.y + 2), (self.x + 2, self.y + 1)]
        elif self.rotation == 1:
            return [(self.x, self.y), (self.x, self.y + 1), (self.x + 1, self.y), (self.x + 2, self.y)]
        elif self.rotation == 2:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x, self.y + 1), (self.x, self.y + 2)]
        else:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 2, self.y), (self.x + 2, self.y + 1)]
    def get_bounding_box(self):
        if self.rotation == 0:
            return (self.x, self.y + 1, self.x + 2, self.y + 2)
        elif self.rotation == 1:
            return (self.x, self.y, self.x + 2, self.y + 1)
        elif self.rotation == 2:
            return (self.x, self.y, self.x + 1, self.y + 2)
        else:
            return (self.x, self.y, self.x + 2, self.y + 1)
class ShapeO(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        return [(self.x, self.y), (self.x + 1, self.y), (self.x, self.y + 1), (self.x + 1, self.y + 1)]
    def get_bounding_box(self):
        return (self.x, self.y, self.x + 1, self.y + 1)
class ShapeS(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0 or self.rotation == 2:
            return [(self.x + 1, self.y), (self.x + 2, self.y), (self.x, self.y + 1), (self.x + 1, self.y + 1)]
        else:
            return [(self.x, self.y), (self.x, self.y + 1), (self.x + 1, self.y + 1), (self.x + 1, self.y + 2)]
    def get_bounding_box(self):
        if self.rotation == 0 or self.rotation == 2:
            return (self.x, self.y, self.x + 2, self.y + 1)
        else:
            return (self.x, self.y, self.x + 1, self.y + 2)
class ShapeT(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 2, self.y), (self.x + 1, self.y + 1)]
        elif self.rotation == 1:
            return [(self.x + 1, self.y), (self.x, self.y + 1), (self.x + 1, self.y + 1), (self.x + 1, self.y + 2)]
        elif self.rotation == 2:
            return [(self.x, self.y + 1), (self.x + 1, self.y), (self.x + 1, self.y + 1), (self.x + 2, self.y + 1)]
        else:
            return [(self.x, self.y), (self.x, self.y + 1), (self.x, self.y + 2), (self.x + 1, self.y + 1)]
    def get_bounding_box(self):
        if self.rotation == 0:
            return (self.x, self.y, self.x + 2, self.y)
        elif self.rotation == 1:
            return (self.x, self.y, self.x + 1, self.y + 2)
        elif self.rotation == 2:
            return (self.x, self.y + 1, self.x + 2, self.y + 1)
        else:
            return (self.x, self.y, self.x + 1, self.y + 2)
class ShapeZ(Shape):
    def __init__(self):
        super().__init__()
        self.x = 3
        self.y = 0
    def get_coordinates(self):
        if self.rotation == 0 or self.rotation == 2:
            return [(self.x, self.y), (self.x + 1, self.y), (self.x + 1, self.y + 1), (self.x + 2, self.y + 1)]
        else:
            return [(self.x + 1, self.y), (self.x, self.y + 1), (self.x + 1, self.y + 1), (self.x, self.y + 2)]
    def get_bounding_box(self):
        if self.rotation == 0 or self.rotation == 2:
            return (self.x, self.y, self.x + 2, self.y + 1)
        else:
            return (self.x, self.y, self.x + 1, self.y + 2)

/home/brandon/Projects/ChatDev/WareHouse/Tetris_zhuoyundu_20240115181403/tetris.py

import random
from tetris_shapes import ShapeI, ShapeJ, ShapeL, ShapeO, ShapeS, ShapeT, ShapeZ
class Tetris:
    def __init__(self, root):
        self.root = root
    def start_game(self):
    def update(self):
    def draw(self):
    def handle_keypress(self, event):
class Board:
    def __init__(self):
    def is_valid_move(self, shape):
    def place_shape(self, shape):
    def clear_lines(self):
    def is_game_over(self):
class Shape:
    def __init__(self):
    def rotate(self):
    def move_left(self):
    def move_right(self):
    def move_down(self):
    def move_to_bottom(self):
    def get_coordinates(self):
    def get_bounding_box(self):
class ShapeI(Shape):
class ShapeJ(Shape):
class ShapeL(Shape):
class ShapeO(Shape):
class ShapeS(Shape):
class ShapeT(Shape):
class ShapeZ(Shape):


/home/brandon/Projects/ChatDev/WareHouse/Notebook Application_DefaultOrganization_20230918090434/.py

from tkinter import filedialog
def save_file(self):
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write(self.text_area.get('1.0', 'end-1c'))

/home/brandon/Projects/ChatDev/WareHouse/Notebook Application_DefaultOrganization_20230918090434/main.py

'''
This is the main file of the Notebook Desktop application.
'''
from tkinter import Tk, Menu, Text, Scrollbar, messagebox, filedialog
class NotebookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Notebook App")
        self.text_area = Text(self.root, undo=True)
        self.text_area.pack(fill='both', expand=True)
        self.scrollbar = Scrollbar(self.text_area)
        self.scrollbar.pack(side='right', fill='y')
        self.text_area.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.text_area.yview)
        self.create_menu()
    def create_menu(self):
        menu_bar = Menu(self.root)
        file_menu = Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Open", command=self.open_file)
        file_menu.add_command(label="Save", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.exit_app)
        menu_bar.add_cascade(label="File", menu=file_menu)
        edit_menu = Menu(menu_bar, tearoff=0)
        edit_menu.add_command(label="Undo", command=self.text_area.edit_undo)
        edit_menu.add_command(label="Redo", command=self.text_area.edit_redo)
        edit_menu.add_separator()
        edit_menu.add_command(label="Cut", command=self.cut_text)
        edit_menu.add_command(label="Copy", command=self.copy_text)
        edit_menu.add_command(label="Paste", command=self.paste_text)
        menu_bar.add_cascade(label="Edit", menu=edit_menu)
        format_menu = Menu(menu_bar, tearoff=0)
        format_menu.add_command(label="Bold", command=self.bold_text)
        format_menu.add_command(label="Italic", command=self.italic_text)
        menu_bar.add_cascade(label="Format", menu=format_menu)
        self.root.config(menu=menu_bar)
    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        if file_path:
            with open(file_path, 'r') as file:
                self.text_area.delete('1.0', 'end')
                self.text_area.insert('1.0', file.read())
    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
        if file_path:
            with open(file_path, 'w') as file:
                file.write(self.text_area.get('1.0', 'end-1c'))
    def exit_app(self):
        if messagebox.askokcancel("Exit", "Are you sure you want to exit?"):
            self.root.destroy()
    def cut_text(self):
        self.text_area.event_generate("<<Cut>>")
    def copy_text(self):
        self.text_area.event_generate("<<Copy>>")
    def paste_text(self):
        self.text_area.event_generate("<<Paste>>")
    def bold_text(self):
        current_tags = self.text_area.tag_names("sel.first")
        if "bold" in current_tags:
            self.text_area.tag_remove("bold", "sel.first", "sel.last")
        else:
            self.text_area.tag_add("bold", "sel.first", "sel.last")
            self.text_area.tag_configure("bold", font=("TkDefaultFont", 12, "bold"))
    def italic_text(self):
        current_tags = self.text_area.tag_names("sel.first")
        if "italic" in current_tags:
            self.text_area.tag_remove("italic", "sel.first", "sel.last")
        else:
            self.text_area.tag_add("italic", "sel.first", "sel.last")
            self.text_area.tag_configure("italic", font=("TkDefaultFont", 12, "italic"))
if __name__ == "__main__":
    root = Tk()
    app = NotebookApp(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/TicTacToe_THUNLP_20230825093547/main.py

'''
This is the main file of the tic-tac-toe game. It handles the game flow, user input, and GUI.
'''
import tkinter as tk
from tkinter import messagebox
from game import Game
class TicTacToeGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic-Tac-Toe")
        self.game = Game()
        self.buttons = []
        self.create_board()
    def create_board(self):
        for i in range(3):
            row = []
            for j in range(3):
                button = tk.Button(self.master, text="", width=10, height=5,
                                   command=lambda i=i, j=j: self.button_click(i, j))
                button.grid(row=i, column=j)
                row.append(button)
            self.buttons.append(row)
    def button_click(self, row, col):
        if self.game.is_game_over():
            return
        if self.game.make_move(row, col):
            self.buttons[row][col].config(text=self.game.current_player)
            if self.game.is_game_over():
                self.show_winner()
    def show_winner(self):
        winner = self.game.get_winner()
        if winner:
            messagebox.showinfo("Game Over", f"Player {winner} wins!")
        else:
            messagebox.showinfo("Game Over", "It's a tie!")
if __name__ == "__main__":
    root = tk.Tk()
    gui = TicTacToeGUI(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/TicTacToe_THUNLP_20230825093547/game.py

'''
This file contains the Game class that represents the tic-tac-toe game logic.
'''
class Game:
    def __init__(self):
        self.board = [['' for _ in range(3)] for _ in range(3)]
        self.current_player = 'X'
    def make_move(self, row, col):
        if self.board[row][col] == '':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False
    def is_game_over(self):
        return self.is_winner('X') or self.is_winner('O') or self.is_board_full()
    def is_winner(self, player):
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] == player:
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] == player:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == player:
            return True
        return False
    def is_board_full(self):
        for row in self.board:
            if '' in row:
                return False
        return True
    def get_winner(self):
        if self.is_winner('X'):
            return 'X'
        if self.is_winner('O'):
            return 'O'
        return None

/home/brandon/Projects/ChatDev/WareHouse/MarbelGameV1_ModelBest1024_20231026183909/main.py

'''
This is the main file for the web-based pinball game.
'''
import tkinter as tk
from game import Game
def main():
    window = tk.Tk()
    window.title("Web-based Pinball Game")
    game = Game(window)
    game.start()
    window.mainloop()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/MarbelGameV1_ModelBest1024_20231026183909/game.py

'''
This file contains the Game class which manages the pinball game.
'''
import tkinter as tk
from player import Player
class Game:
    def __init__(self, window):
        self.window = window
        self.canvas = tk.Canvas(self.window, width=800, height=600)
        self.canvas.pack()
        self.player = Player(self.canvas)
    def start(self):
        self.canvas.bind("<Button-1>", self.player.move)
        self.canvas.focus_set()
        self.update()
    def update(self):
        self.player.update()
        self.window.after(10, self.update)


/home/brandon/Projects/ChatDev/WareHouse/MarbelGameV1_ModelBest1024_20231026183909/player.py

'''
This file contains the Player class which represents the player in the pinball game.
'''
class Player:
    def __init__(self, canvas):
        self.canvas = canvas
        self.score = 0
        self.level = 1
        self.ball = self.canvas.create_oval(395, 295, 405, 305, fill="red")
        self.player_shape = self.canvas.create_rectangle(50, 50, 100, 100, fill="blue")
        self.velocity_x = 1
        self.velocity_y = -1
    def update(self):
        self.canvas.move(self.ball, self.velocity_x, self.velocity_y)
        self.check_collision_with_player()
        self.check_collision_with_walls()
    def check_collision_with_walls(self):
        ball_coords = self.canvas.coords(self.ball)
        if ball_coords[0] <= 0 or ball_coords[2] >= 800:
            self.velocity_x *= -1
        if ball_coords[1] <= 0 or ball_coords[3] >= 600:
            self.velocity_y *= -1
    def check_collision_with_player(self):
        ball_coords = self.canvas.coords(self.ball)
        player_coords = self.canvas.coords(self.player_shape)
        if (player_coords[0] < ball_coords[2] and
            player_coords[2] > ball_coords[0] and
            player_coords[1] < ball_coords[3] and
            player_coords[3] > ball_coords[1]):
            self.score += 10      def move(self, event):
        mouse_x = event.x
        mouse_y = event.y
        player_x, player_y, _, _ = self.canvas.coords(self.player_shape)
        self.canvas.coords(self.player_shape, mouse_x - 25, mouse_y - 25, mouse_x + 25, mouse_y + 25)
        speed = 2
        dx = mouse_x - player_x
        dy = mouse_y - player_y
        length = (dx ** 2 + dy ** 2) ** 0.5
        if length > 0:
            dx /= length
            dy /= length
        self.x_speed = dx * speed
        self.y_speed = dy * speed


/home/brandon/Projects/ChatDev/WareHouse/ArtCanvas_THUNLP_20230825093558/main.py

'''
Virtual Painting Studio App
'''
import tkinter as tk
from tkinter import Canvas, Frame
class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Virtual Painting Studio")
        self.canvas = Canvas(self)
        self.canvas.pack()
        self.toolbar = Toolbar(self)
        self.toolbar.pack()
class Canvas(tk.Canvas):
    def __init__(self, master):
        super().__init__(master, width=800, height=600, bg="white")
        self.bind("<B1-Motion>", self.draw)
    def draw(self, event):
        x, y = event.x, event.y
        brush_size = self.master.toolbar.get_brush_size()
        brush_color = self.master.toolbar.get_brush_color()
        self.create_oval(x-brush_size, y-brush_size, x+brush_size, y+brush_size, fill=brush_color)
class Toolbar(Frame):
    def __init__(self, master):
        super().__init__(master)
        self.brush_size = tk.Scale(self, from_=1, to=10, orient=tk.HORIZONTAL, label="Brush Size")
        self.brush_size.set(5)
        self.brush_size.pack(side=tk.LEFT)
        self.brush_color = tk.StringVar()
        self.brush_color.set("black")
        self.color_menu = tk.OptionMenu(self, self.brush_color, "black", "red", "green", "blue")
        self.color_menu.pack(side=tk.LEFT)
    def get_brush_size(self):
        return self.brush_size.get()
    def get_brush_color(self):
        return self.brush_color.get()
if __name__ == "__main__":
    app = App()
    app.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/ToDo_THUNLP_20230825072331/main.py

'''
This is the main file of the todo list application.
It initializes the GUI and starts the application.
'''
from todo_app import TodoApp
def main():
    app = TodoApp()
    app.start()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/ToDo_THUNLP_20230825072331/todo_app.py

'''
This file contains the TodoApp class which represents the todo list application.
It handles the GUI and manages the tasks.
'''
from tkinter import Tk, Label, Entry, Button, Listbox, Scrollbar, StringVar, END, SINGLE
class TodoApp:
    def __init__(self):
        self.tasks = []
        self.root = Tk()
        self.root.title("Todo List App")
        self.task_var = StringVar()
        self.task_entry = Entry(self.root, textvariable=self.task_var)
        self.task_entry.pack()
        self.add_button = Button(self.root, text="Add Task", command=self.add_task)
        self.add_button.pack()
        self.task_listbox = Listbox(self.root, selectmode=SINGLE)
        self.task_listbox.pack()
        self.edit_button = Button(self.root, text="Edit Task", command=self.edit_task)
        self.edit_button.pack()
        self.delete_button = Button(self.root, text="Delete Task", command=self.delete_task)
        self.delete_button.pack()
        self.scrollbar = Scrollbar(self.root)
        self.scrollbar.pack(side="right", fill="y")
        self.task_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.task_listbox.yview)
    def start(self):
        self.root.mainloop()
    def add_task(self):
        task = self.task_var.get()
        if task:
            self.tasks.append(task)
            self.task_listbox.insert(END, task)
            self.task_var.set("")
    def edit_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            selected_task = self.task_listbox.get(selected_index)
            edited_task = self.task_var.get()
            if edited_task:
                self.tasks[selected_index[0]] = edited_task
                self.task_listbox.delete(selected_index)
                self.task_listbox.insert(selected_index, edited_task)
    def delete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            self.tasks.pop(selected_index[0])
            self.task_listbox.delete(selected_index)

/home/brandon/Projects/ChatDev/WareHouse/CatchGoldHTMLGame_THUNLP_202310181636/index.html

<!DOCTYPE html>
<html>
<head>
    <title>Coin Catcher Game</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="gameOverScreen">
        <h1>Game Over</h1>
        <p id="finalScore"></p>
        <button id="restartButton">Restart</button>
    </div>
    <script src="script.js"></script>
</body>
</html>

/home/brandon/Projects/ChatDev/WareHouse/CatchGoldHTMLGame_THUNLP_202310181636/style.css

#gameCanvas {
    border: 1px solid black;
}
#gameOverScreen {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    text-align: center;
    padding: 20px;
}
#gameOverScreen h1 {
    font-size: 24px;
    margin-bottom: 10px;
}
#gameOverScreen p {
    font-size: 18px;
    margin-bottom: 20px;
}
#gameOverScreen button {
    font-size: 18px;
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

/home/brandon/Projects/ChatDev/WareHouse/CatchGoldHTMLGame_THUNLP_202310181636/script.js

const CANVAS_WIDTH = 800;
const CANVAS_HEIGHT = 600;
const CONTAINER_WIDTH = 100;
const CONTAINER_HEIGHT = 20;
const COIN_RADIUS = 10;
const COIN_SPEED = 3;
const COIN_VALUES = [1, 10, 100];
const GAME_DURATION = 15; let canvas, ctx;
let containerX, containerY;
let coins = [];
let score = 0;
let gameStarted = false;
let gameTimer;
let gameOverScreen;
let finalScoreElement;
let restartButton;
let countdownElement;
let countdownTimer;
function init() {
    canvas = document.getElementById("gameCanvas");
    ctx = canvas.getContext("2d");
    canvas.width = CANVAS_WIDTH;
    canvas.height = CANVAS_HEIGHT;
    containerX = CANVAS_WIDTH / 2 - CONTAINER_WIDTH / 2;
    containerY = CANVAS_HEIGHT - CONTAINER_HEIGHT;
    gameOverScreen = document.getElementById("gameOverScreen");
    finalScoreElement = document.getElementById("finalScore");
    restartButton = document.getElementById("restartButton");
    countdownElement = document.createElement("div");
    countdownElement.id = "countdown";
    document.body.appendChild(countdownElement);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
    restartButton.addEventListener("click", restartGame);
    startGame();
}
function startGame() {
    gameStarted = true;
    score = 0;
    coins = [];
    countdownTimer = GAME_DURATION;
    gameTimer = setInterval(updateGame, 1000 / 60);     countdownElement.innerText = countdownTimer;
    setTimeout(endGame, GAME_DURATION * 1000);
}
function endGame() {
    gameStarted = false;
    clearInterval(gameTimer);
    canvas.style.display = "none";
    gameOverScreen.style.display = "block";
    finalScoreElement.innerText = "Final Score: " + score;
}
function restartGame() {
    canvas.style.display = "block";
    gameOverScreen.style.display = "none";
    init();
}
function updateGame() {
    clearCanvas();
    updateContainer();
    updateCoins();
    renderContainer();
    renderCoins();
    renderScore();
    updateCountdown();
}
function clearCanvas() {
    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
}
function updateContainer() {
    if (leftKeyPressed && containerX > 0) {
        containerX -= 5;
    }
    if (rightKeyPressed && containerX + CONTAINER_WIDTH < CANVAS_WIDTH) {
        containerX += 5;
    }
}
function updateCoins() {
    for (let i = coins.length - 1; i >= 0; i--) {
        const coin = coins[i];
        coin.y += COIN_SPEED;
        if (coin.y + COIN_RADIUS > containerY && coin.x > containerX && coin.x < containerX + CONTAINER_WIDTH) {
            coins.splice(i, 1);
            score += coin.value;
        }
        if (coin.y + COIN_RADIUS > CANVAS_HEIGHT) {
            coins.splice(i, 1);
        }
    }
    if (Math.random() < 0.02) {
        const coin = {
            x: Math.random() * (CANVAS_WIDTH - COIN_RADIUS * 2) + COIN_RADIUS,
            y: -COIN_RADIUS,
            value: COIN_VALUES[Math.floor(Math.random() * COIN_VALUES.length)]
        };
        coins.push(coin);
    }
}
function renderContainer() {
    ctx.fillStyle = "blue";
    ctx.fillRect(containerX, containerY, CONTAINER_WIDTH, CONTAINER_HEIGHT);
}
function renderCoins() {
    ctx.fillStyle = "gold";
    for (const coin of coins) {
        ctx.beginPath();
        ctx.arc(coin.x, coin.y, COIN_RADIUS, 0, 2 * Math.PI);
        ctx.fill();
    }
}
function renderScore() {
    ctx.fillStyle = "black";
    ctx.font = "20px Arial";
    ctx.fillText("Score: " + score, 10, 30);
}
function updateCountdown() {
    countdownTimer -= 1 / 60;
    if (countdownTimer <= 0) {
        countdownTimer = 0;
    }
    countdownElement.innerText = Math.ceil(countdownTimer);
}
let leftKeyPressed = false;
let rightKeyPressed = false;
function handleKeyDown(event) {
    if (event.key === "ArrowLeft") {
        leftKeyPressed = true;
    }
    if (event.key === "ArrowRight") {
        rightKeyPressed = true;
    }
}
function handleKeyUp(event) {
    if (event.key === "ArrowLeft") {
        leftKeyPressed = false;
    }
    if (event.key === "ArrowRight") {
        rightKeyPressed = false;
    }
}
window.onload = init;

/home/brandon/Projects/ChatDev/WareHouse/car_THUNLPDemo_2024/car.py

'''
Player car class implementation with improved visual representation and road boundary constraints
'''
import pygame
class PlayerCar:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 40
        self.height = 60
        self.speed = 5
        self.color = (255, 0, 0)      def handle_input(self, keys, screen_width):
        left_boundary = screen_width//3 + 20          right_boundary = 2*screen_width//3            if keys[pygame.K_LEFT] and self.x > left_boundary:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x < right_boundary - self.width:
            self.x += self.speed
        if keys[pygame.K_UP] and self.y > 0:
            self.y -= self.speed
        if keys[pygame.K_DOWN] and self.y < 600 - self.height:
            self.y += self.speed
    def update(self):
        pass
    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(screen, (0, 0, 0), (self.x + 5, self.y + 10, 10, 40))          pygame.draw.rect(screen, (0, 0, 0), (self.x + 25, self.y + 10, 10, 40))          pygame.draw.rect(screen, (200, 200, 200), (self.x + 5, self.y + 5, 30, 15))      def check_collision(self, other):
        return pygame.Rect(self.x, self.y, self.width, self.height).colliderect(
            pygame.Rect(other.x, other.y, other.width, other.height)
        )

/home/brandon/Projects/ChatDev/WareHouse/car_THUNLPDemo_2024/main.py

'''
Main game file that initializes the racing game and runs the game loop
'''
import pygame
import sys
from car import PlayerCar
from track import Track
from gameobjects import OpponentCar
class RacingGame:
    def __init__(self):
        pygame.init()
        self.width = 800
        self.height = 600
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("赛车游戏")
        self.clock = pygame.time.Clock()
        self.running = True
        self.game_over = False
        self.font = pygame.font.Font(None, 74)
        self.reset_game()
    def reset_game(self):
        road_center = (self.width//3 + (2*self.width//3 + 20)) // 2
        self.player = PlayerCar(road_center - 20, self.height - 100)
        self.track = Track(self.width, self.height)
        self.opponents = [OpponentCar(self.width) for _ in range(3)]
        self.score = 0
        self.game_over = False
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            if event.type == pygame.KEYDOWN and self.game_over:
                if event.key == pygame.K_SPACE:
                    self.reset_game()
        if not self.game_over:
            keys = pygame.key.get_pressed()
            self.player.handle_input(keys, self.width)
    def update(self):
        if not self.game_over:
            self.player.update()
            self.track.update()
            for opponent in self.opponents:
                opponent.update()
                if self.player.check_collision(opponent):
                    self.game_over = True
            self.score += 1
    def render(self):
        self.screen.fill((100, 100, 100))          self.track.draw(self.screen)
        self.player.draw(self.screen)
        for opponent in self.opponents:
            opponent.draw(self.screen)
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {self.score}', True, (255, 255, 255))
        self.screen.blit(score_text, (10, 10))
        if self.game_over:
            game_over_text = self.font.render('GAME OVER', True, (255, 0, 0))
            restart_text = pygame.font.Font(None, 36).render('Press SPACE to restart', True, (255, 255, 255))
            text_rect = game_over_text.get_rect(center=(self.width//2, self.height//2))
            restart_rect = restart_text.get_rect(center=(self.width//2, self.height//2 + 50))
            self.screen.blit(game_over_text, text_rect)
            self.screen.blit(restart_text, restart_rect)
        pygame.display.flip()
    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.render()
            self.clock.tick(60)
        pygame.quit()
        sys.exit()
if __name__ == "__main__":
    game = RacingGame()
    game.run()

/home/brandon/Projects/ChatDev/WareHouse/car_THUNLPDemo_2024/gameobjects.py

'''
Game objects implementation including opponent cars with improved visuals and road constraints
'''
import pygame
import random
class OpponentCar:
    def __init__(self, screen_width):
        self.width = 40
        self.height = 60
        self.screen_width = screen_width
        self.road_left = screen_width//3 + 20
        self.road_right = 2*screen_width//3
        self.reset_position()
        self.color = (0, 0, 255)          self.speed = random.randint(3, 7)
    def reset_position(self):
        self.x = random.randint(self.road_left, self.road_right - self.width)
        self.y = random.randint(-300, -100)
    def update(self):
        self.y += self.speed
        if self.y > 600:
            self.reset_position()
    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(screen, (0, 0, 0), (self.x + 5, self.y + 10, 10, 40))          pygame.draw.rect(screen, (0, 0, 0), (self.x + 25, self.y + 10, 10, 40))          pygame.draw.rect(screen, (200, 200, 200), (self.x + 5, self.y + 5, 30, 15))  

/home/brandon/Projects/ChatDev/WareHouse/car_THUNLPDemo_2024/track.py

'''
Track class for managing the racing environment with improved visuals and clear boundaries
'''
import pygame
class Track:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.line_spacing = 100
        self.line_height = 30
        self.line_speed = 5
        self.lines = []
        self.initialize_lines()
        self.road_left = self.width//3
        self.road_right = 2*self.width//3 + 20
    def initialize_lines(self):
        for y in range(0, self.height, self.line_spacing):
            self.lines.append(y)
    def update(self):
        self.lines = [(y + self.line_speed) % self.height for y in self.lines]
    def draw(self, screen):
        pygame.draw.rect(screen, (50, 50, 50), 
                        (self.road_left, 0, self.road_right - self.road_left, self.height))
        pygame.draw.rect(screen, (255, 255, 0), (self.road_left - 5, 0, 5, self.height))          pygame.draw.rect(screen, (255, 255, 0), (self.road_right, 0, 5, self.height))          for y in self.lines:
            pygame.draw.rect(screen, (255, 255, 255), 
                           (self.width//2 - 10, y, 20, self.line_height))

/home/brandon/Projects/ChatDev/WareHouse/DigitalClock_THUNLP_20230825093556/.py

from datetime import datetime
import tkinter as tk

/home/brandon/Projects/ChatDev/WareHouse/DigitalClock_THUNLP_20230825093556/main.py

'''
This is the main file for the digital clock application.
It initializes the GUI and starts the clock.
'''
import tkinter as tk
from datetime import datetime
class DigitalClockApp:
    def __init__(self, root):
        """
        Initializes the DigitalClockApp class.
        Args:
            root (tkinter.Tk): The root window of the application.
        """
        self.root = root
        self.root.title("Digital Clock")
        self.time_label = tk.Label(root, font=("Arial", 80), bg="black", fg="white")
        self.time_label.pack(padx=50, pady=50)
        self.update_clock()
    def update_clock(self):
        """
        Updates the clock label with the current time.
        This method is called every second to update the clock label with the current time.
        """
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_clock)
if __name__ == "__main__":
    root = tk.Tk()
    app = DigitalClockApp(root)
    root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/RunningGame_THUNLP_20231023211843/main.py

'''
This is the main file for the running game.
'''
import pygame
import random
pygame.init()
screen_width = 800
screen_height = 400
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Running Game")
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
gravity = 0.75
block_size = 30
block_x = 50
block_y = screen_height - block_size
block_y_speed = 0
obstacle_width = 50
obstacle_height = random.randint(100, 300)
obstacle_x = screen_width
obstacle_y = screen_height - obstacle_height
obstacle_speed = 5
score = 0
font = pygame.font.Font(None, 36)
def draw_block():
    pygame.draw.rect(screen, BLACK, (block_x, block_y, block_size, block_size))
def draw_obstacle():
    pygame.draw.rect(screen, BLACK, (obstacle_x, obstacle_y, obstacle_width, obstacle_height))
def update_score():
    score_text = font.render("Score: " + str(score), True, BLACK)
    screen.blit(score_text, (10, 10))
def check_collision():
    if block_y + block_size >= obstacle_y and block_y <= obstacle_y + obstacle_height:
        if block_x + block_size >= obstacle_x and block_x <= obstacle_x + obstacle_width:
            return True
    return False
running = True
game_over = False
clock = pygame.time.Clock()
while running:
    screen.fill(WHITE)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if game_over:
                    game_over = False
                    score = 0
                    block_y = screen_height - block_size
                    obstacle_height = random.randint(100, 300)
                    obstacle_y = screen_height - obstacle_height
                    obstacle_x = screen_width
                    block_y_speed = 0
    if not game_over:
        block_y_speed += gravity
        block_y += block_y_speed
        obstacle_x -= obstacle_speed
        if obstacle_x + obstacle_width < 0:
            obstacle_x = screen_width
            obstacle_height = random.randint(100, 300)
            obstacle_y = screen_height - obstacle_height
            score += 1
        if check_collision():
            game_over = True
        draw_block()
        draw_obstacle()
        update_score()
    else:
        game_over_text = font.render("Game Over", True, BLACK)
        screen.blit(game_over_text, (screen_width // 2 - 80, screen_height // 2 - 20))
    pygame.display.update()
    clock.tick(60)
pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/RunningGame_THUNLP_20231023211843/game.py

'''
This file handles the game logic and manages the game objects.
'''
import pygame
import random
from sprites import Block, Obstacle
pygame.init()
screen_width = 800
screen_height = 400
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Running Game")
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
gravity = 0.75
block_size = 30
block_x = 50
block_y = screen_height - block_size
obstacle_width = 50
obstacle_height = random.randint(100, 300)
obstacle_x = screen_width
obstacle_y = screen_height - obstacle_height
obstacle_speed = 5
score = 0
font = pygame.font.Font(None, 36)
block = pygame.sprite.GroupSingle(Block(block_x, block_y, block_size))
obstacles = pygame.sprite.GroupSingle(Obstacle(obstacle_x, obstacle_y, obstacle_width, obstacle_height))
def update_score():
    score_text = font.render("Score: " + str(score), True, BLACK)
    screen.blit(score_text, (10, 10))
running = True
game_over = False
clock = pygame.time.Clock()
while running:
    screen.fill(WHITE)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if game_over:
                    game_over = False
                    score = 0
                    block.sprite.rect.y = screen_height - block_size
                    obstacle_height = random.randint(100, 300)
                    obstacle_y = screen_height - obstacle_height
                    obstacle_x = screen_width
                    block.sprite.speed_y = 0
    if not game_over:
        block.update(gravity)
        obstacles.update(obstacle_speed)
        if obstacles.sprite.rect.x + obstacle_width < 0:
            obstacles.sprite.rect.x = screen_width
            obstacle_height = random.randint(100, 300)
            obstacles.sprite.rect.height = obstacle_height
            obstacles.sprite.rect.y = screen_height - obstacle_height
            score += 1
        if pygame.sprite.spritecollide(block.sprite, obstacles, False):
            game_over = True
        block.draw(screen)
        obstacles.draw(screen)
        update_score()
    else:
        game_over_text = font.render("Game Over", True, BLACK)
        screen.blit(game_over_text, (screen_width // 2 - 80, screen_height // 2 - 20))
    pygame.display.update()
    clock.tick(60)
pygame.quit()

/home/brandon/Projects/ChatDev/WareHouse/RunningGame_THUNLP_20231023211843/sprites.py

'''
This file defines the Block and Obstacle classes.
'''
import pygame
class Block(pygame.sprite.Sprite):
    def __init__(self, x, y, size):
        super().__init__()
        self.image = pygame.Surface((size, size))
        self.image.fill((0, 0, 0))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed_y = 0
    def update(self, gravity):
        self.speed_y += gravity
        self.rect.y += self.speed_y
class Obstacle(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill((0, 0, 0))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
    def update(self, speed):
        self.rect.x -= speed

/home/brandon/Projects/ChatDev/WareHouse/gomokugameArtExample_THUNLP_20230831122822/board.py

'''
This file handles the game logic for the Gomoku game.
'''
import pygame
class Board:
    def __init__(self, rows, cols, player_1_icon, player_2_icon, width, height):
        self.rows = rows
        self.cols = cols
        self.width = width
        self.height = height
        self.board = [[None for _ in range(cols)] for _ in range(rows)]
        self.current_player = 1
        self.player_1_icon =player_1_icon
        self.player_2_icon =player_2_icon
        self.game_state = 'ongoing'
        self.winner = None
    def place_stone(self, x, y):
        if self.game_state == 'ended':
            return
        row, col = self.get_board_position(x, y)
        if row >= 0 and row < self.rows and col >= 0 and col < self.cols:
            if self.board[row][col] is None:
                self.board[row][col] = self.current_player
                if self.check_win(row, col):
                    self.game_state = 'ended'
                    self.winner = self.current_player
                self.current_player = 1 if self.current_player == 2 else 2
    def get_board_position(self, x, y):
        row = y // (self.height // self.rows)
        col = x // (self.width // self.cols)
        return row, col
    def check_win(self, row, col):
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for dx, dy in directions:
            if self.count_stones(row, col, dx, dy) + self.count_stones(row, col, -dx, -dy) - 1 >= 5:
                return True
        return False
    def count_stones(self, row, col, dx, dy):
        count = 0
        while 0 <= row < self.rows and 0 <= col < self.cols and self.board[row][col] == self.current_player:
            count += 1
            row += dx
            col += dy
        return count
    def draw(self, window):
        for row in range(self.rows):
            for col in range(self.cols):
                if self.board[row][col] is not None:
                    icon = self.player_1_icon if self.board[row][col] == 1 else self.player_2_icon
                    window.blit(icon, (col * (self.width // self.cols), row * (self.height // self.rows)))

/home/brandon/Projects/ChatDev/WareHouse/gomokugameArtExample_THUNLP_20230831122822/main.py

'''
This is the main file for the Gomoku game. It handles the game loop and user interaction.
'''
import pygame
import board
import os
from pygame import image, font
pygame.init()
WIDTH, HEIGHT = 800, 800
BOARD_ROWS, BOARD_COLS = 15, 15
WINDOW = pygame.display.set_mode((WIDTH, HEIGHT))
bg_image = pygame.transform.scale(image.load('board_background.png'),(800,800))
player_1_icon = pygame.transform.scale(image.load('player_1_icon.png'),(50,50))
player_2_icon = pygame.transform.scale(image.load('player_2_icon.png'),(50,50))
game_board = board.Board(BOARD_ROWS, BOARD_COLS, player_1_icon, player_2_icon, WIDTH, HEIGHT)
font = font.Font(None, 36)
def main():
    clock = pygame.time.Clock()
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN and game_board.game_state == 'ongoing':
                x, y = pygame.mouse.get_pos()
                game_board.place_stone(x, y)
        WINDOW.blit(bg_image, (0, 0))
        game_board.draw(WINDOW)
        text = font.render(f"Player {game_board.current_player}'s turn", True, (255, 255, 255))
        WINDOW.blit(text, (20, 20))
        if game_board.game_state == 'ended':
            text = font.render(f"Player {game_board.winner} wins!", True, (255, 255, 255))
            WINDOW.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))
        pygame.display.update()
        clock.tick(60)
    pygame.quit()
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/WareHouse/musicplayer_THUNLP_20230824113404/main.py

'''
This is the main file for the Music Player application. It uses the tkinter library for the GUI, pygame for playing the music, and mutagen for handling the metadata of mp3 files. The changes include a directory selection dialog, metadata display on the GUI, improved error handling, and a method to unpause the music. Now, it also handles the case where the user selects a non-mp3 file. The bug related to the os module has been fixed by removing the os.setsid() line and using the selected directory directly when loading the mp3 files.
'''
import os
import pygame
from tkinter import *
from tkinter import filedialog
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, TIT2
class MusicPlayer:
    def __init__(self, root):
        self.root = root
        self.root.title("MusicPlayer")
        self.root.geometry("1000x200+200+200")
        pygame.init()
        pygame.mixer.init()
        self.track = StringVar()
        self.status = StringVar()
        self.metadata = StringVar()
        self.volume = DoubleVar()
        self.volume.set(pygame.mixer.music.get_volume())
        trackframe = LabelFrame(self.root, text="Song Track", font=("times new roman", 15, "bold"), bg="Navyblue",
                                fg="white", bd=5, relief=GROOVE)
        trackframe.place(x=0, y=0, width=600, height=100)
        songtrack = Label(trackframe, textvariable=self.track, width=20, font=("times new roman", 24, "bold"),
                          bg="Orange", fg="gold").grid(row=0, column=0, padx=10, pady=5)
        trackstatus = Label(trackframe, textvariable=self.status, font=("times new roman", 24, "bold"), bg="orange",
                            fg="gold").grid(row=0, column=1, padx=10, pady=5)
        metadata_label = Label(trackframe, textvariable=self.metadata, font=("times new roman", 16, "bold"),
                               bg="orange", fg="gold")
        metadata_label.grid(row=1, column=0, padx=10, pady=5)
        volumecontrol = Scale(trackframe, variable=self.volume, from_=0.0, to=1.0, orient=HORIZONTAL, resolution=0.1,
                              command=self.change_volume)
        volumecontrol.grid(row=0, column=2, padx=10, pady=5)
        buttonframe = LabelFrame(self.root, text="Control Panel", font=("times new roman", 15, "bold"), bg="grey",
                                 fg="white", bd=5, relief=GROOVE)
        buttonframe.place(x=0, y=100, width=600, height=100)
        playbtn = Button(buttonframe, text="PLAY", command=self.play_music, width=10, height=1,
                         font=("times new roman", 16, "bold"), fg="navyblue", bg="pink").grid(row=0, column=0,
                                                                                                padx=10, pady=5)
        pausebtn = Button(buttonframe, text="PAUSE", command=self.pause_music, width=8, height=1,
                          font=("times new roman", 16, "bold"), fg="navyblue", bg="pink").grid(row=0, column=1,
                                                                                               padx=10, pady=5)
        stopbtn = Button(buttonframe, text="STOP", command=self.stop_music, width=10, height=1,
                         font=("times new roman", 16, "bold"), fg="navyblue", bg="pink").grid(row=0, column=2,
                                                                                              padx=10, pady=5)
        unpausebtn = Button(buttonframe, text="UNPAUSE", command=self.unpause_music, width=10, height=1,
                            font=("times new roman", 16, "bold"), fg="navyblue", bg="pink").grid(row=0, column=3,
                                                                                                 padx=10, pady=5)
        songsframe = LabelFrame(self.root, text="Song Playlist", font=("times new roman", 15, "bold"), bg="grey",
                                fg="white", bd=5, relief=GROOVE)
        songsframe.place(x=600, y=0, width=400, height=200)
        scrol_y = Scrollbar(songsframe, orient=VERTICAL)
        self.playlist = Listbox(songsframe, yscrollcommand=scrol_y.set, selectbackground="gold", selectmode=SINGLE,
                                font=("times new roman", 12, "bold"), bg="silver", fg="navyblue", bd=5, relief=GROOVE)
        scrol_y.pack(side=RIGHT, fill=Y)
        scrol_y.config(command=self.playlist.yview)
        self.playlist.pack(fill=BOTH)
        self.select_directory()
    def select_directory(self):
        self.directory = filedialog.askdirectory()
        self.load_mp3_files()
    def load_mp3_files(self):
        songtracks = os.listdir(self.directory)
        self.playlist.delete(0, END)
        for track in songtracks:
            if track.endswith('.mp3'):
                self.playlist.insert(END, track)
    def play_music(self):
        try:
            selected_track = self.playlist.get(ACTIVE)
            if not selected_track.endswith('.mp3'):
                self.metadata.set("Error: Selected file is not an mp3 file.")
                return
            self.track.set(selected_track)
            self.status.set("-Playing")
            pygame.mixer.music.load(os.path.join(self.directory, selected_track))
            pygame.mixer.music.play()
            audio = MP3(os.path.join(self.directory, selected_track), ID3=ID3)
            self.metadata.set('Title: ' + audio["TIT2"].text[0] + ', Artist: ' + audio["TPE1"].text[0] + ', Duration: ' +
                              str(audio.info.length))
        except Exception as e:
            self.metadata.set("An error occurred: " + str(e))
    def stop_music(self):
        self.status.set("-Stopped")
        pygame.mixer.music.stop()
    def pause_music(self):
        self.status.set("-Paused")
        pygame.mixer.music.pause()
    def unpause_music(self):
        self.status.set("-Playing")
        pygame.mixer.music.unpause()
    def change_volume(self, v):
        pygame.mixer.music.set_volume(self.volume.get())
root = Tk()
MusicPlayer(root)
root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/no_hair_programmer_v2_DefaultOrganization_20231026192805/main.py

'''
This is the main file of the Programmer Life Reboot Simulator application.
'''
import tkinter as tk
from tkinter import messagebox
import random
class ProgrammerLifeSimulator:
    hair_loss_events = [
        "秃头", "地中海", "严重掉发", "隐约掉发", "发量普通", "乌黑浓密", "多毛症"
    ]
    def __init__(self):
        self.age = 18
        self.hair = "乌黑浓密"
        self.root = tk.Tk()
        self.root.title("Programmer Life Reboot Simulator")
        self.root.geometry("400x300")
        self.age_label = tk.Label(self.root, text="Age: 18")
        self.age_label.pack()
        self.hair_label = tk.Label(self.root, text="Hair: 乌黑浓密")
        self.hair_label.pack()
        self.go_on_button = tk.Button(self.root, text="Go On", command=self.go_on)
        self.go_on_button.pack()
    def go_on(self):
        n = random.randint(1, 10)
        self.age += n
        self.age_label.config(text=f"Age: {self.age}")
        hair_loss = random.choice(ProgrammerLifeSimulator.hair_loss_events)
        self.hair_label.config(text=f"Hair: {hair_loss}")
        if hair_loss == "秃头":
            self.root.destroy()
            messagebox.showinfo("Game Over", f"You lived until {self.age} years old. Congratulations on reaching the pinnacle of a programmer's life - 秃头!")
if __name__ == "__main__":
    simulator = ProgrammerLifeSimulator()
    simulator.root.mainloop()

/home/brandon/Projects/ChatDev/WareHouse/pvz_THUNLPDemo_2024/constants.py

import pygame
from enum import Enum
WINDOW_WIDTH = 1080
WINDOW_HEIGHT = 900
CELL_SIZE = 100
GRID_ROWS = 7
GRID_COLS = 9
TOP_MARGIN = 100
FPS = 60
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
DARK_GREEN = (0, 100, 0)
BROWN = (139, 69, 19)
YELLOW = (255, 255, 0)
LAWN_GREEN = (124, 252, 0)
GRAY = (128, 128, 128)
RED = (255, 0, 0)
class GameState(Enum):
    MENU = 1
    PLAYING = 2
    PAUSED = 3
    GAME_OVER = 4
class PlantType(Enum):
    SUNFLOWER = 1
    PEASHOOTER = 2
    ROSE_SHOOTER = 3
    CHOMPER = 4
    SNOW_PEA = 5
class ZombieType(Enum):
    NORMAL = 1
    CONE = 2
    BUCKET = 3
    NEWSPAPER = 4
    DANCING = 5
PLANT_STATS = {
    PlantType.SUNFLOWER: {"health": 100, "cost": 50, "color": YELLOW},
    PlantType.PEASHOOTER: {"health": 120, "cost": 100, "color": GREEN},
    PlantType.ROSE_SHOOTER: {"health": 140, "cost": 150, "color": (255, 192, 203)},
    PlantType.CHOMPER: {"health": 180, "cost": 175, "color": (148, 0, 211)},
    PlantType.SNOW_PEA: {"health": 130, "cost": 175, "color": (0, 191, 255)}
}
ZOMBIE_STATS = {
    ZombieType.NORMAL: {"health": 300, "speed": 0.4, "damage": 0.4},
    ZombieType.CONE: {"health": 450, "speed": 0.45, "damage": 0.3},
    ZombieType.BUCKET: {"health": 550, "speed": 0.35, "damage": 0.5},
    ZombieType.NEWSPAPER: {"health": 200, "speed": 0.6, "damage": 0.3},
    ZombieType.DANCING: {"health": 350, "speed": 0.5, "damage": 0.35}
} 

/home/brandon/Projects/ChatDev/WareHouse/pvz_THUNLPDemo_2024/entities.py

import pygame
import math
from constants import *
from sprites import PLANT_DRAWINGS, ZOMBIE_DRAWINGS
class Plant:
    def __init__(self, x, y, plant_type):
        self.x = x
        self.y = y
        self.type = plant_type
        stats = PLANT_STATS[plant_type]
        self.health = stats["health"]
        self.max_health = stats["health"]
        self.cost = stats["cost"]
        self.rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE + TOP_MARGIN, CELL_SIZE, CELL_SIZE)
        self.shoot_timer = 0
        self.shoot_cooldown = 150          self.eating_timer = 0
        self.eating_cooldown = 300          self.sun_timer = 0
        self.animation_state = "idle"
        self.damaged_state = 0
        self.is_freezing = plant_type == PlantType.SNOW_PEA
        self.can_eat = plant_type == PlantType.CHOMPER
        self.is_rose = plant_type == PlantType.ROSE_SHOOTER
    def update(self):
        if self.type in [PlantType.PEASHOOTER, PlantType.SNOW_PEA, PlantType.ROSE_SHOOTER]:
            self.shoot_timer += 1
        elif self.type == PlantType.SUNFLOWER:
            self.sun_timer += 1
        elif self.type == PlantType.CHOMPER and self.eating_timer > 0:
            self.eating_timer -= 1
        health_percentage = self.health / self.max_health
        if health_percentage <= 0.3:
            self.damaged_state = 2
        elif health_percentage <= 0.6:
            self.damaged_state = 1
    def can_shoot(self):
        if self.type == PlantType.PEASHOOTER:
            return self.shoot_timer >= 90
        elif self.type == PlantType.SNOW_PEA:
            return self.shoot_timer >= 90
        elif self.type == PlantType.ROSE_SHOOTER:
            return self.shoot_timer >= 100          return False
    def can_produce_sun(self):
        return self.type == PlantType.SUNFLOWER and self.sun_timer >= 360
    def can_eat_zombie(self):
        return self.type == PlantType.CHOMPER and self.eating_timer <= 0
    def start_eating(self):
        self.eating_timer = 300      def reset_timer(self):
        if self.type in [PlantType.PEASHOOTER, PlantType.SNOW_PEA, PlantType.ROSE_SHOOTER]:
            self.shoot_timer = 0
        elif self.type == PlantType.SUNFLOWER:
            self.sun_timer = 0
    def draw(self, screen):
        shadow_surface = pygame.Surface((CELL_SIZE, CELL_SIZE//4), pygame.SRCALPHA)
        pygame.draw.ellipse(shadow_surface, (0, 0, 0, 64), (0, 0, CELL_SIZE, CELL_SIZE//4))
        screen.blit(shadow_surface, (self.rect.x, self.rect.y + CELL_SIZE - CELL_SIZE//8))
        if self.type in PLANT_DRAWINGS:
            PLANT_DRAWINGS[self.type](screen, self.rect.x, self.rect.y, CELL_SIZE)
        if self.health < self.max_health:
            health_width = max(0, (self.rect.width * self.health) // self.max_health)
            health_rect = pygame.Rect(self.rect.x, self.rect.y - 5, health_width, 3)
            pygame.draw.rect(screen, (255, 0, 0), health_rect)
class Zombie:
    def __init__(self, row, zombie_type):
        self.x = WINDOW_WIDTH / CELL_SIZE
        self.y = row
        self.type = zombie_type
        stats = ZOMBIE_STATS[zombie_type]
        self.health = stats["health"]
        self.max_health = stats["health"]
        self.speed = stats["speed"]
        self.damage = stats["damage"]
        self.rect = pygame.Rect(
            self.x * CELL_SIZE, 
            self.y * CELL_SIZE + TOP_MARGIN, 
            CELL_SIZE, 
            CELL_SIZE
        )
        self.eating = False
        self.stun_timer = 0
        self.frozen_timer = 0
        self.frozen = False
        self.intoxicated_timer = 0
        self.intoxicated = False
        self.animation_state = "walking"
        if self.type == ZombieType.NEWSPAPER:
            self.has_newspaper = True
            self.enraged = False
        else:
            self.has_newspaper = False
            self.enraged = False
        if self.type == ZombieType.DANCING:
            self.summon_timer = 300
        else:
            self.summon_timer = 0
    def move(self):
        if not self.eating and self.stun_timer <= 0:
            actual_speed = self.speed
            if self.frozen:
                actual_speed *= 0.5
            if self.intoxicated:
                actual_speed *= 0.3
            if self.type == ZombieType.NEWSPAPER and self.enraged:
                actual_speed *= 1.5
            self.x -= actual_speed / FPS
            self.rect.x = self.x * CELL_SIZE
        if self.stun_timer > 0:
            self.stun_timer -= 1
        if self.frozen:
            self.frozen_timer -= 1
            if self.frozen_timer <= 0:
                self.frozen = False
        if self.intoxicated:
            self.intoxicated_timer -= 1
            if self.intoxicated_timer <= 0:
                self.intoxicated = False
    def intoxicate(self):
        self.intoxicated = True
        self.intoxicated_timer = 300
    def take_damage(self, damage):
        self.health -= damage
        if self.type == ZombieType.NEWSPAPER and self.has_newspaper and self.health <= self.max_health * 0.5:
            self.has_newspaper = False
            self.enraged = True
            self.speed *= 1.5
    def freeze(self):
        self.frozen = True
        self.frozen_timer = 300
    def draw(self, screen):
        shadow_surface = pygame.Surface((CELL_SIZE, CELL_SIZE//3), pygame.SRCALPHA)
        pygame.draw.ellipse(shadow_surface, (0, 0, 0, 64), (0, 0, CELL_SIZE, CELL_SIZE//3))
        screen.blit(shadow_surface, (self.rect.x, self.rect.y + CELL_SIZE - CELL_SIZE//6))
        if self.type in ZOMBIE_DRAWINGS:
            ZOMBIE_DRAWINGS[self.type](screen, self.rect.x, self.rect.y, CELL_SIZE)
        if self.frozen:
            ice_surface = pygame.Surface((CELL_SIZE, CELL_SIZE), pygame.SRCALPHA)
            ice_surface.fill((150, 217, 255, 128))
            screen.blit(ice_surface, self.rect)
        if self.intoxicated:
            love_surface = pygame.Surface((CELL_SIZE, CELL_SIZE), pygame.SRCALPHA)
            time = pygame.time.get_ticks()
            for i in range(3):
                heart_x = self.rect.x + CELL_SIZE//2 + math.cos(time * 0.003 + i * 2) * 15
                heart_y = self.rect.y + CELL_SIZE//3 + math.sin(time * 0.003 + i * 2) * 10
                pygame.draw.circle(screen, (255, 192, 203, 200), (int(heart_x - 5), int(heart_y)), 5)
                pygame.draw.circle(screen, (255, 192, 203, 200), (int(heart_x + 5), int(heart_y)), 5)
                pygame.draw.polygon(screen, (255, 192, 203, 200), [
                    (heart_x, heart_y + 8),
                    (heart_x - 10, heart_y),
                    (heart_x + 10, heart_y)
                ])
        health_width = max(0, (self.rect.width * self.health) // self.max_health)
        health_rect = pygame.Rect(self.rect.x, self.rect.y - 10, health_width, 5)
        pygame.draw.rect(screen, (255, 0, 0), health_rect)
class Projectile:
    def __init__(self, x, y, damage=20, speed=5, freezing=False, is_rose=False):
        self.x = (x + 0.5) * CELL_SIZE
        self.y = y * CELL_SIZE + TOP_MARGIN + CELL_SIZE // 2
        self.damage = damage
        self.speed = speed
        self.freezing = freezing
        self.is_rose = is_rose
        self.active = True
        self.size = 10          self.rect = pygame.Rect(self.x - self.size//2, self.y - self.size//2, self.size, self.size)
        self.trail_positions = []
        self.trail_lifetime = 15 if is_rose else 10
        self.glow_offset = 0
        self.rotation = 0
        self.color = (255, 192, 203) if is_rose else ((0, 191, 255) if freezing else (0, 255, 0))
        self.alpha = 255
    def move(self):
        self.trail_positions.append((self.rect.x, self.rect.y))
        if len(self.trail_positions) > self.trail_lifetime:
            self.trail_positions.pop(0)
        self.rect.x += self.speed
        self.rotation += 15          self.glow_offset = abs(math.sin(pygame.time.get_ticks() * 0.01)) * 2
        if self.rect.x > WINDOW_WIDTH:
            self.active = False
    def draw(self, screen):
        for i, (x, y) in enumerate(self.trail_positions):
            alpha = int(255 * (i / len(self.trail_positions)) * 0.5)
            size = int(4 * (i / len(self.trail_positions)))              trail_surface = pygame.Surface((12, 12), pygame.SRCALPHA)              if self.is_rose:
                petal_color = (255, 192, 203, alpha)                  for angle in range(0, 360, 72):
                    rad = math.radians(angle + self.rotation)
                    petal_x = 6 + math.cos(rad) * size                      petal_y = 6 + math.sin(rad) * size
                    pygame.draw.circle(trail_surface, petal_color, (int(petal_x), int(petal_y)), size)
            else:
                color = (0, 191, 255, alpha) if self.freezing else (0, 255, 0, alpha)
                pygame.draw.circle(trail_surface, color, (6, 6), size)
            screen.blit(trail_surface, (x - 6, y - 6))
        if self.is_rose:
            glow_surface = pygame.Surface((20, 20), pygame.SRCALPHA)
            glow_radius = 8 + self.glow_offset
            glow_color = (255, 192, 203, 64)              pygame.draw.circle(glow_surface, glow_color, (10, 10), glow_radius)
            screen.blit(glow_surface, (self.rect.x - 10, self.rect.y - 10))
            pygame.draw.circle(screen, (255, 192, 203), (self.rect.x, self.rect.y), 6)              pygame.draw.circle(screen, (255, 105, 180), (self.rect.x, self.rect.y), 4)              highlight_pos = (self.rect.x - 2, self.rect.y - 2)
            pygame.draw.circle(screen, (255, 255, 255, 180), highlight_pos, 2)
        else:
            glow_color = (0, 191, 255, 64) if self.freezing else (0, 255, 0, 64)
            main_color = (0, 191, 255) if self.freezing else (0, 200, 0)
            inner_color = (173, 216, 230) if self.freezing else (150, 255, 150)
            glow_surface = pygame.Surface((20, 20), pygame.SRCALPHA)
            glow_radius = 8 + self.glow_offset
            pygame.draw.circle(glow_surface, glow_color, (10, 10), glow_radius)
            screen.blit(glow_surface, (self.rect.x - 10, self.rect.y - 10))
            pygame.draw.circle(screen, main_color, (self.rect.x, self.rect.y), 6)
            pygame.draw.circle(screen, inner_color, (self.rect.x, self.rect.y), 4)
            highlight_pos = (self.rect.x - 2, self.rect.y - 2)
            pygame.draw.circle(screen, (255, 255, 255, 180), highlight_pos, 2)

/home/brandon/Projects/ChatDev/WareHouse/pvz_THUNLPDemo_2024/main.py

import pygame
import sys
import random
import math
from constants import *
from entities import Plant, Zombie, Projectile
from sprites import PLANT_DRAWINGS, ZOMBIE_DRAWINGS
class Sun:
    def __init__(self, x, y, from_sky=True):
        self.x = x
        self.y = y
        self.initial_x = x
        self.initial_y = y
        self.value = 25
        self.rect = pygame.Rect(x, y, 40, 40)
        self.collected = False
        self.from_sky = from_sky
        self.fall_speed = 1.5
        self.lifetime = 300 if from_sky else 450
        self.hover_offset = 0
        self.hover_speed = 0.03
        self.hover_range = 5
        self.fade_start = 60
        self.alpha = 0
        self.fade_in = 255
        self.glow_offset = 0
        self.size = 40
        self.collect_speed = 5
        self.collecting = False
    def move(self):
        if self.from_sky and self.y < self.initial_y + WINDOW_HEIGHT//3:
            self.y += self.fall_speed
            self.rect.y = self.y
        self.hover_offset = math.sin(pygame.time.get_ticks() * self.hover_speed) * self.hover_range
        self.rect.y = self.y + self.hover_offset
        self.glow_offset = abs(math.sin(pygame.time.get_ticks() * 0.002)) * 5
        if self.fade_in > 0:
            self.alpha = min(255, self.alpha + 10)
            self.fade_in -= 10
        self.lifetime -= 1
        if self.lifetime <= self.fade_start:
            self.alpha = max(0, int(255 * (self.lifetime / self.fade_start)))
    def draw(self, screen):
        sun_surface = pygame.Surface((50, 50), pygame.SRCALPHA)
        glow_radius = 25 + self.glow_offset
        pygame.draw.circle(sun_surface, (255, 255, 100, int(self.alpha * 0.3)), (25, 25), glow_radius)
        pygame.draw.circle(sun_surface, (255, 255, 0, self.alpha), (25, 25), 20)
        pygame.draw.circle(sun_surface, (255, 255, 200, self.alpha), (25, 25), 15)
        pygame.draw.circle(sun_surface, (255, 255, 255, int(self.alpha * 0.7)), (25, 25), 8)
        screen.blit(sun_surface, (self.rect.x - 5, self.rect.y - 5))
class Game:
    def __init__(self):
        pygame.init()
        pygame.mixer.init()
        self.screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        pygame.display.set_caption("植物大战僵尸 - ChatDev制作")
        self.clock = pygame.time.Clock()
        self.state = GameState.MENU
        self.base_width = WINDOW_WIDTH
        self.base_height = WINDOW_HEIGHT
        self.scale_x = 1.0
        self.scale_y = 1.0
        self.load_music()
        try:
            self.font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", 36)
            self.large_font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", 74)
            self.small_font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", 24)
        except:
            try:
                self.font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", 36)
                self.large_font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", 74)
                self.small_font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", 24)
            except:
                try:
                    self.font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", 36)
                    self.large_font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", 74)
                    self.small_font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", 24)
                except:
                    print("Warning: Could not load Chinese font, falling back to default font")
                    self.font = pygame.font.Font(None, 36)
                    self.large_font = pygame.font.Font(None, 74)
                    self.small_font = pygame.font.Font(None, 24)
        self.reset_game()
    def load_music(self):
        try:
            pygame.mixer.music.load("assets/music/bgm.mp3")
            pygame.mixer.music.set_volume(0.5)              pygame.mixer.music.play(-1)          except:
            print("Warning: Could not load background music")
    def reset_game(self):
        self.plants = []
        self.zombies = []
        self.projectiles = []
        self.suns = []
        self.particles = []
        self.sun_points = 2025
        self.selected_plant = None
        self.spawn_timer = 0
        self.sun_spawn_timer = 0
        self.wave_number = 1
        self.wave_timer = 600
        self.score = 0
        self.game_over = False
    def spawn_sun(self):
        if self.sun_spawn_timer <= 0:
            x = random.randint(100, WINDOW_WIDTH - 100)
            self.suns.append(Sun(x, -40))
            self.sun_spawn_timer = random.randint(300, 500)
        self.sun_spawn_timer -= 1
    def spawn_zombie(self):
        if self.spawn_timer <= 0:
            if len(self.zombies) < 5 + self.wave_number:
                zombies_to_spawn = max(2, 5 + self.wave_number - len(self.zombies))
                for _ in range(zombies_to_spawn):
                    row = random.randint(0, GRID_ROWS - 1)
                    zombie_types = [
                        ZombieType.NORMAL,
                        ZombieType.CONE,
                        ZombieType.BUCKET,
                        ZombieType.NEWSPAPER,
                        ZombieType.DANCING
                    ]
                    zombie_type = random.choice(zombie_types)
                    self.zombies.append(Zombie(row, zombie_type))
            else:
                row = random.randint(0, GRID_ROWS - 1)
                zombie_types = [
                    ZombieType.NORMAL,
                    ZombieType.CONE,
                    ZombieType.BUCKET,
                    ZombieType.NEWSPAPER,
                    ZombieType.DANCING
                ]
                zombie_type = random.choice(zombie_types)
                self.zombies.append(Zombie(row, zombie_type))
            base_timer = max(100, 300 - (self.wave_number * 40))              variation = random.randint(-30, 30)              self.spawn_timer = base_timer + variation
        self.spawn_timer -= 1
    def handle_resize(self, event):
        width, height = event.size
        self.screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
        self.scale_x = width / self.base_width
        self.scale_y = height / self.base_height
        scale = min(self.scale_x, self.scale_y)
        try:
            self.font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", int(36 * scale))
            self.large_font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", int(74 * scale))
            self.small_font = pygame.font.Font("/System/Library/Fonts/PingFang.ttc", int(24 * scale))
        except:
            try:
                self.font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", int(36 * scale))
                self.large_font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", int(74 * scale))
                self.small_font = pygame.font.Font("/System/Library/Fonts/STHeiti Light.ttc", int(24 * scale))
            except:
                try:
                    self.font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", int(36 * scale))
                    self.large_font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", int(74 * scale))
                    self.small_font = pygame.font.Font("/System/Library/Fonts/Arial Unicode.ttf", int(24 * scale))
                except:
                    self.font = pygame.font.Font(None, int(36 * scale))
                    self.large_font = pygame.font.Font(None, int(74 * scale))
                    self.small_font = pygame.font.Font(None, int(24 * scale))
    def get_scaled_rect(self, rect):
        return pygame.Rect(
            rect.x * self.scale_x,
            rect.y * self.scale_y,
            rect.width * self.scale_x,
            rect.height * self.scale_y
        )
    def get_real_pos(self, pos):
        return (pos[0] / self.scale_x, pos[1] / self.scale_y)
    def handle_click(self, pos):
        x, y = self.get_real_pos(pos)
        for sun in self.suns[:]:
            if sun.rect.collidepoint(x, y) and not sun.collected:
                self.sun_points += sun.value
                self.suns.remove(sun)
                continue
        grid_x = int(x // CELL_SIZE)
        grid_y = int((y - TOP_MARGIN) // CELL_SIZE)
        if 0 <= grid_x < GRID_COLS and 0 <= grid_y < GRID_ROWS:
            plant_exists = any(p.x == grid_x and p.y == grid_y for p in self.plants)
            if not plant_exists and self.selected_plant:
                cost = PLANT_STATS[self.selected_plant]["cost"]
                if self.sun_points >= cost:
                    self.plants.append(Plant(grid_x, grid_y, self.selected_plant))
                    self.sun_points -= cost
                    self.selected_plant = None
    def update_plants(self):
        for plant in self.plants:
            plant.update()
            if plant.can_shoot():
                if plant.type == PlantType.SNOW_PEA:
                    self.projectiles.append(Projectile(plant.x, plant.y, freezing=True))
                elif plant.type == PlantType.ROSE_SHOOTER:
                    lanes = [plant.y]                      if plant.y > 0:                          lanes.append(plant.y - 1)
                    if plant.y < GRID_ROWS - 1:                          lanes.append(plant.y + 1)
                    for lane in lanes:
                        proj = Projectile(plant.x, lane, damage=20, speed=6, is_rose=True)
                        self.projectiles.append(proj)
                else:
                    self.projectiles.append(Projectile(plant.x, plant.y))
                plant.reset_timer()
            elif plant.can_produce_sun():
                self.suns.append(Sun(plant.rect.x, plant.rect.y, from_sky=False))
                plant.reset_timer()
            elif plant.can_eat_zombie():
                for zombie in self.zombies[:]:
                    if zombie.y == plant.y and abs(zombie.x - plant.x) <= 1:
                        self.zombies.remove(zombie)
                        plant.start_eating()
                        self.score += 100
                        break
    def update_combat(self):
        for projectile in self.projectiles[:]:
            if not projectile.active:
                self.projectiles.remove(projectile)
                continue
            projectile.move()
            for zombie in self.zombies[:]:
                if projectile.rect.colliderect(zombie.rect):
                    if projectile.is_rose:
                        color = (255, 192, 203)                          for _ in range(12):
                            angle = random.uniform(0, 2 * math.pi)
                            speed = random.uniform(3, 6)
                            size = random.uniform(4, 7)
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * speed,
                                'dy': math.sin(angle) * speed,
                                'lifetime': 45,
                                'color': (255, 192, 203),
                                'size': size,
                                'rotation': random.uniform(0, 360),
                                'is_petal': True,
                                'shape': 'petal'
                            })
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * (speed * 0.7),
                                'dy': math.sin(angle) * (speed * 0.7),
                                'lifetime': 30,
                                'color': (255, 255, 255),
                                'size': size * 0.5,
                                'is_petal': False
                            })
                        zombie.intoxicate()
                    elif projectile.freezing:
                        color = (0, 191, 255)                          for _ in range(12):
                            angle = random.uniform(0, 2 * math.pi)
                            speed = random.uniform(3, 6)
                            size = random.uniform(4, 7)
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * speed,
                                'dy': math.sin(angle) * speed,
                                'lifetime': 40,
                                'color': (0, 191, 255),
                                'size': size,
                                'rotation': random.uniform(0, 360),
                                'is_petal': True,
                                'shape': 'snowflake'
                            })
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * (speed * 0.7),
                                'dy': math.sin(angle) * (speed * 0.7),
                                'lifetime': 25,
                                'color': (255, 255, 255),
                                'size': size * 0.4,
                                'is_petal': False
                            })
                        zombie.freeze()
                    else:
                        color = (0, 255, 0)                          for _ in range(12):
                            angle = random.uniform(0, 2 * math.pi)
                            speed = random.uniform(3, 6)
                            size = random.uniform(4, 7)
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * speed,
                                'dy': math.sin(angle) * speed,
                                'lifetime': 35,
                                'color': (0, 200, 0),
                                'size': size,
                                'rotation': random.uniform(0, 360),
                                'is_petal': True,
                                'shape': 'leaf'
                            })
                            self.particles.append({
                                'x': projectile.rect.x,
                                'y': projectile.rect.y,
                                'dx': math.cos(angle) * (speed * 0.8),
                                'dy': math.sin(angle) * (speed * 0.8),
                                'lifetime': 20,
                                'color': (150, 255, 150),
                                'size': size * 0.6,
                                'is_petal': False
                            })
                    zombie.take_damage(projectile.damage)
                    if projectile.freezing:
                        zombie.freeze()
                    zombie.stun_timer = 2
                    if zombie.health <= 0:
                        for _ in range(12):
                            angle = random.uniform(0, 2 * math.pi)
                            speed = random.uniform(3, 6)
                            self.particles.append({
                                'x': zombie.rect.x + CELL_SIZE//2,
                                'y': zombie.rect.y + CELL_SIZE//2,
                                'dx': math.cos(angle) * speed,
                                'dy': math.sin(angle) * speed,
                                'lifetime': 30,
                                'color': (139, 69, 19),                                  'size': random.uniform(3, 6)
                            })
                        self.zombies.remove(zombie)
                        self.score += 100
                    if projectile in self.projectiles:
                        self.projectiles.remove(projectile)
                    break
        for particle in self.particles[:]:
            particle['x'] += particle['dx']
            particle['y'] += particle['dy']
            particle['lifetime'] -= 1
            if particle['lifetime'] <= 0:
                self.particles.remove(particle)
        for zombie in self.zombies:
            for plant in self.plants[:]:
                if zombie.rect.colliderect(plant.rect):
                    zombie.eating = True
                    plant.health -= zombie.damage
                    if plant.health <= 0:
                        for _ in range(8):
                            angle = random.uniform(0, 2 * math.pi)
                            speed = random.uniform(2, 4)
                            self.particles.append({
                                'x': plant.rect.x + CELL_SIZE//2,
                                'y': plant.rect.y + CELL_SIZE//2,
                                'dx': math.cos(angle) * speed,
                                'dy': math.sin(angle) * speed,
                                'lifetime': 25,
                                'color': (0, 100, 0),                                  'size': random.uniform(2, 5)
                            })
                        self.plants.remove(plant)
                        zombie.eating = False
                    break
            else:
                zombie.eating = False
    def draw_lawn(self):
        lawn_surface = pygame.Surface((self.base_width, self.base_height))
        lawn_surface.fill(LAWN_GREEN)
        for row in range(GRID_ROWS):
            for col in range(GRID_COLS):
                rect = pygame.Rect(
                    col * CELL_SIZE, 
                    row * CELL_SIZE + TOP_MARGIN,
                    CELL_SIZE, 
                    CELL_SIZE
                )
                if (row + col) % 2 == 0:
                    pygame.draw.rect(lawn_surface, (115, 235, 0), rect)
                pygame.draw.rect(lawn_surface, (100, 200, 0), rect, 1)
        scaled_surface = pygame.transform.scale(lawn_surface, self.screen.get_size())
        self.screen.blit(scaled_surface, (0, 0))
    def draw_plant_menu(self):
        menu_height = 100 * self.scale_y
        menu_surface = pygame.Surface((self.screen.get_width(), menu_height), pygame.SRCALPHA)
        pygame.draw.rect(menu_surface, (139, 69, 19, 200), (0, 0, self.screen.get_width(), menu_height))
        mouse_x, mouse_y = pygame.mouse.get_pos()
        menu_y = mouse_y - (self.screen.get_height() - menu_height)
        cards = [
            (PlantType.SUNFLOWER, YELLOW, 50),
            (PlantType.PEASHOOTER, GREEN, 100),
            (PlantType.ROSE_SHOOTER, (255, 192, 203), 125),              (PlantType.CHOMPER, (148, 0, 211), 150),
            (PlantType.SNOW_PEA, (0, 191, 255), 175)
        ]
        card_width = 70 * self.scale_x
        card_height = 80 * self.scale_y
        card_spacing = 90 * self.scale_x
        for i, (plant_type, color, cost) in enumerate(cards):
            card_x = 10 * self.scale_x + i * card_spacing
            card_rect = pygame.Rect(card_x, 10 * self.scale_y, card_width, card_height)
            is_hovered = (0 <= menu_y <= card_height + 20 * self.scale_y and 
                         card_x <= mouse_x <= card_x + card_width)
            is_selected = self.selected_plant == plant_type
            if is_selected:
                glow_surface = pygame.Surface((card_width + 4, card_height + 4), pygame.SRCALPHA)
                pygame.draw.rect(glow_surface, (*PLANT_STATS[plant_type]["color"], 128), 
                               (0, 0, card_width + 4, card_height + 4))
                menu_surface.blit(glow_surface, (card_rect.x - 2, card_rect.y - 2))
                pygame.draw.rect(menu_surface, WHITE, 
                               (card_rect.x - 2, card_rect.y - 2, card_width + 4, card_height + 4), 
                               max(1, int(2 * self.scale_x)))
            elif is_hovered:
                pygame.draw.rect(menu_surface, (255, 255, 255, 30), card_rect)
            pygame.draw.rect(menu_surface, color, card_rect)
            if plant_type in PLANT_DRAWINGS:
                plant_surface = pygame.Surface((CELL_SIZE, CELL_SIZE), pygame.SRCALPHA)
                PLANT_DRAWINGS[plant_type](plant_surface, 0, 0, CELL_SIZE)
                scaled_size = (int(50 * self.scale_x), int(50 * self.scale_y))
                scaled_surface = pygame.transform.scale(plant_surface, scaled_size)
                menu_surface.blit(scaled_surface, 
                                (card_rect.x + 10 * self.scale_x, 
                                 card_rect.y + 5 * self.scale_y))
            sun_size = 10 * min(self.scale_x, self.scale_y)
            pygame.draw.circle(menu_surface, YELLOW, 
                             (card_rect.x + sun_size, card_rect.bottom - sun_size), 
                             sun_size)
            cost_text = self.small_font.render(str(cost), True, BLACK)
            menu_surface.blit(cost_text, 
                            (card_rect.x + sun_size * 2, 
                             card_rect.bottom - sun_size * 1.5))
            if self.sun_points < cost:
                gray_surface = pygame.Surface((card_width, card_height), pygame.SRCALPHA)
                pygame.draw.rect(gray_surface, (128, 128, 128, 180), 
                               (0, 0, card_width, card_height))
                menu_surface.blit(gray_surface, card_rect)
        self.screen.blit(menu_surface, (0, self.screen.get_height() - menu_height))
    def draw_hud(self):
        sun_size = 30 * min(self.scale_x, self.scale_y)
        sun_icon = pygame.Surface((sun_size, sun_size), pygame.SRCALPHA)
        pygame.draw.circle(sun_icon, YELLOW, (sun_size/2, sun_size/2), sun_size/2)
        self.screen.blit(sun_icon, (10 * self.scale_x, 10 * self.scale_y))
        sun_text = self.font.render(str(self.sun_points), True, BLACK)
        self.screen.blit(sun_text, (45 * self.scale_x, 15 * self.scale_y))
        wave_text = self.font.render(f"第 {self.wave_number} 波僵尸", True, BLACK)
        self.screen.blit(wave_text, 
                        (self.screen.get_width() - 200 * self.scale_x, 
                         15 * self.scale_y))
        score_text = self.font.render(f"得分: {self.score}", True, BLACK)
        self.screen.blit(score_text, 
                        (self.screen.get_width()//2 - score_text.get_width()//2, 
                         15 * self.scale_y))
    def draw_watermark(self):
        watermark = self.small_font.render("ChatDev制作", True, (0, 0, 0, 128))
        watermark.set_alpha(128)          self.screen.blit(watermark, 
                        (self.screen.get_width() - watermark.get_width() - 10, 
                         self.screen.get_height() - watermark.get_height() - 10))
    def run(self):
        while True:
            if self.state == GameState.MENU:
                self.run_menu()
            elif self.state == GameState.PLAYING:
                self.run_game()
            elif self.state == GameState.GAME_OVER:
                self.run_game_over()
    def run_menu(self):
        while self.state == GameState.MENU:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:                          button_rect = pygame.Rect(
                            self.screen.get_width()//2 - 100 * self.scale_x,
                            self.screen.get_height()//2,
                            200 * self.scale_x,
                            50 * self.scale_y
                        )
                        if button_rect.collidepoint(event.pos):
                            self.state = GameState.PLAYING
                            self.reset_game()
                elif event.type == pygame.VIDEORESIZE:
                    self.handle_resize(event)
            self.screen.fill(LAWN_GREEN)
            title = self.large_font.render("植物大战僵尸", True, BLACK)
            self.screen.blit(title, 
                           (self.screen.get_width()//2 - title.get_width()//2,
                            self.screen.get_height()//4))
            button_rect = pygame.Rect(
                self.screen.get_width()//2 - 100 * self.scale_x,
                self.screen.get_height()//2,
                200 * self.scale_x,
                50 * self.scale_y
            )
            pygame.draw.rect(self.screen, GREEN, button_rect)
            pygame.draw.rect(self.screen, BLACK, button_rect, 2)
            start_text = self.font.render("开始游戏", True, BLACK)
            self.screen.blit(start_text,
                           (self.screen.get_width()//2 - start_text.get_width()//2,
                            self.screen.get_height()//2 + 5 * self.scale_y))
            self.draw_watermark()
            pygame.display.flip()
            self.clock.tick(FPS)
    def run_game(self):
        while self.state == GameState.PLAYING and not self.game_over:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.VIDEORESIZE:
                    self.handle_resize(event)
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = pygame.mouse.get_pos()
                    real_pos = self.get_real_pos(mouse_pos)
                    if self.base_height - 100 <= real_pos[1] <= self.base_height:
                        menu_y = real_pos[1] - (self.base_height - 100)
                        if 10 <= menu_y <= 90:
                            card_x = int((real_pos[0] - 10) // 90)                              if 0 <= card_x <= 4:
                                plant_types = [
                                    PlantType.SUNFLOWER,
                                    PlantType.PEASHOOTER,
                                    PlantType.ROSE_SHOOTER,
                                    PlantType.CHOMPER,
                                    PlantType.SNOW_PEA
                                ]
                                if card_x < len(plant_types):
                                    plant_type = plant_types[card_x]
                                    if self.sun_points >= PLANT_STATS[plant_type]["cost"]:
                                        self.selected_plant = plant_type
                    else:
                        self.handle_click(mouse_pos)
            self.spawn_zombie()
            self.spawn_sun()
            self.update_plants()
            self.update_combat()
            self.wave_timer -= 1
            if self.wave_timer <= 0:
                self.wave_number += 1
                self.wave_timer = 600
            for zombie in self.zombies:
                zombie.move()
                if zombie.x <= 0:
                    self.game_over = True
                    self.state = GameState.GAME_OVER
            for sun in self.suns[:]:
                sun.move()
                if sun.lifetime <= 0:
                    self.suns.remove(sun)
            self.draw_lawn()
            game_surface = pygame.Surface((self.base_width, self.base_height), pygame.SRCALPHA)
            for plant in self.plants:
                plant.draw(game_surface)
            for zombie in self.zombies:
                zombie.draw(game_surface)
            for projectile in self.projectiles:
                projectile.draw(game_surface)
            for sun in self.suns:
                sun.draw(game_surface)
            for particle in self.particles:
                if particle.get('is_petal', False):
                    shape = particle.get('shape', 'petal')
                    particle_surface = pygame.Surface((particle['size'] * 2, particle['size'] * 2), pygame.SRCALPHA)
                    center = (particle['size'], particle['size'])
                    if shape == 'petal':
                        for angle in range(0, 360, 72):
                            rad = math.radians(angle + particle['rotation'])
                            petal_x = center[0] + math.cos(rad) * particle['size']
                            petal_y = center[1] + math.sin(rad) * particle['size']
                            pygame.draw.circle(particle_surface, particle['color'], 
                                            (int(petal_x), int(petal_y)), 
                                            int(particle['size'] * 0.6))
                    elif shape == 'snowflake':
                        for angle in range(0, 360, 45):
                            rad = math.radians(angle + particle['rotation'])
                            end_x = center[0] + math.cos(rad) * particle['size']
                            end_y = center[1] + math.sin(rad) * particle['size']
                            pygame.draw.line(particle_surface, particle['color'],
                                          center, (int(end_x), int(end_y)), 2)
                            branch_length = particle['size'] * 0.5
                            mid_x = center[0] + math.cos(rad) * particle['size'] * 0.6
                            mid_y = center[1] + math.sin(rad) * particle['size'] * 0.6
                            side_angle1 = rad + math.pi / 4
                            side_angle2 = rad - math.pi / 4
                            pygame.draw.line(particle_surface, particle['color'],
                                          (int(mid_x), int(mid_y)),
                                          (int(mid_x + math.cos(side_angle1) * branch_length),
                                           int(mid_y + math.sin(side_angle1) * branch_length)), 2)
                            pygame.draw.line(particle_surface, particle['color'],
                                          (int(mid_x), int(mid_y)),
                                          (int(mid_x + math.cos(side_angle2) * branch_length),
                                           int(mid_y + math.sin(side_angle2) * branch_length)), 2)
                    elif shape == 'leaf':
                        points = []
                        leaf_length = particle['size'] * 1.5
                        leaf_width = particle['size'] * 0.8
                        rad = math.radians(particle['rotation'])
                        for t in range(0, 360, 10):
                            t_rad = math.radians(t)
                            x = center[0] + math.cos(rad) * leaf_length * math.cos(t_rad) - \
                                math.sin(rad) * leaf_width * math.sin(t_rad)
                            y = center[1] + math.sin(rad) * leaf_length * math.cos(t_rad) + \
                                math.cos(rad) * leaf_width * math.sin(t_rad)
                            points.append((int(x), int(y)))
                        if len(points) > 2:
                            pygame.draw.polygon(particle_surface, particle['color'], points)
                            vein_start = center
                            vein_end = (int(center[0] + math.cos(rad) * leaf_length),
                                      int(center[1] + math.sin(rad) * leaf_length))
                            pygame.draw.line(particle_surface, (0, 150, 0), 
                                          vein_start, vein_end, 1)
                    alpha = int(255 * (particle['lifetime'] / 45))
                    particle_surface.set_alpha(alpha)
                    game_surface.blit(particle_surface, 
                                    (particle['x'] - particle['size'],
                                     particle['y'] - particle['size']))
                else:
                    alpha = int(255 * (particle['lifetime'] / 30))
                    color = (*particle['color'][:3], alpha)
                    pygame.draw.circle(game_surface, color,
                                    (int(particle['x']), int(particle['y'])),
                                    int(particle['size']))
            scaled_surface = pygame.transform.scale(game_surface, self.screen.get_size())
            self.screen.blit(scaled_surface, (0, 0))
            self.draw_plant_menu()
            self.draw_hud()
            self.draw_watermark()
            pygame.display.flip()
            self.clock.tick(FPS)
    def run_game_over(self):
        while self.state == GameState.GAME_OVER:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:                          self.state = GameState.MENU
                elif event.type == pygame.VIDEORESIZE:
                    self.handle_resize(event)
            self.screen.fill((0, 0, 0))              game_over_text = self.large_font.render("游戏结束", True, RED)
            score_text = self.font.render(f"最终得分: {self.score}", True, WHITE)
            self.screen.blit(game_over_text,
                           (self.screen.get_width()//2 - game_over_text.get_width()//2,
                            self.screen.get_height()//3))
            self.screen.blit(score_text,
                           (self.screen.get_width()//2 - score_text.get_width()//2,
                            self.screen.get_height()//2))
            self.draw_watermark()
            pygame.display.flip()
            self.clock.tick(FPS)
if __name__ == "__main__":
    game = Game()
    game.run() 

/home/brandon/Projects/ChatDev/WareHouse/pvz_THUNLPDemo_2024/sprites.py

import pygame
import math
from constants import *
def draw_sunflower(surface, x, y, size):
    time = pygame.time.get_ticks()
    sway = math.sin(time * 0.003) * 3
    petal_spin = time * 0.002
    stem_points = [
        (x + size//2 + sway, y + size*3//4),
        (x + size//2, y + size*7//8),
        (x + size//2, y + size)
    ]
    pygame.draw.lines(surface, GREEN, False, stem_points, 3)
    leaf_color = (34, 139, 34)      leaf_points = [
        (x + size//2, y + size*3//4),
        (x + size//3, y + size*7//8),
        (x + size//2, y + size*13//16)
    ]
    pygame.draw.polygon(surface, leaf_color, leaf_points)
    leaf_points = [
        (x + size//2, y + size*3//4),
        (x + size*2//3, y + size*7//8),
        (x + size//2, y + size*13//16)
    ]
    pygame.draw.polygon(surface, leaf_color, leaf_points)
    center_x, center_y = x + size//2 + sway, y + size//2
    pygame.draw.circle(surface, (160, 82, 45), (center_x, center_y), size//4)      pygame.draw.circle(surface, (139, 69, 19), (center_x, center_y), size//5)      pygame.draw.circle(surface, (101, 67, 33), (center_x, center_y), size//6)      petal_colors = [(255, 218, 0), (255, 200, 0), (255, 182, 0)]      for i, angle in enumerate(range(0, 360, 45)):
        rad = math.radians(angle + petal_spin)
        petal_x = center_x + math.cos(rad) * size//3
        petal_y = center_y + math.sin(rad) * size//3
        pygame.draw.circle(surface, petal_colors[i % 3], (int(petal_x), int(petal_y)), size//6)
        pygame.draw.circle(surface, petal_colors[(i + 1) % 3], (int(petal_x), int(petal_y)), size//8)
def draw_peashooter(surface, x, y, size):
    time = pygame.time.get_ticks()
    sway = math.sin(time * 0.003) * 3
    stem_points = [
        (x + size//2 + sway, y + size*2//3),
        (x + size//2, y + size*7//8),
        (x + size//2, y + size)
    ]
    pygame.draw.lines(surface, GREEN, False, stem_points, 3)
    leaf_color = (34, 139, 34)
    leaf_points = [
        (x + size//2, y + size*3//4),
        (x + size//3, y + size*7//8),
        (x + size//2, y + size*13//16)
    ]
    pygame.draw.polygon(surface, leaf_color, leaf_points)
    head_x = x + size//2 + sway
    head_color = (0, 200, 0)
    pygame.draw.ellipse(surface, head_color, (head_x - size//4, y + size//4, size//2, size//2))
    pygame.draw.ellipse(surface, (0, 180, 0), (head_x - size//5, y + size//3, size//2.5, size//2.5))
    shooter_x = head_x + size//4
    shooter_color = (0, 100, 0)
    pygame.draw.circle(surface, shooter_color, (int(shooter_x), y + size//2), size//7)
    pygame.draw.circle(surface, (0, 150, 0), (int(shooter_x), y + size//2), size//10)
    eye_color = (0, 0, 0)
    eye_x = head_x - size//8
    pygame.draw.ellipse(surface, eye_color, (eye_x, y + size//3, size//10, size//8))
    pygame.draw.ellipse(surface, eye_color, (eye_x + size//6, y + size//3, size//10, size//8))
def draw_wallnut(surface, x, y, size):
    time = pygame.time.get_ticks()
    wobble = math.sin(time * 0.004) * 2
    nut_colors = [(139, 69, 19), (160, 82, 45), (205, 133, 63)]
    for i, color in enumerate(nut_colors):
        offset = i * 4
        pygame.draw.ellipse(surface, color, 
                          (x + size//6 + offset + wobble, 
                           y + size//6 + offset, 
                           size*2//3 - offset*2, 
                           size*2//3 - offset*2))
    crack_color = (101, 67, 33)
    crack_points = [
        (x + size//2, y + size//4),
        (x + size*2//3, y + size//3),
        (x + size//2, y + size//2)
    ]
    pygame.draw.lines(surface, crack_color, False, crack_points, 2)
    eye_color = BLACK
    blink = (time % 3000) < 200      if not blink:
        pygame.draw.ellipse(surface, eye_color, (x + size//3, y + size//3, size//6, size//6))
        pygame.draw.ellipse(surface, eye_color, (x + size//2, y + size//3, size//6, size//6))
        pygame.draw.circle(surface, WHITE, (x + size//3 + size//12, y + size//3 + size//12), size//20)
        pygame.draw.circle(surface, WHITE, (x + size//2 + size//12, y + size//3 + size//12), size//20)
    else:
        pygame.draw.line(surface, eye_color, (x + size//3, y + size//3), (x + size//3 + size//6, y + size//3), 2)
        pygame.draw.line(surface, eye_color, (x + size//2, y + size//3), (x + size//2 + size//6, y + size//3), 2)
    smile_rect = pygame.Rect(x + size//3 + wobble, y + size//2, size//3, size//6)
    pygame.draw.arc(surface, eye_color, smile_rect, 0, math.pi, 2)
def draw_chomper(surface, x, y, size):
    time = pygame.time.get_ticks()
    chomp = abs(math.sin(time * 0.004)) * size//4
    sway = math.sin(time * 0.003) * 3
    stem_points = [
        (x + size//2 + sway, y + size*2//3),
        (x + size//2, y + size*7//8),
        (x + size//2, y + size)
    ]
    pygame.draw.lines(surface, GREEN, False, stem_points, 4)
    head_color = (148, 0, 211)      head_x = x + size//2 + sway
    pygame.draw.ellipse(surface, (101, 0, 148), 
                       (head_x - size//3, y + size//4, size*2//3, size//2))
    tongue_color = (255, 105, 180)
    tongue_points = [
        (head_x, y + size//2),
        (head_x - size//4, y + size//2 + size//4),
        (head_x + size//4, y + size//2 + size//4)
    ]
    pygame.draw.polygon(surface, tongue_color, tongue_points)
    jaw_points_upper = [
        (head_x - size//3, y + size//3),
        (head_x + size//3, y + size//3),
        (head_x + size//2, y + size//2),
        (head_x - size//2, y + size//2)
    ]
    jaw_points_lower = [
        (head_x - size//3, y + size//2 + chomp),
        (head_x + size//3, y + size//2 + chomp),
        (head_x + size//2, y + size*2//3 + chomp),
        (head_x - size//2, y + size*2//3 + chomp)
    ]
    pygame.draw.polygon(surface, head_color, jaw_points_upper)
    pygame.draw.polygon(surface, head_color, jaw_points_lower)
    teeth_color = WHITE
    tooth_width = size//8
    for tooth_x in range(int(head_x - size//3), int(head_x + size//3), tooth_width):
        pygame.draw.polygon(surface, teeth_color, [
            (tooth_x, y + size//2),
            (tooth_x + tooth_width//2, y + size//2 - size//8),
            (tooth_x + tooth_width, y + size//2)
        ])
        pygame.draw.polygon(surface, teeth_color, [
            (tooth_x, y + size//2 + chomp),
            (tooth_x + tooth_width//2, y + size//2 + size//8 + chomp),
            (tooth_x + tooth_width, y + size//2 + chomp)
        ])
def draw_snow_pea(surface, x, y, size):
    time = pygame.time.get_ticks()
    sway = math.sin(time * 0.003) * 3
    ice_spin = time * 0.003
    stem_points = [
        (x + size//2 + sway, y + size*2//3),
        (x + size//2, y + size*7//8),
        (x + size//2, y + size)
    ]
    pygame.draw.lines(surface, GREEN, False, stem_points, 3)
    leaf_color = (150, 200, 150)
    leaf_points = [
        (x + size//2, y + size*3//4),
        (x + size//3, y + size*7//8),
        (x + size//2, y + size*13//16)
    ]
    pygame.draw.polygon(surface, leaf_color, leaf_points)
    head_x = x + size//2 + sway
    head_colors = [(0, 191, 255), (135, 206, 235), (176, 224, 230)]
    for i, color in enumerate(head_colors):
        offset = i * 3
        pygame.draw.ellipse(surface, color,
                          (head_x - size//4 + offset, 
                           y + size//4 + offset,
                           size//2 - offset*2, 
                           size//2 - offset*2))
    crystal_color = (200, 232, 255)
    for i in range(4):
        angle = ice_spin + i * (math.pi/2)
        crystal_x = head_x + math.cos(angle) * size//3
        crystal_y = y + size//2 + math.sin(angle) * size//3
        crystal_points = [
            (crystal_x, crystal_y - size//8),
            (crystal_x + size//8, crystal_y),
            (crystal_x, crystal_y + size//8),
            (crystal_x - size//8, crystal_y)
        ]
        pygame.draw.polygon(surface, crystal_color, crystal_points)
    for i in range(3):
        particle_x = head_x + math.cos(time * 0.001 + i * 2) * size//4
        particle_y = y + size//2 + math.sin(time * 0.001 + i * 2) * size//4
        pygame.draw.circle(surface, (255, 255, 255, 128), 
                         (int(particle_x), int(particle_y)), size//16)
def draw_normal_zombie(surface, x, y, size):
    time = pygame.time.get_ticks()
    wobble = math.sin(time * 0.004) * 3
    shadow_surface = pygame.Surface((size*2//3, size//4), pygame.SRCALPHA)
    pygame.draw.ellipse(shadow_surface, (0, 0, 0, 64), (0, 0, size*2//3, size//4))
    surface.blit(shadow_surface, (x + size//6, y + size - size//8))
    leg_color = (100, 100, 100)
    leg_offset = abs(math.sin(time * 0.004)) * 5
    pygame.draw.line(surface, leg_color, 
                    (x + size//2, y + size*2//3),
                    (x + size//3, y + size - leg_offset), 4)
    pygame.draw.line(surface, leg_color,
                    (x + size//2, y + size*2//3),
                    (x + size*2//3, y + size - leg_offset), 4)
    clothes_color = (50, 50, 50)
    clothes_points = [
        (x + size//3, y + size//2),
        (x + size*2//3, y + size//2),
        (x + size*2//3, y + size*3//4),
        (x + size//3, y + size*3//4)
    ]
    pygame.draw.polygon(surface, clothes_color, clothes_points)
    arm_color = (100, 100, 100)
    arm_sway = math.sin(time * 0.004) * 10
    pygame.draw.line(surface, arm_color,
                    (x + size//2, y + size//2),
                    (x + size//4 + arm_sway, y + size*2//3), 4)
    pygame.draw.line(surface, arm_color,
                    (x + size//2, y + size//2),
                    (x + size*3//4 + arm_sway, y + size*2//3), 4)
    body_color = (169, 169, 169)
    pygame.draw.ellipse(surface, body_color, 
                       (x + size//3 + wobble, y + size//3, size//3, size//2))
    head_color = (169, 169, 169)
    pygame.draw.circle(surface, head_color, 
                      (int(x + size//2 + wobble), int(y + size//3)), size//4)
    eye_color = (255, 0, 0)      pygame.draw.circle(surface, eye_color, 
                      (int(x + size//2 - size//8 + wobble), int(y + size//3)), size//12)
    pygame.draw.circle(surface, eye_color,
                      (int(x + size//2 + size//8 + wobble), int(y + size//3)), size//12)
    mouth_color = (100, 0, 0)
    mouth_points = [
        (x + size//2 - size//6 + wobble, y + size//3 + size//6),
        (x + size//2 + size//6 + wobble, y + size//3 + size//6),
        (x + size//2 + wobble, y + size//3 + size//4)
    ]
    pygame.draw.polygon(surface, mouth_color, mouth_points)
def draw_cone_zombie(surface, x, y, size):
    draw_normal_zombie(surface, x, y, size)
    time = pygame.time.get_ticks()
    wobble = math.sin(time * 0.004) * 3
    cone_colors = [(139, 69, 19), (160, 82, 45), (205, 133, 63)]      for i, color in enumerate(cone_colors):
        offset = i * 2
        points = [
            (x + size//2 + wobble, y - size//6 + offset),
            (x + size//3 + offset, y + size//3),
            (x + size*2//3 - offset, y + size//3)
        ]
        pygame.draw.polygon(surface, color, points)
    scratch_color = (101, 67, 33)
    scratch_points = [
        (x + size//2 - size//8 + wobble, y + size//6),
        (x + size//2 + size//8 + wobble, y + size//4)
    ]
    pygame.draw.lines(surface, scratch_color, False, scratch_points, 2)
def draw_bucket_zombie(surface, x, y, size):
    draw_normal_zombie(surface, x, y, size)
    time = pygame.time.get_ticks()
    wobble = math.sin(time * 0.004) * 3
    bucket_colors = [(192, 192, 192), (169, 169, 169), (128, 128, 128)]
    for i, color in enumerate(bucket_colors):
        offset = i * 2
        pygame.draw.rect(surface, color,
                        (x + size//4 + offset + wobble, 
                         y - size//6 + offset,
                         size//2 - offset*2, 
                         size//3))
    rim_color = (211, 211, 211)
    pygame.draw.rect(surface, rim_color,
                    (x + size//4 - 2 + wobble, y - size//6, size//2 + 4, 4))
    highlight_color = (255, 255, 255)
    pygame.draw.line(surface, highlight_color,
                    (x + size//3 + wobble, y),
                    (x + size*2//3 + wobble, y), 2)
    dent_color = (128, 128, 128)
    pygame.draw.arc(surface, dent_color,
                   (x + size//3 + wobble, y, size//4, size//6),
                   0, math.pi, 2)
def draw_newspaper_zombie(surface, x, y, size):
    draw_normal_zombie(surface, x, y, size)
    time = pygame.time.get_ticks()
    wobble = math.sin(time * 0.004) * 3
    paper_shake = math.sin(time * 0.008) * 2
    paper_color = (255, 255, 255)
    pygame.draw.rect(surface, paper_color,
                    (x + size//6 + paper_shake, 
                     y + size//3,
                     size//2,
                     size//2))
    text_color = (0, 0, 0)
    for i in range(4):
        y_pos = y + size//3 + i*size//8
        pygame.draw.line(surface, text_color,
                        (x + size//5 + paper_shake, y_pos),
                        (x + size*2//3 + paper_shake, y_pos), 1)
    if time % 2000 < 1000:          tear_points = [
            (x + size//3 + paper_shake, y + size//3),
            (x + size//2 + paper_shake, y + size//2),
            (x + size//3 + paper_shake, y + size*2//3)
        ]
        pygame.draw.lines(surface, (200, 200, 200), False, tear_points, 2)
def draw_dancing_zombie(surface, x, y, size):
    time = pygame.time.get_ticks()
    dance_move = math.sin(time * 0.006) * 10
    spin = math.sin(time * 0.003) * 0.3
    shadow_surface = pygame.Surface((size*2//3, size//4), pygame.SRCALPHA)
    pygame.draw.ellipse(shadow_surface, (0, 0, 0, 64), (0, 0, size*2//3, size//4))
    surface.blit(shadow_surface, (x + size//6, y + size - size//8))
    leg_color = (100, 100, 100)
    pygame.draw.line(surface, leg_color,
                    (x + size//2, y + size//2),
                    (x + size//4 + dance_move, y + size), 4)
    pygame.draw.line(surface, leg_color,
                    (x + size//2, y + size//2),
                    (x + size*3//4 - dance_move, y + size), 4)
    outfit_color = (148, 0, 211)      outfit_points = [
        (x + size//3 + dance_move/2, y + size//3),
        (x + size*2//3 + dance_move/2, y + size//3),
        (x + size*2//3 - dance_move/2, y + size*3//4),
        (x + size//3 - dance_move/2, y + size*3//4)
    ]
    pygame.draw.polygon(surface, outfit_color, outfit_points)
    arm_color = (100, 100, 100)
    pygame.draw.line(surface, arm_color,
                    (x + size//2, y + size//2),
                    (x + size//4 - dance_move, y + size//3), 4)
    pygame.draw.line(surface, arm_color,
                    (x + size//2, y + size//2),
                    (x + size*3//4 + dance_move, y + size//3), 4)
    body_color = (169, 169, 169)
    body_rect = pygame.Rect(x + size//3 + dance_move/2, y + size//4,
                          size//3, size//2)
    rotated_surface = pygame.Surface((size, size), pygame.SRCALPHA)
    pygame.draw.ellipse(rotated_surface, body_color, body_rect)
    head_color = (169, 169, 169)
    pygame.draw.circle(rotated_surface, head_color,
                      (int(x + size//2 + dance_move/2), int(y + size//3)),
                      size//4)
    hair_color = (0, 0, 0)
    for i in range(6):
        angle = i * math.pi/3 + spin
        hair_x = x + size//2 + math.cos(angle) * size//3 + dance_move/2
        hair_y = y + size//3 + math.sin(angle) * size//4
        pygame.draw.line(surface, hair_color,
                        (x + size//2 + dance_move/2, y + size//3),
                        (hair_x, hair_y), 3)
    glasses_color = (0, 0, 0)
    pygame.draw.rect(surface, glasses_color,
                    (x + size//3 + dance_move/2, y + size//4,
                     size//3, size//8))
    for i in range(8):
        angle = i * math.pi/4 + time * 0.01
        sparkle_x = x + size//2 + math.cos(angle) * size//2
        sparkle_y = y + size//3 + math.sin(angle) * size//2
        pygame.draw.circle(surface, (255, 255, 255),
                         (int(sparkle_x), int(sparkle_y)), 2)
def draw_rose_shooter(surface, x, y, size):
    time = pygame.time.get_ticks()
    sway = math.sin(time * 0.003) * 3
    petal_spin = time * 0.002
    stem_points = [
        (x + size//2 + sway, y + size*2//3),
        (x + size//2, y + size*7//8),
        (x + size//2, y + size)
    ]
    pygame.draw.lines(surface, GREEN, False, stem_points, 3)
    leaf_color = (34, 139, 34)      leaf_points = [
        (x + size//2, y + size*3//4),
        (x + size//3, y + size*7//8),
        (x + size//2, y + size*13//16)
    ]
    pygame.draw.polygon(surface, leaf_color, leaf_points)
    thorn_color = (139, 69, 19)      thorn_points = [
        [(x + size//2 - 5, y + size*3//4), (x + size//2 - 10, y + size*3//4 - 5), (x + size//2 - 5, y + size*3//4 - 5)],
        [(x + size//2 + 5, y + size*3//4), (x + size//2 + 10, y + size*3//4 - 5), (x + size//2 + 5, y + size*3//4 - 5)]
    ]
    for points in thorn_points:
        pygame.draw.polygon(surface, thorn_color, points)
    head_x = x + size//2 + sway
    head_y = y + size//2
    rose_colors = [(255, 192, 203), (255, 182, 193), (255, 105, 180)]      for i, color in enumerate(rose_colors):
        offset = i * 3
        for angle in range(0, 360, 45):
            rad = math.radians(angle + petal_spin)
            petal_x = head_x + math.cos(rad) * (size//4 - offset)
            petal_y = head_y + math.sin(rad) * (size//4 - offset)
            pygame.draw.circle(surface, color, (int(petal_x), int(petal_y)), size//6 - offset)
    pygame.draw.circle(surface, (139, 0, 0), (int(head_x), int(head_y)), size//8)      shooter_x = head_x + size//4
    shooter_color = (255, 20, 147)      pygame.draw.circle(surface, shooter_color, (int(shooter_x), head_y), size//7)
    pygame.draw.circle(surface, (255, 105, 180), (int(shooter_x), head_y), size//10)  PLANT_DRAWINGS = {
    PlantType.SUNFLOWER: draw_sunflower,
    PlantType.PEASHOOTER: draw_peashooter,
    PlantType.ROSE_SHOOTER: draw_rose_shooter,
    PlantType.CHOMPER: draw_chomper,
    PlantType.SNOW_PEA: draw_snow_pea
}
ZOMBIE_DRAWINGS = {
    ZombieType.NORMAL: draw_normal_zombie,
    ZombieType.CONE: draw_cone_zombie,
    ZombieType.BUCKET: draw_bucket_zombie,
    ZombieType.NEWSPAPER: draw_newspaper_zombie,
    ZombieType.DANCING: draw_dancing_zombie
} 

/home/brandon/Projects/ChatDev/camel/__init__.py

import camel.agents
import camel.configs
import camel.generators
import camel.messages
import camel.prompts
import camel.typing
import camel.utils
__version__ = '0.1.0'
__all__ = [
    '__version__',
    'camel',
]


/home/brandon/Projects/ChatDev/camel/web_spider.py

import requests
from bs4 import BeautifulSoup
import openai
from openai import OpenAI
import wikipediaapi
import os
import time
self_api_key = os.environ.get('OPENAI_API_KEY')
BASE_URL = os.environ.get('BASE_URL')
if BASE_URL:
    client = openai.OpenAI(
        api_key=self_api_key,
        base_url=BASE_URL,
    )
else:
    client = openai.OpenAI(
        api_key=self_api_key
    )
def get_baidu_baike_content(keyword):
    url = f'https://baike.baidu.com/item/{keyword}'
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    main_content = soup.contents[-1].contents[0].contents[4].attrs['content']
    return main_content
def get_wiki_content(keyword):
    wiki_wiki = wikipediaapi.Wikipedia('MyProjectName (merlin@example.com)', 'en')
    search_topic = keyword
    page_py = wiki_wiki.page(search_topic)
    if page_py.exists():
        print("Page - Title:", page_py.title)
        print("Page - Summary:", page_py.summary)
    else:
        print("Page not found.")
    return page_py.summary
def modal_trans(task_dsp):
    try:
        task_in ="'" + task_dsp + \
               "'Just give me the most important keyword about this sentence without explaining it and your answer should be only one keyword."
        messages = [{"role": "user", "content": task_in}]
        response = client.chat.completions.create(messages=messages,
        model="gpt-3.5-turbo-16k",
        temperature=1,
        top_p=1.0,
        n=1,
        stream=False,
        frequency_penalty=0.0,
        presence_penalty=0.0,
        logit_bias={})
        response_text = response.choices[0].message.content
        spider_content = get_wiki_content(response_text)
        task_in = "'" + spider_content + \
               "',Summarize this paragraph and return the key information."
        messages = [{"role": "user", "content": task_in}]
        response = client.chat.completions.create(messages=messages,
        model="gpt-3.5-turbo-16k",
        temperature=1,
        top_p=1.0,
        n=1,
        stream=False,
        frequency_penalty=0.0,
        presence_penalty=0.0,
        logit_bias={})
        result = response.choices[0].message.content
        print("web spider content:", result)
    except:
        result = ''
        print("the content is none")
    return result

/home/brandon/Projects/ChatDev/camel/utils.py

import os
import re
import zipfile
from functools import wraps
from typing import Any, Callable, List, Optional, Set, TypeVar
import requests
import tiktoken
from camel.messages import OpenAIMessage
from camel.typing import ModelType, TaskType
F = TypeVar('F', bound=Callable[..., Any])
import time
def count_tokens_openai_chat_models(
        messages: List[OpenAIMessage],
        encoding: Any,
) -> int:
    r"""Counts the number of tokens required to generate an OpenAI chat based
    on a given list of messages.
    Args:
        messages (List[OpenAIMessage]): The list of messages.
        encoding (Any): The encoding method to use.
    Returns:
        int: The number of tokens required.
    """
    num_tokens = 0
    for message in messages:
        num_tokens += 4
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
            if key == "name":                  num_tokens += -1      num_tokens += 2      return num_tokens
def num_tokens_from_messages(
        messages: List[OpenAIMessage],
        model: ModelType,
) -> int:
    r"""Returns the number of tokens used by a list of messages.
    Args:
        messages (List[OpenAIMessage]): The list of messages to count the
            number of tokens for.
        model (ModelType): The OpenAI model used to encode the messages.
    Returns:
        int: The total number of tokens used by the messages.
    Raises:
        NotImplementedError: If the specified `model` is not implemented.
    References:
        - https://github.com/openai/openai-python/blob/main/chatml.md
        - https://platform.openai.com/docs/models/gpt-4
        - https://platform.openai.com/docs/models/gpt-3-5
    """
    try:
        value_for_tiktoken = model.value_for_tiktoken
        encoding = tiktoken.encoding_for_model(value_for_tiktoken)
    except KeyError:
        encoding = tiktoken.get_encoding("cl100k_base")
    if model in {
        ModelType.GPT_3_5_TURBO,
        ModelType.GPT_3_5_TURBO_NEW,
        ModelType.GPT_4,
        ModelType.GPT_4_32k,
        ModelType.GPT_4_TURBO,
        ModelType.GPT_4_TURBO_V,
        ModelType.GPT_4O,
        ModelType.GPT_4O_MINI,
        ModelType.O1_PREVIEW,
        ModelType.STUB
    }:
        return count_tokens_openai_chat_models(messages, encoding)
    else:
        raise NotImplementedError(
            f"`num_tokens_from_messages`` is not presently implemented "
            f"for model {model}. "
            f"See https://github.com/openai/openai-python/blob/main/chatml.md "
            f"for information on how messages are converted to tokens. "
            f"See https://platform.openai.com/docs/models/gpt-4"
            f"or https://platform.openai.com/docs/models/gpt-3-5"
            f"for information about openai chat models.")
def get_model_token_limit(model: ModelType) -> int:
    r"""Returns the maximum token limit for a given model.
    Args:
        model (ModelType): The type of the model.
    Returns:
        int: The maximum token limit for the given model.
    """
    if model == ModelType.GPT_3_5_TURBO:
        return 16384
    elif model == ModelType.GPT_3_5_TURBO_NEW:
        return 16384
    elif model == ModelType.GPT_4:
        return 8192
    elif model == ModelType.GPT_4_32k:
        return 32768
    elif model == ModelType.GPT_4_TURBO:
        return 128000
    elif model == ModelType.STUB:
        return 4096
    elif model == ModelType.GPT_4O:
        return 128000
    elif model == ModelType.GPT_4O_MINI:
        return 128000
    elif model == ModelType.O1_PREVIEW:
        return 100000
    else:
        raise ValueError("Unknown model type")
def openai_api_key_required(func: F) -> F:
    r"""Decorator that checks if the OpenAI API key is available in the
    environment variables.
    Args:
        func (callable): The function to be wrapped.
    Returns:
        callable: The decorated function.
    Raises:
        ValueError: If the OpenAI API key is not found in the environment
            variables.
    """
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        from camel.agents.chat_agent import ChatAgent
        if not isinstance(self, ChatAgent):
            raise ValueError("Expected ChatAgent")
        if self.model == ModelType.STUB:
            return func(self, *args, **kwargs)
        elif 'OPENAI_API_KEY' in os.environ:
            return func(self, *args, **kwargs)
        else:
            raise ValueError('OpenAI API key not found.')
    return wrapper
def print_text_animated(text, delay: float = 0.005, end: str = ""):
    r"""Prints the given text with an animated effect.
    Args:
        text (str): The text to print.
        delay (float, optional): The delay between each character printed.
            (default: :obj:`0.02`)
        end (str, optional): The end character to print after the text.
            (default: :obj:`""`)
    """
    for char in text:
        print(char, end=end, flush=True)
        time.sleep(delay)
    print('\n')
def get_prompt_template_key_words(template: str) -> Set[str]:
    r"""Given a string template containing curly braces {}, return a set of
    the words inside the braces.
    Args:
        template (str): A string containing curly braces.
    Returns:
        List[str]: A list of the words inside the curly braces.
    Example:
        >>> get_prompt_template_key_words('Hi, {name}! How are you {status}?')
        {'name', 'status'}
    """
    return set(re.findall(r'{([^}]*)}', template))
def get_first_int(string: str) -> Optional[int]:
    r"""Returns the first integer number found in the given string.
    If no integer number is found, returns None.
    Args:
        string (str): The input string.
    Returns:
        int or None: The first integer number found in the string, or None if
            no integer number is found.
    """
    match = re.search(r'\d+', string)
    if match:
        return int(match.group())
    else:
        return None
def download_tasks(task: TaskType, folder_path: str) -> None:
    zip_file_path = os.path.join(folder_path, "tasks.zip")
    response = requests.get("https://huggingface.co/datasets/camel-ai/"
                            f"metadata/resolve/main/{task.value}_tasks.zip")
    with open(zip_file_path, "wb") as f:
        f.write(response.content)
    with zipfile.ZipFile(zip_file_path, "r") as zip_ref:
        zip_ref.extractall(folder_path)
    os.remove(zip_file_path)


/home/brandon/Projects/ChatDev/camel/typing.py

from enum import Enum
class TaskType(Enum):
    AI_SOCIETY = "ai_society"
    CODE = "code"
    MISALIGNMENT = "misalignment"
    TRANSLATION = "translation"
    EVALUATION = "evaluation"
    SOLUTION_EXTRACTION = "solution_extraction"
    CHATDEV = "chat_dev"
    DEFAULT = "default"
class RoleType(Enum):
    ASSISTANT = "assistant"
    USER = "user"
    CRITIC = "critic"
    EMBODIMENT = "embodiment"
    DEFAULT = "default"
    CHATDEV = "AgentTech"
    CHATDEV_COUNSELOR = "counselor"
    CHATDEV_CEO = "chief executive officer (CEO)"
    CHATDEV_CHRO = "chief human resource officer (CHRO)"
    CHATDEV_CPO = "chief product officer (CPO)"
    CHATDEV_CTO = "chief technology officer (CTO)"
    CHATDEV_PROGRAMMER = "programmer"
    CHATDEV_REVIEWER = "code reviewer"
    CHATDEV_TESTER = "software test engineer"
    CHATDEV_CCO = "chief creative officer (CCO)"
class ModelType(Enum):
    GPT_3_5_TURBO = "gpt-3.5-turbo-16k-0613"
    GPT_3_5_TURBO_NEW = "gpt-3.5-turbo-16k"
    GPT_4 = "gpt-4"
    GPT_4_32k = "gpt-4-32k"
    GPT_4_TURBO = "gpt-4-turbo"
    GPT_4_TURBO_V = "gpt-4-turbo"
    GPT_4O = "gpt-4o"
    GPT_4O_MINI = "gpt-4o-mini"
    O1_PREVIEW = "o1-preview"
    STUB = "stub"
    @property
    def value_for_tiktoken(self):
        return self.value if self.name != "STUB" else "gpt-3.5-turbo-16k-0613"
class PhaseType(Enum):
    REFLECTION = "reflection"
    RECRUITING_CHRO = "recruiting CHRO"
    RECRUITING_CPO = "recruiting CPO"
    RECRUITING_CTO = "recruiting CTO"
    DEMAND_ANALYSIS = "demand analysis"
    CHOOSING_LANGUAGE = "choosing language"
    RECRUITING_PROGRAMMER = "recruiting programmer"
    RECRUITING_REVIEWER = "recruiting reviewer"
    RECRUITING_TESTER = "recruiting software test engineer"
    RECRUITING_CCO = "recruiting chief creative officer"
    CODING = "coding"
    CODING_COMPLETION = "coding completion"
    CODING_AUTOMODE = "coding auto mode"
    REVIEWING_COMMENT = "review comment"
    REVIEWING_MODIFICATION = "code modification after reviewing"
    ERROR_SUMMARY = "error summary"
    MODIFICATION = "code modification"
    ART_ELEMENT_ABSTRACTION = "art element abstraction"
    ART_ELEMENT_INTEGRATION = "art element integration"
    CREATING_ENVIRONMENT_DOCUMENT = "environment document"
    CREATING_USER_MANUAL = "user manual"
__all__ = ["TaskType", "RoleType", "ModelType", "PhaseType"]


/home/brandon/Projects/ChatDev/camel/model_backend.py

from abc import ABC, abstractmethod
from typing import Any, Dict
import openai
import tiktoken
from camel.typing import ModelType
from chatdev.statistics import prompt_cost
from chatdev.utils import log_visualize
try:
    from openai.types.chat import ChatCompletion
    openai_new_api = True  except ImportError:
    openai_new_api = False  import os
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if 'BASE_URL' in os.environ:
    BASE_URL = os.environ['BASE_URL']
else:
    BASE_URL = None
class ModelBackend(ABC):
    r"""Base class for different model backends.
    May be OpenAI API, a local LLM, a stub for unit tests, etc."""
    @abstractmethod
    def run(self, *args, **kwargs):
        r"""Runs the query to the backend model.
        Raises:
            RuntimeError: if the return value from OpenAI API
            is not a dict that is expected.
        Returns:
            Dict[str, Any]: All backends must return a dict in OpenAI format.
        """
        pass
class OpenAIModel(ModelBackend):
    r"""OpenAI API in a unified ModelBackend interface."""
    def __init__(self, model_type: ModelType, model_config_dict: Dict) -> None:
        super().__init__()
        self.model_type = model_type
        self.model_config_dict = model_config_dict
    def run(self, *args, **kwargs):
        string = "\n".join([message["content"] for message in kwargs["messages"]])
        encoding = tiktoken.encoding_for_model(self.model_type.value)
        num_prompt_tokens = len(encoding.encode(string))
        gap_between_send_receive = 15 * len(kwargs["messages"])
        num_prompt_tokens += gap_between_send_receive
        if openai_new_api:
            if BASE_URL:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY,
                    base_url=BASE_URL,
                )
            else:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY
                )
            num_max_token_map = {
                "gpt-3.5-turbo": 4096,
                "gpt-3.5-turbo-16k": 16384,
                "gpt-3.5-turbo-0613": 4096,
                "gpt-3.5-turbo-16k-0613": 16384,
                "gpt-4": 8192,
                "gpt-4-0613": 8192,
                "gpt-4-32k": 32768,
                "gpt-4-turbo": 100000,
                "gpt-4o": 4096,                 "gpt-4o-mini": 16384,                 "o1-preview": 100000,
            }
            num_max_token = num_max_token_map[self.model_type.value]
            num_max_completion_tokens = num_max_token - num_prompt_tokens
            self.model_config_dict['max_completion_tokens'] = num_max_completion_tokens
            response = client.chat.completions.create(*args, **kwargs, model=self.model_type.value,
                                                      **self.model_config_dict)
            cost = prompt_cost(
                self.model_type.value,
                num_prompt_tokens=response.usage.prompt_tokens,
                num_completion_tokens=response.usage.completion_tokens
            )
            log_visualize(
                "**[OpenAI_Usage_Info Receive]**\nprompt_tokens: {}\ncompletion_tokens: {}\ntotal_tokens: {}\ncost: ${:.6f}\n".format(
                    response.usage.prompt_tokens, response.usage.completion_tokens,
                    response.usage.total_tokens, cost))
            if not isinstance(response, ChatCompletion):
                raise RuntimeError("Unexpected return from OpenAI API")
            return response
        else:
            num_max_token_map = {
                "gpt-3.5-turbo": 4096,
                "gpt-3.5-turbo-16k": 16384,
                "gpt-3.5-turbo-0613": 4096,
                "gpt-3.5-turbo-16k-0613": 16384,
                "gpt-4": 8192,
                "gpt-4-0613": 8192,
                "gpt-4-32k": 32768,
                "gpt-4-turbo": 100000,
                "gpt-4o": 4096,                 "gpt-4o-mini": 16384,                 "o1-preview": 100000,
            }
            num_max_token = num_max_token_map[self.model_type.value]
            num_max_completion_tokens = num_max_token - num_prompt_tokens
            self.model_config_dict['max_completion_tokens'] = num_max_completion_tokens
            response = openai.ChatCompletion.create(*args, **kwargs, model=self.model_type.value,
                                                    **self.model_config_dict)
            cost = prompt_cost(
                self.model_type.value,
                num_prompt_tokens=response["usage"]["prompt_tokens"],
                num_completion_tokens=response["usage"]["completion_tokens"]
            )
            log_visualize(
                "**[OpenAI_Usage_Info Receive]**\nprompt_tokens: {}\ncompletion_tokens: {}\ntotal_tokens: {}\ncost: ${:.6f}\n".format(
                    response["usage"]["prompt_tokens"], response["usage"]["completion_tokens"],
                    response["usage"]["total_tokens"], cost))
            if not isinstance(response, Dict):
                raise RuntimeError("Unexpected return from OpenAI API")
            return response
class StubModel(ModelBackend):
    r"""A dummy model used for unit tests."""
    def __init__(self, *args, **kwargs) -> None:
        super().__init__()
    def run(self, *args, **kwargs) -> Dict[str, Any]:
        ARBITRARY_STRING = "Lorem Ipsum"
        return dict(
            id="stub_model_id",
            usage=dict(),
            choices=[
                dict(finish_reason="stop",
                     message=dict(content=ARBITRARY_STRING, role="assistant"))
            ],
        )
class ModelFactory:
    r"""Factory of backend models.
    Raises:
        ValueError: in case the provided model type is unknown.
    """
    @staticmethod
    def create(model_type: ModelType, model_config_dict: Dict) -> ModelBackend:
        default_model_type = ModelType.GPT_3_5_TURBO
        if model_type in {
            ModelType.GPT_3_5_TURBO,
            ModelType.GPT_3_5_TURBO_NEW,
            ModelType.GPT_4,
            ModelType.GPT_4_32k,
            ModelType.GPT_4_TURBO,
            ModelType.GPT_4_TURBO_V,
            ModelType.GPT_4O,
            ModelType.GPT_4O_MINI,
            ModelType.O1_PREVIEW,
            None
        }:
            model_class = OpenAIModel
        elif model_type == ModelType.STUB:
            model_class = StubModel
        else:
            raise ValueError("Unknown model")
        if model_type is None:
            model_type = default_model_type
        inst = model_class(model_type, model_config_dict)
        return inst


/home/brandon/Projects/ChatDev/camel/generators.py

from typing import Dict, Generator, List, Optional, Set, Tuple
from camel.messages import SystemMessage, SystemMessageType
from camel.prompts import PromptTemplateGenerator, TextPrompt
from camel.typing import RoleType, TaskType
class SystemMessageGenerator:
    r"""System message generator for agents.
    Args:
        task_type (TaskType, optional): The task type.
            (default: :obj:`TaskType.AI_SOCIETY`)
        sys_prompts (Optional[Dict[RoleType, str]], optional): The prompts of
            the system messages for each role type. (default: :obj:`None`)
        sys_msg_meta_dict_keys (Optional[Set[str]], optional): The set of keys
            of the meta dictionary used to fill the prompts.
            (default: :obj:`None`)
    """
    def __init__(
        self,
        task_type: TaskType = TaskType.AI_SOCIETY,
        sys_prompts: Optional[Dict[RoleType, str]] = None,
        sys_msg_meta_dict_keys: Optional[Set[str]] = None,
    ) -> None:
        self.sys_prompts: Dict[RoleType, str]
        if sys_prompts is not None:
            self.sys_prompts = sys_prompts
            self.sys_msg_meta_dict_keys = sys_msg_meta_dict_keys or set()
        else:
            templates = PromptTemplateGenerator()
            agenttech_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV)
            counselor_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_COUNSELOR)
            ceo_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_CEO)
            chro_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_CHRO)
            cpo_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_CPO)
            cto_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_CTO)
            programmer_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_PROGRAMMER)
            reviewer_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_REVIEWER)
            tester_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_TESTER)
            cco_prompt_template = templates.get_system_prompt(task_type, RoleType.CHATDEV_CCO)
            self.sys_prompts = dict()
            self.sys_prompts[RoleType.CHATDEV] = agenttech_prompt_template
            self.sys_prompts[RoleType.CHATDEV_COUNSELOR] = counselor_prompt_template
            self.sys_prompts[RoleType.CHATDEV_CEO] = ceo_prompt_template
            self.sys_prompts[RoleType.CHATDEV_CHRO] = chro_prompt_template
            self.sys_prompts[RoleType.CHATDEV_CPO] = cpo_prompt_template
            self.sys_prompts[RoleType.CHATDEV_CTO] = cto_prompt_template
            self.sys_prompts[RoleType.CHATDEV_PROGRAMMER] = programmer_prompt_template
            self.sys_prompts[RoleType.CHATDEV_REVIEWER] = reviewer_prompt_template
            self.sys_prompts[RoleType.CHATDEV_TESTER] = tester_prompt_template
            self.sys_prompts[RoleType.CHATDEV_CCO] = cco_prompt_template
            self.sys_msg_meta_dict_keys = (agenttech_prompt_template.key_words |
                                           counselor_prompt_template.key_words |
                                           ceo_prompt_template.key_words |
                                           chro_prompt_template.key_words |
                                           cpo_prompt_template.key_words |
                                           cto_prompt_template.key_words |
                                           programmer_prompt_template.key_words |
                                           reviewer_prompt_template.key_words |
                                           tester_prompt_template.key_words |
                                           cco_prompt_template.key_words)
        if RoleType.DEFAULT not in self.sys_prompts:
            self.sys_prompts[RoleType.DEFAULT] = "You are a helpful assistant."
    def validate_meta_dict_keys(self, meta_dict: Dict[str, str]) -> None:
        r"""Validates the keys of the meta_dict.
        Args:
            meta_dict (Dict[str, str]): The dictionary to validate.
        """
        if not set(meta_dict.keys()).issubset(self.sys_msg_meta_dict_keys):
            raise ValueError("The keys of the meta_dict should be in "
                             f"{self.sys_msg_meta_dict_keys}. "
                             f"Got {set(meta_dict.keys())} instead.")
    def from_dict(
        self,
        meta_dict: Dict[str, str],
        role_tuple: Tuple[str, RoleType] = ("", RoleType.DEFAULT),
    ) -> SystemMessageType:
        r"""Generates a system message from a dictionary.
        Args:
            meta_dict (Dict[str, str]): The dictionary containing the
                information to generate the system message.
            role_tuple (Tuple[str, RoleType], optional): The tuple containing
                the role name and role type. (default: ("", RoleType.DEFAULT))
        Returns:
            SystemMessageType: The generated system message.
        """
        self.validate_meta_dict_keys(meta_dict)
        role_name, role_type = role_tuple
        sys_prompt = self.sys_prompts[role_type]
        sys_prompt = sys_prompt.format(**meta_dict)
        return SystemMessage(role_name=role_name, role_type=RoleType.DEFAULT,
                             meta_dict=meta_dict, content=sys_prompt)
    def from_dicts(
        self,
        meta_dicts: List[Dict[str, str]],
        role_tuples: Tuple[str, str],
    ) -> List[SystemMessageType]:
        r"""Generates a list of system messages from a list of dictionaries.
        Args:
            meta_dicts (List[Dict[str, str]]): A list of dictionaries
                containing the information to generate the system messages.
            role_tuples (List[Tuple[str, RoleType]]): A list of tuples
                containing the role name and role type for each system message.
        Returns:
            List[SystemMessageType]: A list of generated system messages.
        Raises:
            ValueError: If the number of meta_dicts and role_tuples are
                different.
        """
        if len(meta_dicts) != len(role_tuples):
            raise ValueError(
                "The number of meta_dicts and role_types should be the same.")
        return [
            self.from_dict(meta_dict, role_tuple)
            for meta_dict, role_tuple in zip(meta_dicts, role_tuples)
        ]
class RoleNameGenerator:
    def __init__(self, assistant_role_names_path:
                 str = "data/ai_society/assistant_roles.txt",
                 user_role_names_path: str = "data/ai_society/user_roles.txt",
                 assistant_role_names: Optional[List[str]] = None,
                 user_role_names: Optional[List[str]] = None) -> None:
        if assistant_role_names is None:
            with open(assistant_role_names_path, "r") as f:
                assistant_role_names_: List[str] = f.read().splitlines()
                self.assistant_role_names = [
                    " ".join(name.split(" ")[1:])
                    for name in assistant_role_names_
                ]
        else:
            self.assistant_role_names = assistant_role_names
        if user_role_names is None:
            with open(user_role_names_path, "r") as f:
                user_role_names_: List[str] = f.read().splitlines()
                self.user_role_names = [
                    " ".join(name.split(" ")[1:]) for name in user_role_names_
                ]
        else:
            self.user_role_names = user_role_names
    def from_role_files(self) -> Generator[Tuple, None, None]:
        for assistant_role_name in self.assistant_role_names:
            for user_role_name in self.user_role_names:
                yield (assistant_role_name, user_role_name)
class AISocietyTaskPromptGenerator:
    def __init__(
        self,
        num_tasks: int = 10,
    ) -> None:
        self.generate_tasks_prompt = PromptTemplateGenerator(
        ).get_generate_tasks_prompt(TaskType.AI_SOCIETY)
        self.num_tasks = num_tasks
    def from_role_files(
        self,
        assistant_role_names_path: str = "data/ai_society/assistant_roles.txt",
        user_role_names_path: str = "data/ai_society/user_roles.txt"
    ) -> Generator[Tuple[str, Tuple[str, str]], None, None]:
        roles_generator = RoleNameGenerator(
            assistant_role_names_path, user_role_names_path).from_role_files()
        for role_1, role_2 in roles_generator:
            generate_tasks_prompt = self.generate_tasks_prompt.format(
                assistant_role=role_1, user_role=role_2,
                num_tasks=self.num_tasks)
            yield (generate_tasks_prompt, (role_1, role_2))
    def from_role_generator(
        self, role_generator: Generator[Tuple, None, None]
    ) -> Generator[Tuple[str, Tuple[str, str]], None, None]:
        for role_1, role_2 in role_generator:
            generate_tasks_prompt = self.generate_tasks_prompt.format(
                assistant_role=role_1, user_role=role_2,
                num_tasks=self.num_tasks)
            yield (generate_tasks_prompt, (role_1, role_2))
class SingleTxtGenerator:
    def __init__(
        self,
        text_file_path: str,
    ) -> None:
        with open(text_file_path, "r") as f:
            data_list: List[str] = f.read().splitlines()
            self.data_list = [
                " ".join(name.split(" ")[1:]) for name in data_list
            ]
    def from_role_files(self) -> Generator[str, None, None]:
        for data in self.data_list:
            yield data
class CodeTaskPromptGenerator:
    def __init__(
        self,
        num_tasks: int = 50,
    ) -> None:
        self.generate_tasks_prompt = PromptTemplateGenerator(
        ).get_generate_tasks_prompt(TaskType.CODE)
        self.num_tasks = num_tasks
    def from_role_files(
        self, languages_path: str = "data/code/languages.txt",
        domains_path: str = "data/code/domains.txt"
    ) -> Generator[Tuple[TextPrompt, str, str], None, None]:
        language_generator = SingleTxtGenerator(
            languages_path).from_role_files()
        for language in language_generator:
            domains_generator = SingleTxtGenerator(
                domains_path).from_role_files()
            for domain in domains_generator:
                generated_tasks_prompt = self.generate_tasks_prompt.format(
                    language=language, domain=domain, num_tasks=self.num_tasks)
                yield generated_tasks_prompt, language, domain
    def from_role_generator(
        self, role_generator: Generator[Tuple, None, None]
    ) -> Generator[str, None, None]:
        raise NotImplementedError


/home/brandon/Projects/ChatDev/camel/configs.py

from dataclasses import dataclass, field
from typing import Dict, Optional, Sequence, Union
@dataclass(frozen=True)
class ChatGPTConfig:
    r"""Defines the parameters for generating chat completions using the
    OpenAI API.
    Args:
        temperature (float, optional): Sampling temperature to use, between
            :obj:`0` and :obj:`2`. Higher values make the output more random,
            while lower values make it more focused and deterministic.
            (default: :obj:`0.2`)
        top_p (float, optional): An alternative to sampling with temperature,
            called nucleus sampling, where the model considers the results of
            the tokens with top_p probability mass. So :obj:`0.1` means only
            the tokens comprising the top 10% probability mass are considered.
            (default: :obj:`1.0`)
        n (int, optional): How many chat completion choices to generate for
            each input message. ()default: :obj:`1`)
        stream (bool, optional): If True, partial message deltas will be sent
            as data-only server-sent events as they become available.
            (default: :obj:`False`)
        stop (str or list, optional): Up to :obj:`4` sequences where the API
            will stop generating further tokens. (default: :obj:`None`)
        max_completion_tokens (int, optional): The maximum number of tokens to generate
            in the chat completion. The total length of input tokens and
            generated tokens is limited by the model's context length.
            (default: :obj:`None`)
        presence_penalty (float, optional): Number between :obj:`-2.0` and
            :obj:`2.0`. Positive values penalize new tokens based on whether
            they appear in the text so far, increasing the model's likelihood
            to talk about new topics. See more information about frequency and
            presence penalties. (default: :obj:`0.0`)
        frequency_penalty (float, optional): Number between :obj:`-2.0` and
            :obj:`2.0`. Positive values penalize new tokens based on their
            existing frequency in the text so far, decreasing the model's
            likelihood to repeat the same line verbatim. See more information
            about frequency and presence penalties. (default: :obj:`0.0`)
        logit_bias (dict, optional): Modify the likelihood of specified tokens
            appearing in the completion. Accepts a json object that maps tokens
            (specified by their token ID in the tokenizer) to an associated
            bias value from :obj:`-100` to :obj:`100`. Mathematically, the bias
            is added to the logits generated by the model prior to sampling.
            The exact effect will vary per model, but values between:obj:` -1`
            and :obj:`1` should decrease or increase likelihood of selection;
            values like :obj:`-100` or :obj:`100` should result in a ban or
            exclusive selection of the relevant token. (default: :obj:`{}`)
        user (str, optional): A unique identifier representing your end-user,
            which can help OpenAI to monitor and detect abuse.
            (default: :obj:`""`)
    """
    temperature: float = 0.2      top_p: float = 1.0
    n: int = 1
    stream: bool = False
    stop: Optional[Union[str, Sequence[str]]] = None
    max_completion_tokens: Optional[int] = None
    presence_penalty: float = 0.0
    frequency_penalty: float = 0.0
    logit_bias: Dict = field(default_factory=dict)
    user: str = ""


/home/brandon/Projects/ChatDev/camel/human.py

from typing import Any, Dict, Sequence
from colorama import Fore
from camel.messages import ChatMessage
from camel.utils import print_text_animated
class Human:
    r"""A class representing a human user.
    Args:
        name (str): The name of the human user.
            (default: :obj:`"Kill Switch Engineer"`).
        logger_color (Any): The color of the menu options displayed to the
            user. (default: :obj:`Fore.MAGENTA`)
    Attributes:
        name (str): The name of the human user.
        logger_color (Any): The color of the menu options displayed to the
            user.
        input_button (str): The text displayed for the input button.
        kill_button (str): The text displayed for the kill button.
        options_dict (Dict[str, str]): A dictionary containing the options
            displayed to the user.
    """
    def __init__(self, name: str = "Kill Switch Engineer",
                 logger_color: Any = Fore.MAGENTA) -> None:
        self.name = name
        self.logger_color = logger_color
        self.input_button = f"Input by {self.name}."
        self.kill_button = "Stop!!!"
        self.options_dict: Dict[str, str] = dict()
    def display_options(self, messages: Sequence[ChatMessage]) -> None:
        r"""Displays the options to the user.
        Args:
            messages (Sequence[ChatMessage]): A list of `ChatMessage` objects.
        Returns:
            None
        """
        options = [message.content for message in messages]
        options.append(self.input_button)
        options.append(self.kill_button)
        print_text_animated(
            self.logger_color + "\n> Proposals from "
            f"{messages[0].role_name} ({messages[0].role_type}). "
            "Please choose an option:\n")
        for index, option in enumerate(options):
            print_text_animated(
                self.logger_color +
                f"\x1b[3mOption {index + 1}:\n{option}\x1b[0m\n")
            self.options_dict[str(index + 1)] = option
    def get_input(self) -> str:
        r"""Gets the input from the user.
        Returns:
            str: The user's input.
        """
        while True:
            human_input = input(
                self.logger_color +
                f"Please enter your choice ([1-{len(self.options_dict)}]): ")
            print("\n")
            if human_input in self.options_dict:
                break
            print_text_animated(self.logger_color +
                                "\n> Invalid choice. Please try again.\n")
        return human_input
    def parse_input(self, human_input: str,
                    meta_chat_message: ChatMessage) -> ChatMessage:
        r"""Parses the user's input and returns a `ChatMessage` object.
        Args:
            human_input (str): The user's input.
            meta_chat_message (ChatMessage): A `ChatMessage` object.
        Returns:
            ChatMessage: A `ChatMessage` object.
        """
        if self.options_dict[human_input] == self.input_button:
            meta_chat_message.content = input(self.logger_color +
                                              "Please enter your message: ")
            return meta_chat_message
        elif self.options_dict[human_input] == self.kill_button:
            exit(self.logger_color + f"Killed by {self.name}.")
        else:
            meta_chat_message.content = self.options_dict[human_input]
            return meta_chat_message
    def step(self, messages: Sequence[ChatMessage]) -> ChatMessage:
        r"""Performs one step of the conversation by displaying options to the
        user, getting their input, and parsing their choice.
        Args:
            messages (Sequence[ChatMessage]): A list of ChatMessage objects.
        Returns:
            ChatMessage: A `ChatMessage` object representing the user's choice.
        """
        meta_chat_message = ChatMessage(
            role_name=messages[0].role_name,
            role_type=messages[0].role_type,
            meta_dict=messages[0].meta_dict,
            role=messages[0].role,
            content="",
        )
        self.display_options(messages)
        human_input = self.get_input()
        return self.parse_input(human_input, meta_chat_message)


/home/brandon/Projects/ChatDev/camel/agents/__init__.py

from .base import BaseAgent
from .chat_agent import ChatAgent
from .task_agent import TaskPlannerAgent, TaskSpecifyAgent
from .critic_agent import CriticAgent
from .tool_agents.base import BaseToolAgent
from .tool_agents.hugging_face_tool_agent import HuggingFaceToolAgent
from .role_playing import RolePlaying
__all__ = [
    'BaseAgent',
    'ChatAgent',
    'TaskSpecifyAgent',
    'TaskPlannerAgent',
    'CriticAgent',
    'BaseToolAgent',
    'HuggingFaceToolAgent',
    'RolePlaying',
]


/home/brandon/Projects/ChatDev/camel/agents/task_agent.py

from typing import Any, Dict, Optional, Union
from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import SystemMessage, UserChatMessage
from camel.prompts import PromptTemplateGenerator, TextPrompt
from camel.typing import ModelType, RoleType, TaskType
class TaskSpecifyAgent(ChatAgent):
    r"""An agent that Specifies a given task prompt by prompting the user to
    provide more details.
    Attributes:
        DEFAULT_WORD_LIMIT (int): The default word limit for the task prompt.
        task_specify_prompt (TextPrompt): The prompt for specifying the task.
    Args:
        model (ModelType): The type of model to use for the agent.
            (default: :obj:`ModelType.GPT_3_5_TURBO`)
        task_type (TaskType): The type of task for which to generate a prompt.
            (default: :obj:`TaskType.AI_SOCIETY`)
        model_config (Any): The configuration for the model.
            (default: :obj:`None`)
        task_specify_prompt (Optional[TextPrompt]): The prompt for specifying
            the task. (default: :obj:`None`)
        word_limit (int): The word limit for the task prompt.
            (default: :obj:`50`)
    """
    DEFAULT_WORD_LIMIT = 50
    def __init__(
        self,
        model: Optional[ModelType] = None,
        task_type: TaskType = TaskType.AI_SOCIETY,
        model_config: Optional[Any] = None,
        task_specify_prompt: Optional[Union[str, TextPrompt]] = None,
        word_limit: int = DEFAULT_WORD_LIMIT,
    ) -> None:
        if task_specify_prompt is None:
            task_specify_prompt_template = PromptTemplateGenerator(
            ).get_task_specify_prompt(task_type)
            self.task_specify_prompt = task_specify_prompt_template.format(
                word_limit=word_limit)
        else:
            self.task_specify_prompt = task_specify_prompt
        model_config = model_config or ChatGPTConfig(temperature=1.0)
        system_message = SystemMessage(
            role_name="Task Specifier",
            role_type=RoleType.ASSISTANT,
            content="You can make a task more specific.",
        )
        super().__init__(system_message, model, model_config)
    def step(
        self,
        original_task_prompt: Union[str, TextPrompt],
        meta_dict: Optional[Dict[str, Any]] = None,
    ) -> TextPrompt:
        r"""Specify the given task prompt by providing more details.
        Args:
            original_task_prompt (Union[str, TextPrompt]): The original task
                prompt.
            meta_dict (Optional[Dict[str, Any]]): A dictionary containing
                additional information to include in the prompt.
                (default: :obj:`None`)
        Returns:
            TextPrompt: The specified task prompt.
        """
        self.reset()
        self.task_specify_prompt = self.task_specify_prompt.format(
            task=original_task_prompt)
        if meta_dict is not None:
            self.task_specify_prompt = (self.task_specify_prompt.format(
                **meta_dict))
        task_msg = UserChatMessage(role_name="Task Specifier",
                                   content=self.task_specify_prompt)
        specifier_response = super().step(task_msg)
        if (specifier_response.msgs is None
                or len(specifier_response.msgs) == 0):
            raise RuntimeError("Task specification failed.")
        specified_task_msg = specifier_response.msgs[0]
        if specifier_response.terminated:
            raise RuntimeError("Task specification failed.")
        return TextPrompt(specified_task_msg.content)
class TaskPlannerAgent(ChatAgent):
    r"""An agent that helps divide a task into subtasks based on the input
    task prompt.
    Attributes:
        task_planner_prompt (TextPrompt): A prompt for the agent to divide
            the task into subtasks.
    Args:
        model (ModelType): The type of model to use for the agent.
            (default: :obj:`ModelType.GPT_3_5_TURBO`)
        model_config (Any): The configuration for the model.
            (default: :obj:`None`)
    """
    def __init__(
        self,
        model: Optional[ModelType] = None,
        model_config: Any = None,
    ) -> None:
        self.task_planner_prompt = TextPrompt(
            "Divide this task into subtasks: {task}. Be concise.")
        system_message = SystemMessage(
            role_name="Task Planner",
            role_type=RoleType.ASSISTANT,
            content="You are a helpful task planner.",
        )
        super().__init__(system_message, model, model_config)
    def step(
        self,
        task_prompt: Union[str, TextPrompt],
    ) -> TextPrompt:
        r"""Generate subtasks based on the input task prompt.
        Args:
            task_prompt (Union[str, TextPrompt]): The prompt for the task to
                be divided into subtasks.
        Returns:
            TextPrompt: A prompt for the subtasks generated by the agent.
        """
        self.reset()
        self.task_planner_prompt = self.task_planner_prompt.format(
            task=task_prompt)
        task_msg = UserChatMessage(role_name="Task Planner",
                                   content=self.task_planner_prompt)
        task_tesponse = super().step(task_msg)
        if task_tesponse.msgs is None:
            raise RuntimeError("Got None Subtasks messages.")
        if task_tesponse.terminated:
            raise RuntimeError("Task planning failed.")
        sub_tasks_msg = task_tesponse.msgs[0]
        return TextPrompt(sub_tasks_msg.content)


/home/brandon/Projects/ChatDev/camel/agents/critic_agent.py

import copy
import random
import warnings
from typing import Any, Dict, Optional, Sequence
from colorama import Fore
from camel.agents import ChatAgent
from camel.messages import ChatMessage, SystemMessage
from camel.typing import ModelType
from camel.utils import get_first_int, print_text_animated
class CriticAgent(ChatAgent):
    r"""A class for the critic agent that assists in selecting an option.
    Args:
        system_message (SystemMessage): The system message for the critic
            agent.
        model (ModelType, optional): The LLM model to use for generating
            responses. (default :obj:`ModelType.GPT_3_5_TURBO`)
        model_config (Any, optional): Configuration options for the LLM model.
            (default: :obj:`None`)
        message_window_size (int, optional): The maximum number of previous
            messages to include in the context window. If `None`, no windowing
            is performed. (default: :obj:`6`)
        retry_attempts (int, optional): The number of retry attempts if the
            critic fails to return a valid option. (default: :obj:`2`)
        verbose (bool, optional): Whether to print the critic's messages.
        logger_color (Any): The color of the menu options displayed to the
            user. (default: :obj:`Fore.MAGENTA`)
    """
    def __init__(
        self,
        system_message: SystemMessage,
        model: ModelType = ModelType.GPT_3_5_TURBO,
        model_config: Optional[Any] = None,
        message_window_size: int = 6,
        retry_attempts: int = 2,
        verbose: bool = False,
        logger_color: Any = Fore.MAGENTA,
    ) -> None:
        super().__init__(system_message, model, model_config,
                         message_window_size)
        self.options_dict: Dict[str, str] = dict()
        self.retry_attempts = retry_attempts
        self.verbose = verbose
        self.logger_color = logger_color
    def flatten_options(self, messages: Sequence[ChatMessage]) -> str:
        r"""Flattens the options to the critic.
        Args:
            messages (Sequence[ChatMessage]): A list of `ChatMessage` objects.
        Returns:
            str: A string containing the flattened options to the critic.
        """
        options = [message.content for message in messages]
        flatten_options = (
            f"> Proposals from "
            f"{messages[0].role_name} ({messages[0].role_type}). "
            "Please choose an option:\n")
        for index, option in enumerate(options):
            flatten_options += f"Option {index + 1}:\n{option}\n\n"
            self.options_dict[str(index + 1)] = option
        format = (
            f"Please first enter your choice ([1-{len(self.options_dict)}]) "
            "and then your explanation and comparison: ")
        return flatten_options + format
    def get_option(self, input_message: ChatMessage) -> str:
        r"""Gets the option selected by the critic.
        Args:
            input_message (ChatMessage): A `ChatMessage` object representing
                the input message.
        Returns:
            str: The option selected by the critic.
        """
        msg_content = input_message.content
        i = 0
        while i < self.retry_attempts:
            critic_response = super().step(input_message)
            if critic_response.msgs is None or len(critic_response.msgs) == 0:
                raise RuntimeError("Got None critic messages.")
            if critic_response.terminated:
                raise RuntimeError("Critic step failed.")
            critic_msg = critic_response.msgs[0]
            self.update_messages(critic_msg)
            if self.verbose:
                print_text_animated(self.logger_color + "\n> Critic response: "
                                    f"\x1b[3m{critic_msg.content}\x1b[0m\n")
            choice = self.parse_critic(critic_msg)
            if choice in self.options_dict:
                return self.options_dict[choice]
            else:
                input_message = ChatMessage(
                    role_name=input_message.role_name,
                    role_type=input_message.role_type,
                    meta_dict=input_message.meta_dict,
                    role=input_message.role,
                    content="> Invalid choice. Please choose again.\n" +
                    msg_content,
                )
                i += 1
        warnings.warn("Critic failed to get a valid option. "
                      f"After {self.retry_attempts} attempts. "
                      "Returning a random option.")
        return random.choice(list(self.options_dict.values()))
    def parse_critic(self, critic_msg: ChatMessage) -> Optional[str]:
        r"""Parses the critic's message and extracts the choice.
        Args:
            critic_msg (ChatMessage): A `ChatMessage` object representing the
                critic's response.
        Returns:
            Optional[str]: The critic's choice as a string, or None if the
                message could not be parsed.
        """
        choice = str(get_first_int(critic_msg.content))
        return choice
    def step(self, messages: Sequence[ChatMessage]) -> ChatMessage:
        r"""Performs one step of the conversation by flattening options to the
        critic, getting the option, and parsing the choice.
        Args:
            messages (Sequence[ChatMessage]): A list of ChatMessage objects.
        Returns:
            ChatMessage: A `ChatMessage` object representing the critic's
                choice.
        """
        meta_chat_message = ChatMessage(
            role_name=messages[0].role_name,
            role_type=messages[0].role_type,
            meta_dict=messages[0].meta_dict,
            role=messages[0].role,
            content="",
        )
        flatten_options = self.flatten_options(messages)
        if self.verbose:
            print_text_animated(self.logger_color +
                                f"\x1b[3m{flatten_options}\x1b[0m\n")
        input_msg = copy.deepcopy(meta_chat_message)
        input_msg.content = flatten_options
        option = self.get_option(input_msg.set_user_role_at_backend())
        output_msg = copy.deepcopy(meta_chat_message)
        output_msg.content = option
        return output_msg


/home/brandon/Projects/ChatDev/camel/agents/base.py

from abc import ABC, abstractmethod
class BaseAgent(ABC):
    r"""An abstract base class for all CAMEL agents."""
    @abstractmethod
    def reset(self) -> None:
        r"""Resets the agent to its initial state."""
        pass
    @abstractmethod
    def step(self) -> None:
        r"""Performs a single step of the agent."""
        pass


/home/brandon/Projects/ChatDev/camel/agents/chat_agent.py

from dataclasses import dataclass
from typing import Any, Dict, List, Optional
from tenacity import retry
from tenacity.stop import stop_after_attempt
from tenacity.wait import wait_exponential
from camel.agents import BaseAgent
from camel.configs import ChatGPTConfig
from camel.messages import ChatMessage, MessageType, SystemMessage
from camel.model_backend import ModelBackend, ModelFactory
from camel.typing import ModelType, RoleType
from camel.utils import (
    get_model_token_limit,
    num_tokens_from_messages,
    openai_api_key_required,
)
from chatdev.utils import log_visualize
try:
    from openai.types.chat import ChatCompletion
    openai_new_api = True  except ImportError:
    openai_new_api = False  @dataclass(frozen=True)
class ChatAgentResponse:
    r"""Response of a ChatAgent.
    Attributes:
        msgs (List[ChatMessage]): A list of zero, one or several messages.
            If the list is empty, there is some error in message generation.
            If the list has one message, this is normal mode.
            If the list has several messages, this is the critic mode.
        terminated (bool): A boolean indicating whether the agent decided
            to terminate the chat session.
        info (Dict[str, Any]): Extra information about the chat message.
    """
    msgs: List[ChatMessage]
    terminated: bool
    info: Dict[str, Any]
    @property
    def msg(self):
        if self.terminated:
            raise RuntimeError("error in ChatAgentResponse, info:{}".format(str(self.info)))
        if len(self.msgs) > 1:
            raise RuntimeError("Property msg is only available for a single message in msgs")
        elif len(self.msgs) == 0:
            if len(self.info) > 0:
                raise RuntimeError("Empty msgs in ChatAgentResponse, info:{}".format(str(self.info)))
            else:
                return None
        return self.msgs[0]
class ChatAgent(BaseAgent):
    r"""Class for managing conversations of CAMEL Chat Agents.
    Args:
        system_message (SystemMessage): The system message for the chat agent.
        with_memory(bool): The memory setting of the chat agent.
        model (ModelType, optional): The LLM model to use for generating
            responses. (default :obj:`ModelType.GPT_3_5_TURBO`)
        model_config (Any, optional): Configuration options for the LLM model.
            (default: :obj:`None`)
        message_window_size (int, optional): The maximum number of previous
            messages to include in the context window. If `None`, no windowing
            is performed. (default: :obj:`None`)
    """
    def __init__(
            self,
            system_message: SystemMessage,
            memory = None,
            model: Optional[ModelType] = None,
            model_config: Optional[Any] = None,
            message_window_size: Optional[int] = None,
    ) -> None:
        self.system_message: SystemMessage = system_message
        self.role_name: str = system_message.role_name
        self.role_type: RoleType = system_message.role_type
        self.model: ModelType = (model if model is not None else ModelType.GPT_3_5_TURBO)
        self.model_config: ChatGPTConfig = model_config or ChatGPTConfig()
        self.model_token_limit: int = get_model_token_limit(self.model)
        self.message_window_size: Optional[int] = message_window_size
        self.model_backend: ModelBackend = ModelFactory.create(self.model, self.model_config.__dict__)
        self.terminated: bool = False
        self.info: bool = False
        self.init_messages()
        if memory !=None and self.role_name in["Code Reviewer","Programmer","Software Test Engineer"]:
            self.memory = memory.memory_data.get("All")
        else:
            self.memory = None
    def reset(self) -> List[MessageType]:
        r"""Resets the :obj:`ChatAgent` to its initial state and returns the
        stored messages.
        Returns:
            List[MessageType]: The stored messages.
        """
        self.terminated = False
        self.init_messages()
        return self.stored_messages
    def get_info(
            self,
            id: Optional[str],
            usage: Optional[Dict[str, int]],
            termination_reasons: List[str],
            num_tokens: int,
    ) -> Dict[str, Any]:
        r"""Returns a dictionary containing information about the chat session.
        Args:
            id (str, optional): The ID of the chat session.
            usage (Dict[str, int], optional): Information about the usage of
                the LLM model.
            termination_reasons (List[str]): The reasons for the termination of
                the chat session.
            num_tokens (int): The number of tokens used in the chat session.
        Returns:
            Dict[str, Any]: The chat session information.
        """
        return {
            "id": id,
            "usage": usage,
            "termination_reasons": termination_reasons,
            "num_tokens": num_tokens,
        }
    def init_messages(self) -> None:
        r"""Initializes the stored messages list with the initial system
        message.
        """
        self.stored_messages: List[MessageType] = [self.system_message]
    def update_messages(self, message: ChatMessage) -> List[MessageType]:
        r"""Updates the stored messages list with a new message.
        Args:
            message (ChatMessage): The new message to add to the stored
                messages.
        Returns:
            List[ChatMessage]: The updated stored messages.
        """
        self.stored_messages.append(message)
        return self.stored_messages
    def use_memory(self,input_message) -> List[MessageType]:
        if self.memory is None :
            return None
        else:
            if self.role_name == "Programmer":
                result = self.memory.memory_retrieval(input_message,"code")
                if result != None:
                    target_memory,distances, mids,task_list,task_dir_list = result
                    if target_memory != None and len(target_memory) != 0:
                        target_memory="".join(target_memory)
                        log_visualize(self.role_name,
                                            "thinking back and found some related code: \n--------------------------\n"
                                            + target_memory)
                else:
                    target_memory = None
                    log_visualize(self.role_name,
                                         "thinking back but find nothing useful")
            else:
                result = self.memory.memory_retrieval(input_message, "text")
                if result != None:
                    target_memory, distances, mids, task_list, task_dir_list = result
                    if target_memory != None and len(target_memory) != 0:
                        target_memory=";".join(target_memory)
                        log_visualize(self.role_name,
                                            "thinking back and found some related text: \n--------------------------\n"
                                            + target_memory)
                else:
                    target_memory = None
                    log_visualize(self.role_name,
                                         "thinking back but find nothing useful")
        return target_memory
    @retry(wait=wait_exponential(min=5, max=60), stop=stop_after_attempt(5))
    @openai_api_key_required
    def step(
            self,
            input_message: ChatMessage,
    ) -> ChatAgentResponse:
        r"""Performs a single step in the chat session by generating a response
        to the input message.
        Args:
            input_message (ChatMessage): The input message to the agent.
        Returns:
            ChatAgentResponse: A struct
                containing the output messages, a boolean indicating whether
                the chat session has terminated, and information about the chat
                session.
        """
        messages = self.update_messages(input_message)
        if self.message_window_size is not None and len(
                messages) > self.message_window_size:
            messages = [self.system_message
                        ] + messages[-self.message_window_size:]
        openai_messages = [message.to_openai_message() for message in messages]
        num_tokens = num_tokens_from_messages(openai_messages, self.model)
        output_messages: Optional[List[ChatMessage]]
        info: Dict[str, Any]
        if num_tokens < self.model_token_limit:
            response = self.model_backend.run(messages=openai_messages)
            if openai_new_api:
                if not isinstance(response, ChatCompletion):
                    raise RuntimeError("OpenAI returned unexpected struct")
                output_messages = [
                    ChatMessage(role_name=self.role_name, role_type=self.role_type,
                                meta_dict=dict(), **dict(choice.message))
                    for choice in response.choices
                ]
                info = self.get_info(
                    response.id,
                    response.usage,
                    [str(choice.finish_reason) for choice in response.choices],
                    num_tokens,
                )
            else:
                if not isinstance(response, dict):
                    raise RuntimeError("OpenAI returned unexpected struct")
                output_messages = [
                    ChatMessage(role_name=self.role_name, role_type=self.role_type,
                                meta_dict=dict(), **dict(choice["message"]))
                    for choice in response["choices"]
                ]
                info = self.get_info(
                    response["id"],
                    response["usage"],
                    [str(choice["finish_reason"]) for choice in response["choices"]],
                    num_tokens,
                )
            if output_messages[0].content.split("\n")[-1].startswith("<INFO>"):
                self.info = True
        else:
            self.terminated = True
            output_messages = []
            info = self.get_info(
                None,
                None,
                ["max_completion_tokens_exceeded_by_camel"],
                num_tokens,
            )
        return ChatAgentResponse(output_messages, self.terminated, info)
    def __repr__(self) -> str:
        r"""Returns a string representation of the :obj:`ChatAgent`.
        Returns:
            str: The string representation of the :obj:`ChatAgent`.
        """
        return f"ChatAgent({self.role_name}, {self.role_type}, {self.model})"


/home/brandon/Projects/ChatDev/camel/agents/role_playing.py

import copy
from typing import Dict, List, Optional, Sequence, Tuple
from camel.agents import (
    ChatAgent,
    TaskPlannerAgent,
    TaskSpecifyAgent,
)
from camel.agents.chat_agent import ChatAgentResponse
from camel.messages import ChatMessage, UserChatMessage
from camel.messages import SystemMessage
from camel.typing import ModelType, RoleType, TaskType, PhaseType
from chatdev.utils import log_arguments, log_visualize
@log_arguments
class RolePlaying:
    r"""Role playing between two agents.
    Args:
        assistant_role_name (str): The name of the role played by the
            assistant.
        user_role_name (str): The name of the role played by the user.
        critic_role_name (str): The name of the role played by the critic.
            (default: :obj:`"critic"`)
        task_prompt (str, optional): A prompt for the task to be performed.
            (default: :obj:`""`)
        with_task_specify (bool, optional): Whether to use a task specify
            agent. (default: :obj:`True`)
        with_task_planner (bool, optional): Whether to use a task planner
            agent. (default: :obj:`False`)
        with_critic_in_the_loop (bool, optional): Whether to include a critic
            in the loop. (default: :obj:`False`)
        model_type (ModelType, optional): The type of backend model to use.
            (default: :obj:`ModelType.GPT_3_5_TURBO`)
        task_type (TaskType, optional): The type of task to perform.
            (default: :obj:`TaskType.AI_SOCIETY`)
        assistant_agent_kwargs (Dict, optional): Additional arguments to pass
            to the assistant agent. (default: :obj:`None`)
        user_agent_kwargs (Dict, optional): Additional arguments to pass to
            the user agent. (default: :obj:`None`)
        task_specify_agent_kwargs (Dict, optional): Additional arguments to
            pass to the task specify agent. (default: :obj:`None`)
        task_planner_agent_kwargs (Dict, optional): Additional arguments to
            pass to the task planner agent. (default: :obj:`None`)
        critic_kwargs (Dict, optional): Additional arguments to pass to the
            critic. (default: :obj:`None`)
        sys_msg_generator_kwargs (Dict, optional): Additional arguments to
            pass to the system message generator. (default: :obj:`None`)
        extend_sys_msg_meta_dicts (List[Dict], optional): A list of dicts to
            extend the system message meta dicts with. (default: :obj:`None`)
        extend_task_specify_meta_dict (Dict, optional): A dict to extend the
            task specify meta dict with. (default: :obj:`None`)
    """
    def __init__(
            self,
            assistant_role_name: str,
            user_role_name: str,
            critic_role_name: str = "critic",
            task_prompt: str = "",
            assistant_role_prompt: str = "",
            user_role_prompt: str = "",
            user_role_type: Optional[RoleType] = None,
            assistant_role_type: Optional[RoleType] = None,
            with_task_specify: bool = True,
            with_task_planner: bool = False,
            with_critic_in_the_loop: bool = False,
            critic_criteria: Optional[str] = None,
            model_type: ModelType = ModelType.GPT_3_5_TURBO,
            task_type: TaskType = TaskType.AI_SOCIETY,
            assistant_agent_kwargs: Optional[Dict] = None,
            user_agent_kwargs: Optional[Dict] = None,
            task_specify_agent_kwargs: Optional[Dict] = None,
            task_planner_agent_kwargs: Optional[Dict] = None,
            critic_kwargs: Optional[Dict] = None,
            sys_msg_generator_kwargs: Optional[Dict] = None,
            extend_sys_msg_meta_dicts: Optional[List[Dict]] = None,
            extend_task_specify_meta_dict: Optional[Dict] = None,
            background_prompt: Optional[str] = "",
            memory = None,
    ) -> None:
        self.with_task_specify = with_task_specify
        self.with_task_planner = with_task_planner
        self.with_critic_in_the_loop = with_critic_in_the_loop
        self.model_type = model_type
        self.task_type = task_type
        self.memory = memory
        if with_task_specify:
            task_specify_meta_dict = dict()
            if self.task_type in [TaskType.AI_SOCIETY, TaskType.MISALIGNMENT]:
                task_specify_meta_dict.update(
                    dict(assistant_role=assistant_role_name,
                         user_role=user_role_name))
            if extend_task_specify_meta_dict is not None:
                task_specify_meta_dict.update(extend_task_specify_meta_dict)
            task_specify_agent = TaskSpecifyAgent(
                self.model_type,
                task_type=self.task_type,
                **(task_specify_agent_kwargs or {}),
            )
            self.specified_task_prompt = task_specify_agent.step(
                task_prompt,
                meta_dict=task_specify_meta_dict,
            )
            task_prompt = self.specified_task_prompt
        else:
            self.specified_task_prompt = None
        if with_task_planner:
            task_planner_agent = TaskPlannerAgent(
                self.model_type,
                **(task_planner_agent_kwargs or {}),
            )
            self.planned_task_prompt = task_planner_agent.step(task_prompt)
            task_prompt = f"{task_prompt}\n{self.planned_task_prompt}"
        else:
            self.planned_task_prompt = None
        self.task_prompt = task_prompt
        sys_msg_meta_dicts = [dict(chatdev_prompt=background_prompt, task=task_prompt)] * 2
        if (extend_sys_msg_meta_dicts is None and self.task_type in [TaskType.AI_SOCIETY, TaskType.MISALIGNMENT,
                                                                     TaskType.CHATDEV]):
            extend_sys_msg_meta_dicts = [dict(assistant_role=assistant_role_name, user_role=user_role_name)] * 2
        if extend_sys_msg_meta_dicts is not None:
            sys_msg_meta_dicts = [{**sys_msg_meta_dict, **extend_sys_msg_meta_dict} for
                                  sys_msg_meta_dict, extend_sys_msg_meta_dict in
                                  zip(sys_msg_meta_dicts, extend_sys_msg_meta_dicts)]
        self.assistant_sys_msg = SystemMessage(role_name=assistant_role_name, role_type=RoleType.DEFAULT,
                                               meta_dict=sys_msg_meta_dicts[0],
                                               content=assistant_role_prompt.format(**sys_msg_meta_dicts[0]))
        self.user_sys_msg = SystemMessage(role_name=user_role_name, role_type=RoleType.DEFAULT,
                                          meta_dict=sys_msg_meta_dicts[1],
                                          content=user_role_prompt.format(**sys_msg_meta_dicts[1]))
        self.assistant_agent: ChatAgent = ChatAgent(self.assistant_sys_msg, memory, model_type,
                                                    **(assistant_agent_kwargs or {}), )
        self.user_agent: ChatAgent = ChatAgent(self.user_sys_msg,memory, model_type, **(user_agent_kwargs or {}), )
        if with_critic_in_the_loop:
            raise ValueError("with_critic_in_the_loop not available")
        else:
            self.critic = None
    def init_chat(self, phase_type: PhaseType = None,
                  placeholders=None, phase_prompt=None):
        r"""Initializes the chat by resetting both the assistant and user
        agents, and sending the system messages again to the agents using
        chat messages. Returns the assistant's introductory message and the
        user's response messages.
        Returns:
            A tuple containing an `AssistantChatMessage` representing the
            assistant's introductory message, and a list of `ChatMessage`s
            representing the user's response messages.
        """
        if placeholders is None:
            placeholders = {}
        self.assistant_agent.reset()
        self.user_agent.reset()
        content = phase_prompt.format(
            **({"assistant_role": self.assistant_agent.role_name} | placeholders)
        )
        retrieval_memory = self.assistant_agent.use_memory(content)
        if retrieval_memory!= None:
            placeholders["examples"] = retrieval_memory
        user_msg = UserChatMessage(
            role_name=self.user_sys_msg.role_name,
            role="user",
            content=content
        )
        pseudo_msg = copy.deepcopy(user_msg)
        pseudo_msg.role = "assistant"
        self.user_agent.update_messages(pseudo_msg)
        log_visualize(self.user_agent.role_name,
                      "**[Start Chat]**\n\n[" + self.assistant_agent.system_message.content + "]\n\n" + content)
        return None, user_msg
    def process_messages(
            self,
            messages: Sequence[ChatMessage],
    ) -> ChatMessage:
        r"""Processes a list of chat messages, returning the processed message.
        If multiple messages are provided and `with_critic_in_the_loop`
        is `False`, raises a `ValueError`. If no messages are provided, also
        raises a `ValueError`.
        Args:
            messages:
        Returns:
            A single `ChatMessage` representing the processed message.
        """
        if len(messages) == 0:
            raise ValueError("No messages to process.")
        if len(messages) > 1 and not self.with_critic_in_the_loop:
            raise ValueError("Got than one message to process. "
                             f"Num of messages: {len(messages)}.")
        elif self.with_critic_in_the_loop and self.critic is not None:
            processed_msg = self.critic.step(messages)
        else:
            processed_msg = messages[0]
        return processed_msg
    def step(
            self,
            user_msg: ChatMessage,
            assistant_only: bool,
    ) -> Tuple[ChatAgentResponse, ChatAgentResponse]:
        assert isinstance(user_msg, ChatMessage), print("broken user_msg: " + str(user_msg))
        user_msg_rst = user_msg.set_user_role_at_backend()
        assistant_response = self.assistant_agent.step(user_msg_rst)
        if assistant_response.terminated or assistant_response.msgs is None:
            return (
                ChatAgentResponse([assistant_response.msgs], assistant_response.terminated, assistant_response.info),
                ChatAgentResponse([], False, {}))
        assistant_msg = self.process_messages(assistant_response.msgs)
        if self.assistant_agent.info:
            return (ChatAgentResponse([assistant_msg], assistant_response.terminated, assistant_response.info),
                    ChatAgentResponse([], False, {}))
        self.assistant_agent.update_messages(assistant_msg)
        if assistant_only:
            return (
                ChatAgentResponse([assistant_msg], assistant_response.terminated, assistant_response.info),
                ChatAgentResponse([], False, {})
            )
        assistant_msg_rst = assistant_msg.set_user_role_at_backend()
        user_response = self.user_agent.step(assistant_msg_rst)
        if user_response.terminated or user_response.msgs is None:
            return (ChatAgentResponse([assistant_msg], assistant_response.terminated, assistant_response.info),
                    ChatAgentResponse([user_response], user_response.terminated, user_response.info))
        user_msg = self.process_messages(user_response.msgs)
        if self.user_agent.info:
            return (ChatAgentResponse([assistant_msg], assistant_response.terminated, assistant_response.info),
                    ChatAgentResponse([user_msg], user_response.terminated, user_response.info))
        self.user_agent.update_messages(user_msg)
        return (
            ChatAgentResponse([assistant_msg], assistant_response.terminated, assistant_response.info),
            ChatAgentResponse([user_msg], user_response.terminated, user_response.info),
        )


/home/brandon/Projects/ChatDev/camel/agents/tool_agents/__init__.py

from .base import BaseToolAgent
from .hugging_face_tool_agent import HuggingFaceToolAgent
__all__ = [
    'BaseToolAgent',
    'HuggingFaceToolAgent',
]


/home/brandon/Projects/ChatDev/camel/agents/tool_agents/base.py

from camel.agents import BaseAgent
class BaseToolAgent(BaseAgent):
    r"""Creates a :obj:`BaseToolAgent` object with the specified name and
        description.
    Args:
        name (str): The name of the tool agent.
        description (str): The description of the tool agent.
    """
    def __init__(self, name: str, description: str) -> None:
        self.name = name
        self.description = description
    def __str__(self) -> str:
        return f"{self.name}: {self.description}"


/home/brandon/Projects/ChatDev/camel/agents/tool_agents/hugging_face_tool_agent.py

from typing import Any, Optional
from camel.agents.tool_agents import BaseToolAgent
class HuggingFaceToolAgent(BaseToolAgent):
    r"""Tool agent for calling HuggingFace models. This agent is a wrapper
        around agents from the `transformers` library. For more information
        about the available models, please see the `transformers` documentation
        at https://huggingface.co/docs/transformers/transformers_agents.
    Args:
        name (str): The name of the agent.
        *args (Any): Additional positional arguments to pass to the underlying
            Agent class.
        remote (bool, optional): Flag indicating whether to run the agent
            remotely. (default: :obj:`True`)
        **kwargs (Any): Additional keyword arguments to pass to the underlying
            Agent class.
    """
    def __init__(
        self,
        name: str,
        *args: Any,
        remote: bool = True,
        **kwargs: Any,
    ) -> None:
        try:
            from transformers.tools import OpenAiAgent
        except ImportError:
            raise ValueError(
                "Could not import transformers tool agents. "
                "Please setup the environment with "
                "pip install huggingface_hub==0.14.1 transformers==4.29.0 diffusers accelerate datasets torch soundfile sentencepiece opencv-python"
            )
        self.agent = OpenAiAgent(*args, **kwargs)
        self.name = name
        self.remote = remote
        self.description = f"""The `{self.name}` is a tool agent that can perform a variety of tasks including:
- Document question answering: given a document (such as a PDF) in image format, answer a question on this document
- Text question answering: given a long text and a question, answer the question in the text
- Unconditional image captioning: Caption the image!
- Image question answering: given an image, answer a question on this image
- Image segmentation: given an image and a prompt, output the segmentation mask of that prompt
- Speech to text: given an audio recording of a person talking, transcribe the speech into text
- Text to speech: convert text to speech
- Zero-shot text classification: given a text and a list of labels, identify to which label the text corresponds the most
- Text summarization: summarize a long text in one or a few sentences
- Translation: translate the text into a given language
- Text downloading: to download a text from a web URL
- Text to image: generate an image according to a prompt, leveraging stable diffusion
- Image transformation: modify an image given an initial image and a prompt, leveraging instruct pix2pix stable diffusion
- Text to video: generate a small video according to a prompt
Here are some python code examples of what you can do with this agent:
Single execution (step) mode, the single execution method is when using the step() method of the agent:
```
rivers_and_lakes_image = {self.name}.step("Draw me a picture of rivers and lakes.")
rivers_and_lakes_image.save("./rivers_and_lakes_image.png")
sea_add_island_image = {self.name}.step("Draw me a picture of the sea then transform the picture to add an island")
sea_add_island_image.save("./sea_add_island_image.png")
picture = {self.name}.step("Generate a picture of rivers and lakes.")
picture.save("./picture.png")
updated_picture = {self.name}.step("Transform the image in `picture` to add an island to it.", picture=picture)
updated_picture.save("./updated_picture.png")
capybara_sea_image = {self.name}.step("Draw me a picture of the `prompt`", prompt="a capybara swimming in the sea")
capybara_sea_image.save("./capybara_sea_image.png")
answer = {self.name}.step(
    "In the following `document`, where will the TRRF Scientific Advisory Council Meeting take place?",
    document=document,
)
print(answer)
boat_image = {self.name}.step("Generate an image of a boat in the water")
boat_image.save("./boat_image.png")
boat_image_caption = {self.name}.step("Can you caption the `boat_image`?", boat_image=boat_image)
print(boat_image_caption)
boat_audio = {self.name}.step("Can you generate an image of a boat? Please read out loud the contents of the image afterwards")
document = {self.name}.step("Download the text from http://hf.co")
print(document)
summary = {self.name}.step("Summarize the following text: `document`", document=document)
print(summary)
audio = {self.name}.step("Read out loud the summary of http://hf.co")
```
Chat-based execution (chat), the agent also has a chat-based approach, using the chat() method:
```
{self.name}.reset()
capybara_image = {self.name}.chat("Show me an an image of a capybara")
capybara_image.save("./capybara_image.png")
transformed_capybara_image = {self.name}.chat("Transform the image so that it snows")
transformed_capybara_image.save("./transformed_capybara_image.png")
segmented_transformed_capybara_image = {self.name}.chat("Show me a mask of the snowy capybaras")
segmented_transformed_capybara_image.save("./segmented_transformed_capybara_image.png")
```
"""
    def reset(self) -> None:
        r"""Resets the chat history of the agent."""
        self.agent.prepare_for_new_chat()
    def step(
        self,
        *args: Any,
        remote: Optional[bool] = None,
        **kwargs: Any,
    ) -> Any:
        r"""Runs the agent in single execution mode.
        Args:
            *args (Any): Positional arguments to pass to the agent.
            remote (bool, optional): Flag indicating whether to run the agent
                remotely. Overrides the default setting. (default: :obj:`None`)
            **kwargs (Any): Keyword arguments to pass to the agent.
        Returns:
            str: The response from the agent.
        """
        if remote is None:
            remote = self.remote
        return self.agent.run(*args, remote=remote, **kwargs)
    def chat(
        self,
        *args: Any,
        remote: Optional[bool] = None,
        **kwargs: Any,
    ) -> Any:
        r"""Runs the agent in a chat conversation mode.
        Args:
            *args (Any): Positional arguments to pass to the agent.
            remote (bool, optional): Flag indicating whether to run the agent
                remotely. Overrides the default setting. (default: :obj:`None`)
            **kwargs (Any): Keyword arguments to pass to the agent.
        Returns:
            str: The response from the agent.
        """
        if remote is None:
            remote = self.remote
        return self.agent.chat(*args, remote=remote, **kwargs)


/home/brandon/Projects/ChatDev/camel/messages/__init__.py

from typing import Dict, Union
OpenAISystemMessage = Dict[str, str]
OpenAIAssistantMessage = Dict[str, str]
OpenAIUserMessage = Dict[str, str]
OpenAIChatMessage = Union[OpenAIUserMessage, OpenAIAssistantMessage]
OpenAIMessage = Union[OpenAISystemMessage, OpenAIChatMessage]
from .base import BaseMessage  from .system_messages import (      SystemMessage, AssistantSystemMessage, UserSystemMessage,
)
from .chat_messages import (      ChatMessage, AssistantChatMessage, UserChatMessage,
)
MessageType = Union[BaseMessage, SystemMessage, AssistantSystemMessage,
                    UserSystemMessage, ChatMessage, AssistantChatMessage,
                    UserChatMessage]
SystemMessageType = Union[SystemMessage, AssistantSystemMessage,
                          UserSystemMessage]
ChatMessageType = Union[ChatMessage, AssistantChatMessage, UserChatMessage]
__all__ = [
    'OpenAISystemMessage',
    'OpenAIAssistantMessage',
    'OpenAIUserMessage',
    'OpenAIChatMessage',
    'OpenAIMessage',
    'BaseMessage',
    'SystemMessage',
    'AssistantSystemMessage',
    'UserSystemMessage',
    'ChatMessage',
    'AssistantChatMessage',
    'UserChatMessage',
    'MessageType',
    'SystemMessageType',
    'ChatMessageType',
]


/home/brandon/Projects/ChatDev/camel/messages/system_messages.py

from dataclasses import dataclass
from typing import Dict, Optional
from camel.messages import BaseMessage
from camel.typing import RoleType
@dataclass
class SystemMessage(BaseMessage):
    r"""Class for system messages used in CAMEL chat system.
    Args:
        role_name (str): The name of the user or assistant role.
        role_type (RoleType): The type of role, either
            :obj:`RoleType.ASSISTANT` or :obj:`RoleType.USER`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
            (default: :obj:`"system"`)
        content (str): The content of the message. (default: :obj:`""`)
    """
    role_name: str
    role_type: RoleType
    meta_dict: Optional[Dict[str, str]] = None
    role: str = "system"
    content: str = ""
@dataclass
class AssistantSystemMessage(SystemMessage):
    r"""Class for system messages from the assistant used in the CAMEL chat
    system.
    Args:
        role_name (str): The name of the assistant role.
        role_type (RoleType): The type of role, always
            :obj:`RoleType.ASSISTANT`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
            (default: :obj:`"system"`)
        content (str): The content of the message. (default: :obj:`""`)
    """
    role_name: str
    role_type: RoleType = RoleType.ASSISTANT
    meta_dict: Optional[Dict[str, str]] = None
    role: str = "system"
    content: str = ""
@dataclass
class UserSystemMessage(SystemMessage):
    r"""Class for system messages from the user used in the CAMEL chat system.
    Args:
        role_name (str): The name of the user role.
        role_type (RoleType): The type of role, always :obj:`RoleType.USER`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
            (default: :obj:`"system"`)
        content (str): The content of the message. (default: :obj:`""`)
    """
    role_name: str
    role_type: RoleType = RoleType.USER
    meta_dict: Optional[Dict[str, str]] = None
    role: str = "system"
    content: str = ""


/home/brandon/Projects/ChatDev/camel/messages/base.py

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Tuple, Union
from camel.messages import (
    OpenAIAssistantMessage,
    OpenAIChatMessage,
    OpenAIMessage,
    OpenAISystemMessage,
    OpenAIUserMessage,
)
from camel.prompts import CodePrompt, TextPrompt
from camel.typing import ModelType, RoleType
try:
    from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall
    from openai.types.chat.chat_completion_message import FunctionCall
    openai_new_api = True  except ImportError:
    openai_new_api = False  @dataclass
class BaseMessage:
    r"""Base class for message objects used in CAMEL chat system.
    Args:
        role_name (str): The name of the user or assistant role.
        role_type (RoleType): The type of role, either
            :obj:`RoleType.ASSISTANT` or :obj:`RoleType.USER`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system, either
            :obj:`"system"`, :obj:`"user"`, or :obj:`"assistant"`.
        content (str): The content of the message.
    """
    role_name: str
    role_type: RoleType
    meta_dict: Optional[Dict[str, str]]
    role: str
    content: str
    if openai_new_api:
        function_call: Optional[FunctionCall] = None
        tool_calls: Optional[ChatCompletionMessageToolCall] = None
    def __getattribute__(self, name: str) -> Any:
        r"""Get attribute override to delegate string methods to the
        :obj:`content`.
        Args:
            name (str): The name of the attribute.
        Returns:
            Any: The attribute value.
        """
        delegate_methods = [
            method for method in dir(str) if not method.startswith('_')
        ]
        if name in delegate_methods:
            content = super().__getattribute__('content')
            if isinstance(content, str):
                content_method = getattr(content, name, None)
                if callable(content_method):
                    def modify_arg(arg: Any) -> Any:
                        r"""Modify the argument for delegate method.
                        Args:
                            arg (Any): The argument value.
                        Returns:
                            Any: The modified argument value.
                        """
                        if isinstance(arg, BaseMessage):
                            return arg.content
                        elif isinstance(arg, (list, tuple)):
                            return type(arg)(modify_arg(item) for item in arg)
                        else:
                            return arg
                    def wrapper(*args: Any, **kwargs: Any) -> Any:
                        r"""Wrapper function for delegate method.
                        Args:
                            *args (Any): Variable length argument list.
                            **kwargs (Any): Arbitrary keyword arguments.
                        Returns:
                            Any: The result of the delegate method.
                        """
                        modified_args = [modify_arg(arg) for arg in args]
                        modified_kwargs = {
                            k: modify_arg(v)
                            for k, v in kwargs.items()
                        }
                        output = content_method(*modified_args,
                                                **modified_kwargs)
                        return self._create_new_instance(output) if isinstance(
                            output, str) else output
                    return wrapper
        return super().__getattribute__(name)
    def _create_new_instance(self, content: str) -> "BaseMessage":
        r"""Create a new instance of the :obj:`BaseMessage` with updated
        content.
        Args:
            content (str): The new content value.
        Returns:
            BaseMessage: The new instance of :obj:`BaseMessage`.
        """
        return self.__class__(role_name=self.role_name,
                              role_type=self.role_type,
                              meta_dict=self.meta_dict, role=self.role,
                              content=content)
    def __add__(self, other: Any) -> Union["BaseMessage", Any]:
        r"""Addition operator override for :obj:`BaseMessage`.
        Args:
            other (Any): The value to be added with.
        Returns:
            Union[BaseMessage, Any]: The result of the addition.
        """
        if isinstance(other, BaseMessage):
            combined_content = self.content.__add__(other.content)
        elif isinstance(other, str):
            combined_content = self.content.__add__(other)
        else:
            raise TypeError(
                f"Unsupported operand type(s) for +: '{type(self)}' and "
                f"'{type(other)}'")
        return self._create_new_instance(combined_content)
    def __mul__(self, other: Any) -> Union["BaseMessage", Any]:
        r"""Multiplication operator override for :obj:`BaseMessage`.
        Args:
            other (Any): The value to be multiplied with.
        Returns:
            Union[BaseMessage, Any]: The result of the multiplication.
        """
        if isinstance(other, int):
            multiplied_content = self.content.__mul__(other)
            return self._create_new_instance(multiplied_content)
        else:
            raise TypeError(
                f"Unsupported operand type(s) for *: '{type(self)}' and "
                f"'{type(other)}'")
    def __len__(self) -> int:
        r"""Length operator override for :obj:`BaseMessage`.
        Returns:
            int: The length of the content.
        """
        return len(self.content)
    def __contains__(self, item: str) -> bool:
        r"""Contains operator override for :obj:`BaseMessage`.
        Args:
            item (str): The item to check for containment.
        Returns:
            bool: :obj:`True` if the item is contained in the content,
                :obj:`False` otherwise.
        """
        return item in self.content
    def token_len(self, model: ModelType = ModelType.GPT_3_5_TURBO) -> int:
        r"""Calculate the token length of the message for the specified model.
        Args:
            model (ModelType, optional): The model type to calculate the token
                length. (default: :obj:`ModelType.GPT_3_5_TURBO`)
        Returns:
            int: The token length of the message.
        """
        from camel.utils import num_tokens_from_messages
        return num_tokens_from_messages([self.to_openai_chat_message()], model)
    def extract_text_and_code_prompts(
            self) -> Tuple[List[TextPrompt], List[CodePrompt]]:
        r"""Extract text and code prompts from the message content.
        Returns:
            Tuple[List[TextPrompt], List[CodePrompt]]: A tuple containing a
                list of text prompts and a list of code prompts extracted
                from the content.
        """
        text_prompts: List[TextPrompt] = []
        code_prompts: List[CodePrompt] = []
        lines = self.content.split("\n")
        idx = 0
        start_idx = 0
        while idx < len(lines):
            while idx < len(lines) and (
                    not lines[idx].lstrip().startswith("```")):
                idx += 1
            text = "\n".join(lines[start_idx:idx]).strip()
            text_prompts.append(TextPrompt(text))
            if idx >= len(lines):
                break
            code_type = lines[idx].strip()[3:].strip()
            idx += 1
            start_idx = idx
            while not lines[idx].lstrip().startswith("```"):
                idx += 1
            code = "\n".join(lines[start_idx:idx]).strip()
            code_prompts.append(CodePrompt(code, code_type=code_type))
            idx += 1
            start_idx = idx
        return text_prompts, code_prompts
    def to_openai_message(self, role: Optional[str] = None) -> OpenAIMessage:
        r"""Converts the message to an :obj:`OpenAIMessage` object.
        Args:
            role (Optional[str]): The role of the message in OpenAI chat
                system, either :obj:`"system"`, :obj:`"user"`, or
                obj:`"assistant"`. (default: :obj:`None`)
        Returns:
            OpenAIMessage: The converted :obj:`OpenAIMessage` object.
        """
        role = role or self.role
        if role not in {"system", "user", "assistant"}:
            raise ValueError(f"Unrecognized role: {role}")
        return {"role": role, "content": self.content}
    def to_openai_chat_message(
        self,
        role: Optional[str] = None,
    ) -> OpenAIChatMessage:
        r"""Converts the message to an :obj:`OpenAIChatMessage` object.
        Args:
            role (Optional[str]): The role of the message in OpenAI chat
                system, either :obj:`"user"`, or :obj:`"assistant"`.
                (default: :obj:`None`)
        Returns:
            OpenAIChatMessage: The converted :obj:`OpenAIChatMessage` object.
        """
        role = role or self.role
        if role not in {"user", "assistant"}:
            raise ValueError(f"Unrecognized role: {role}")
        return {"role": role, "content": self.content}
    def to_openai_system_message(self) -> OpenAISystemMessage:
        r"""Converts the message to an :obj:`OpenAISystemMessage` object.
        Returns:
            OpenAISystemMessage: The converted :obj:`OpenAISystemMessage`
                object.
        """
        return {"role": "system", "content": self.content}
    def to_openai_user_message(self) -> OpenAIUserMessage:
        r"""Converts the message to an :obj:`OpenAIUserMessage` object.
        Returns:
            OpenAIUserMessage: The converted :obj:`OpenAIUserMessage` object.
        """
        return {"role": "user", "content": self.content}
    def to_openai_assistant_message(self) -> OpenAIAssistantMessage:
        r"""Converts the message to an :obj:`OpenAIAssistantMessage` object.
        Returns:
            OpenAIAssistantMessage: The converted :obj:`OpenAIAssistantMessage`
                object.
        """
        return {"role": "assistant", "content": self.content}
    def to_dict(self) -> Dict:
        r"""Converts the message to a dictionary.
        Returns:
            dict: The converted dictionary.
        """
        return {
            "role_name": self.role_name,
            "role_type": self.role_type.name,
            **(self.meta_dict or {}),
            "role": self.role,
            "content": self.content,
        }


/home/brandon/Projects/ChatDev/camel/messages/chat_messages.py

from dataclasses import dataclass
from typing import Dict, Optional
from camel.messages import BaseMessage
from camel.typing import RoleType
try:
    from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall
    from openai.types.chat.chat_completion_message import FunctionCall
    openai_new_api = True  except ImportError:
    openai_new_api = False  @dataclass
class ChatMessage(BaseMessage):
    r"""Base class for chat messages used in CAMEL chat system.
    Args:
        role_name (str): The name of the user or assistant role.
        role_type (RoleType): The type of role, either
            :obj:`RoleType.ASSISTANT` or :obj:`RoleType.USER`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
        content (str): The content of the message. (default: :obj:`""`)
        refusal (str): The refusal to build argument.
        audio (object): The audio contains data about the audio response from the model.
    """
    role_name: str
    role_type: RoleType
    meta_dict: Optional[Dict[str, str]]
    role: str
    content: str = ""
    refusal: str = None
    audio: object = None
    if openai_new_api:
        function_call: Optional[FunctionCall] = None
        tool_calls: Optional[ChatCompletionMessageToolCall] = None
    def set_user_role_at_backend(self: BaseMessage):
        return self.__class__(
            role_name=self.role_name,
            role_type=self.role_type,
            meta_dict=self.meta_dict,
            role="user",
            content=self.content,
            refusal=self.refusal,
        )
@dataclass
class AssistantChatMessage(ChatMessage):
    r"""Class for chat messages from the assistant role used in CAMEL chat
    system.
    Attributes:
        role_name (str): The name of the assistant role.
        role_type (RoleType): The type of role, always
            :obj:`RoleType.ASSISTANT`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
            (default: :obj:`"assistant"`)
        content (str): The content of the message. (default: :obj:`""`)
        refusal (str): The refusal to build argument.
        audio (object): The audio contains data about the audio response from the model.
    """
    role_name: str
    role_type: RoleType = RoleType.ASSISTANT
    meta_dict: Optional[Dict[str, str]] = None
    role: str = "user"
    content: str = ""
    refusal: str = None
    audio: object = None
@dataclass
class UserChatMessage(ChatMessage):
    r"""Class for chat messages from the user role used in CAMEL chat system.
    Args:
        role_name (str): The name of the user role.
        role_type (RoleType): The type of role, always :obj:`RoleType.USER`.
        meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
            for the message.
        role (str): The role of the message in OpenAI chat system.
            (default: :obj:`"user"`)
        content (str): The content of the message. (default: :obj:`""`)
        refusal (str): The refusal to build argument.
        audio (object): The audio contains data about the audio response from the model.
    """
    role_name: str
    role_type: RoleType = RoleType.USER
    meta_dict: Optional[Dict[str, str]] = None
    role: str = "user"
    content: str = ""
    refusal: str = None
    audio: object = None


/home/brandon/Projects/ChatDev/camel/prompts/__init__.py

from .base import TextPrompt, CodePrompt, TextPromptDict
from .task_prompt_template import TaskPromptTemplateDict
from .prompt_templates import PromptTemplateGenerator
__all__ = [
    'TextPrompt',
    'TextPromptDict',
    'TaskPromptTemplateDict',
    'PromptTemplateGenerator',
]


/home/brandon/Projects/ChatDev/camel/prompts/base.py

import inspect
from typing import Any, Callable, Dict, Optional, Set, Tuple, TypeVar, Union
from camel.typing import RoleType
T = TypeVar('T')
def return_prompt_wrapper(
    cls: T,
    func: Callable,
) -> Callable[..., Union[T, tuple]]:
    r"""Wrapper that converts the return value of a function to an input
    class instance if it's a string.
    Args:
        cls (type): The class to convert to.
        func (Callable): The function to decorate.
    Returns:
        Callable[..., Union[T, tuple]]: Decorated function that
            returns the decorated class instance if the return value is a
            string.
    """
    def wrapper(*args: Any, **kwargs: Any) -> Union[T, tuple]:
        r"""Wrapper function that performs the conversion to :obj:`TextPrompt`
            instance.
        Args:
            *args (Any): Variable length argument list.
            **kwargs (Any): Arbitrary keyword arguments.
        Returns:
            Union[TextPrompt, tuple]: The converted return value.
        """
        result = func(*args, **kwargs)
        if isinstance(result, str) and not isinstance(result, cls):
            return cls(result)
        elif isinstance(result, tuple):
            new_result = tuple(
                cls(item) if isinstance(item, str)
                and not isinstance(item, cls) else item for item in result)
            return new_result
        return result
    wrapper.__name__ = func.__name__
    wrapper.__doc__ = func.__doc__
    return wrapper
def wrap_prompt_functions(cls: T) -> T:
    r"""Decorator that wraps functions of a class inherited from :obj:`str`
    with the :obj:`return_text_prompt` decorator.
    Args:
        cls (type): The class to decorate.
    Returns:
        type: Decorated class with wrapped functions.
    """
    excluded_attrs = {'__init__', '__new__', '__str__', '__repr__'}
    for attr_name in dir(cls):
        attr_value = getattr(cls, attr_name)
        if callable(attr_value) and attr_name not in excluded_attrs:
            if inspect.isroutine(attr_value):
                setattr(cls, attr_name, return_prompt_wrapper(cls, attr_value))
    return cls
@wrap_prompt_functions
class TextPrompt(str):
    r"""A class that represents a text prompt. The :obj:`TextPrompt` class
    extends the built-in :obj:`str` class to provide a property for retrieving
    the set of key words in the prompt.
    Attributes:
        key_words (set): A set of strings representing the key words in the
            prompt.
    """
    @property
    def key_words(self) -> Set[str]:
        r"""Returns a set of strings representing the key words in the prompt.
        """
        from camel.utils import get_prompt_template_key_words
        return get_prompt_template_key_words(self)
    def format(self, *args: Any, **kwargs: Any) -> 'TextPrompt':
        r"""Overrides the built-in :obj:`str.format` method to allow for
        default values in the format string. This is used to allow formatting
        the partial string.
        Args:
            *args (Any): Variable length argument list.
            **kwargs (Any): Arbitrary keyword arguments.
        Returns:
            TextPrompt: A new :obj:`TextPrompt` object with the format string
                replaced with the formatted string.
        """
        default_kwargs = {key: '{' + f'{key}' + '}' for key in self.key_words}
        default_kwargs.update(kwargs)
        return TextPrompt(super().format(*args, **default_kwargs))
@wrap_prompt_functions
class CodePrompt(TextPrompt):
    r"""A class that represents a code prompt. It extends the :obj:`TextPrompt`
    class with a :obj:`code_type` property.
    Args:
        code_string (str): The code string for the prompt.
        code_type (str, optional): The type of code. Defaults to None.
    """
    def __new__(cls, *args: Any, **kwargs: Any) -> 'CodePrompt':
        r"""Creates a new instance of the :obj:`CodePrompt` class.
        Args:
            *args (Any): Positional arguments.
            **kwargs (Any): Keyword arguments.
        Returns:
            CodePrompt: The created :obj:`CodePrompt` instance.
        """
        code_type = kwargs.pop('code_type', None)
        instance = super().__new__(cls, *args, **kwargs)
        instance._code_type = code_type
        return instance
    @property
    def code_type(self) -> Optional[str]:
        r"""Returns the type of code.
        Returns:
            Optional[str]: The type of code.
        """
        return self._code_type
    def set_code_type(self, code_type: str) -> None:
        r"""Sets the type of code.
        Args:
            code_type (str): The type of code.
        """
        self._code_type = code_type
    def execute(
            self,
            global_vars: Optional[Dict] = None) -> Tuple[str, Optional[Dict]]:
        r"""Executes the code string. If there is an error, the error is caught
        and the traceback is returned. Otherwise, the output string and local
        variables are returned.
        Args:
            global_vars (Dict, optional): Global variables to be used during
                code execution. (default: :obj:`None`)
        Returns:
            Tuple[str, Optional[Dict]]: A tuple containing the output string
                and local variables.
        """
        try:
            import io
            import sys
            output_str = io.StringIO()
            sys.stdout = output_str
            global_vars = global_vars or globals()
            local_vars = {}
            exec(
                self,
                global_vars,
                local_vars,
            )
            sys.stdout = sys.__stdout__
            output_str.seek(0)
            return output_str.read(), local_vars
        except Exception:
            import traceback
            traceback_str = traceback.format_exc()
            sys.stdout = sys.__stdout__
            return traceback_str, None
class TextPromptDict(Dict[Any, TextPrompt]):
    r"""A dictionary class that maps from key to :obj:`TextPrompt` object.
    """
    EMBODIMENT_PROMPT = TextPrompt(
        """You are the physical embodiment of the {role} who is working on solving a task: {task}.
You can do things in the physical world including browsing the Internet, reading documents, drawing images, creating videos, executing code and so on.
Your job is to perform the physical actions necessary to interact with the physical world.
You will receive thoughts from the {role} and you will need to perform the actions described in the thoughts.
You can write a series of simple commands in Python to act.
You can perform a set of actions by calling the available Python functions.
You should perform actions based on the descriptions of the functions.
Here is your action space:
{action_space}
You should only perform actions in the action space.
You can perform multiple actions.
You can perform actions in any order.
First, explain the actions you will perform and your reasons, then write Python code to implement your actions.
If you decide to perform actions, you must write Python code to implement the actions.
You may print intermediate results if necessary.""")
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.update({RoleType.EMBODIMENT: self.EMBODIMENT_PROMPT})


/home/brandon/Projects/ChatDev/camel/prompts/prompt_templates.py

import warnings
from typing import Any, Optional
from camel.prompts import TaskPromptTemplateDict, TextPrompt
from camel.typing import RoleType, TaskType
class PromptTemplateGenerator:
    r"""A class for generating prompt templates for tasks.
    Args:
        task_prompt_template_dict (TaskPromptTemplateDict, optional):
            A dictionary of task prompt templates for each task type. If not
            provided, an empty dictionary is used as default.
    """
    def __init__(
        self,
        task_prompt_template_dict: Optional[TaskPromptTemplateDict] = None,
    ) -> None:
        self.task_prompt_template_dict = (task_prompt_template_dict or TaskPromptTemplateDict())
    def get_prompt_from_key(self, task_type: TaskType, key: Any) -> TextPrompt:
        r"""Generates a text prompt using the specified :obj:`task_type` and
        :obj:`key`.
        Args:
            task_type (TaskType): The type of task.
            key (Any): The key used to generate the prompt.
        Returns:
            TextPrompt: The generated text prompt.
        Raises:
            KeyError: If failed to generate prompt using the specified
                :obj:`task_type` and :obj:`key`.
        """
        try:
            print(task_type, key)
            return self.task_prompt_template_dict[task_type][key]
        except KeyError:
            raise KeyError("Failed to get generate prompt template for "
                           f"task: {task_type.value} from key: {key}.")
    def get_system_prompt(
        self,
        task_type: TaskType,
        role_type: RoleType,
    ) -> TextPrompt:
        r"""Generates a text prompt for the system role, using the specified
        :obj:`task_type` and :obj:`role_type`.
        Args:
            task_type (TaskType): The type of task.
            role_type (RoleType): The type of role, either "USER" or
                "ASSISTANT".
        Returns:
            TextPrompt: The generated text prompt.
        Raises:
            KeyError: If failed to generate prompt using the specified
                :obj:`task_type` and :obj:`role_type`.
        """
        try:
            return self.get_prompt_from_key(task_type, role_type)
        except KeyError:
            prompt = "You are a helpful assistant."
            warnings.warn("Failed to get system prompt template for "
                          f"task: {task_type.value}, role: {role_type.value}. "
                          f"Set template to: {prompt}")
        return TextPrompt(prompt)
    def get_generate_tasks_prompt(
        self,
        task_type: TaskType,
    ) -> TextPrompt:
        r"""Gets the prompt for generating tasks for a given task type.
        Args:
            task_type (TaskType): The type of the task.
        Returns:
            TextPrompt: The generated prompt for generating tasks.
        """
        return self.get_prompt_from_key(task_type, "generate_tasks")
    def get_task_specify_prompt(
        self,
        task_type: TaskType,
    ) -> TextPrompt:
        r"""Gets the prompt for specifying a task for a given task type.
        Args:
            task_type (TaskType): The type of the task.
        Returns:
            TextPrompt: The generated prompt for specifying a task.
        """
        return self.get_prompt_from_key(task_type, "task_specify_prompt")


/home/brandon/Projects/ChatDev/camel/prompts/task_prompt_template.py

from typing import Any, Dict
from camel.prompts import (
    TextPromptDict,
)
from camel.typing import TaskType
class TaskPromptTemplateDict(Dict[Any, TextPromptDict]):
    r"""A dictionary (:obj:`Dict[Any, TextPromptDict]`) of task prompt
    templates keyed by task type. This dictionary is used to map from
    a task type to its corresponding prompt template dictionary.
    Args:
        *args: Positional arguments passed to the :obj:`dict` constructor.
        **kwargs: Keyword arguments passed to the :obj:`dict` constructor.
    """
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.update({
            TaskType.AI_SOCIETY: AISocietyPromptTemplateDict(),
            TaskType.CODE: CodePromptTemplateDict(),
            TaskType.MISALIGNMENT: MisalignmentPromptTemplateDict(),
            TaskType.TRANSLATION: TranslationPromptTemplateDict(),
            TaskType.EVALUATION: EvaluationPromptTemplateDict(),
            TaskType.SOLUTION_EXTRACTION: SolutionExtractionPromptTemplateDict(),
        })


/home/brandon/Projects/ChatDev/chatdev/eval_quality.py

import os
import re
import signal
import subprocess
import time
import numpy as np
from openai import OpenAI
client = OpenAI(
    api_key='',
    base_url="",
)
def getFilesFromType(sourceDir, filetype):
    files = []
    for root, directories, filenames in os.walk(sourceDir):
        for filename in filenames:
            if filename.endswith(filetype):
                files.append(os.path.join(root, filename))
    return files
def get_code(directory):
    def _format_code(code):
        code = "\n".join([line for line in code.split("\n") if len(line.strip()) > 0])
        return code
    codebooks = {}
    filepaths = getFilesFromType(directory, ".py")
    for filepath in filepaths:
        filename = os.path.basename(filepath)
        codebooks[filename] = _format_code(open(filepath, "r", encoding="utf-8").read())
    code = ""
    for filename in codebooks.keys():
        code += "{}\n```Python\n{}\n```\n\n".format(filename, codebooks[filename])
    if len(code) == 0:
        code = "# None"
    return code.strip()
def get_completeness(directory):
    assert os.path.isdir(directory)
    vn = get_code(directory)
    lines = vn.split("\n")
    lines = [line for line in lines if
             "password" not in line.lower() and "passenger" not in line.lower() and "passed" not in line.lower() and "passes" not in line.lower()]
    lines = [line for line in lines if "pass" in line.lower() or "todo" in line.lower()]
    if len(lines) > 0:
        return 0.0
    return 1.0
def get_executability(directory):
    assert os.path.isdir(directory)
    def findFile(directory, target):
        main_py_path = None
        for subroot, _, filenames in os.walk(directory):
            for filename in filenames:
                if target in filename:
                    main_py_path = os.path.join(subroot, filename)
        return main_py_path
    def exist_bugs(directory):
        assert os.path.isdir(directory)
        success_info = "The software run successfully without errors."
        try:
            command = "cd \"{}\"; ls -l; python3 main.py;".format(directory)
            process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid, stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
            time.sleep(3)
            error_type = ""
            return_code = process.returncode
            if process.poll() is None:
                os.killpg(os.getpgid(process.pid), signal.SIGTERM)
            if return_code == 0:
                return False, success_info, error_type
            else:
                error_output = process.stderr.read().decode('utf-8')
                try:
                    error_pattern = r'\w+Error:'
                    error_matches = re.findall(error_pattern, error_output)
                    error_type = error_matches[0].replace(":", "")
                except:
                    pass
                if error_output:
                    if "Traceback".lower() in error_output.lower():
                        errs = error_output.replace(directory + "/", "")
                        return True, errs, error_type
                else:
                    return False, success_info, error_type
        except subprocess.CalledProcessError as e:
            return True, f"Error: {e}", "subprocess.CalledProcessError"
        except Exception as ex:
            return True, f"An error occurred: {ex}", "OtherException"
        return False, success_info, error_type
    main_py_path = findFile(directory, ".py")
    pass_flag, error_type = True, ""
    if main_py_path is not None:
        main_py_path = os.path.dirname(main_py_path)
        bug_flag, info, error_type = exist_bugs(main_py_path)
        pass_flag = not bug_flag
    else:
        pass_flag, error_type = False, "NoMain"
    if error_type == "":
        error_type = info.replace("\n", "\\n")
    if pass_flag:
        return  1.0
    return 0.0
def get_consistency(directory):
    def remove_comments(string):
        def remove_comments_by_regex(string, regex):
            lines = string.split("\n")
            lines = [line for line in lines if not line.strip().startswith("#")]
            string = "\n".join(lines)
            comments = []
            matches = re.finditer(regex, string, re.DOTALL)
            for match in matches:
                group1 = match.group(1)
                comments.append(group1)
            for comment in comments + ["''''''\n"]:
                string = string.replace(comment, "")
            return string
        string = remove_comments_by_regex(string, r"'''(.*?)'''")
        string = remove_comments_by_regex(string, r"\"\"\"(.*?)\"\"\"")
        return string
    def get_text_embedding(text: str):
        if text == "":
            text = "None"
        ada_embedding = client.embeddings.create(input=text, model="text-embedding-ada-002").model_dump()['data'][0]['embedding']
        return ada_embedding
    def get_code_embedding(code: str):
        if code == "":
            code = "#"
        ada_embedding = client.embeddings.create(input=code, model="text-embedding-ada-002").model_dump()['data'][0]['embedding']
        return ada_embedding
    def get_cosine_similarity(embeddingi, embeddingj):
        embeddingi = np.array(embeddingi)
        embeddingj = np.array(embeddingj)
        cos_sim = embeddingi.dot(embeddingj) / (np.linalg.norm(embeddingi) * np.linalg.norm(embeddingj))
        return cos_sim
    assert os.path.isdir(directory)
    files = getFilesFromType(directory, ".txt")
    if len(files) == 0:
        print()
    filepath = files[0]
    task = open(filepath).read().strip()
    codes = get_code(directory)
    codes = remove_comments(codes)
    text_embedding = get_text_embedding(task)
    code_embedding = get_code_embedding(codes)
    task_code_alignment = get_cosine_similarity(text_embedding, code_embedding)
    return task_code_alignment
def main(warehouse_root):
    def write_string(string):
        writer.write(string)
        print(string, end="")
    directories = []
    for directory in os.listdir(warehouse_root):
        directories.append(os.path.join(warehouse_root, directory))
    directories = sorted(directories)
    directories = [directory for directory in directories if os.path.isdir(directory)]
    print("len(directories):", len(directories))
    suffix = warehouse_root.replace("/", "__").replace("-", "_")
    tsv_file = __file__.replace(".py", ".{}.tsv".format(suffix))
    print("tsv_file:", tsv_file)
    counter = 0
    completeness_list, executability_list, consistency_list = [], [], []
    with open(tsv_file, "a", encoding="utf-8") as writer:
        for i, directory in enumerate(directories):
            directory_basename = os.path.basename(directory)
            completeness = get_completeness(directory)
            executability = get_executability(directory)
            consistency = get_consistency(directory)
            completeness_list.append(completeness)
            executability_list.append(executability)
            consistency_list.append(consistency)
            counter += 1
main(warehouse_root = "./WareHouse")


/home/brandon/Projects/ChatDev/chatdev/statistics.py

import os
import numpy as np
def prompt_cost(model_type: str, num_prompt_tokens: float, num_completion_tokens: float):
    input_cost_map = {
        "gpt-3.5-turbo": 0.0005,
        "gpt-3.5-turbo-16k": 0.003,
        "gpt-3.5-turbo-0613": 0.0015,
        "gpt-3.5-turbo-16k-0613": 0.003,
        "gpt-4": 0.03,
        "gpt-4-0613": 0.03,
        "gpt-4-32k": 0.06,
        "gpt-4-turbo": 0.01,
        "gpt-4o": 0.005,
        "gpt-4o-mini": 0.00015,
        "o1-preview": 0.0,
    }
    output_cost_map = {
        "gpt-3.5-turbo": 0.0015,
        "gpt-3.5-turbo-16k": 0.004,
        "gpt-3.5-turbo-0613": 0.002,
        "gpt-3.5-turbo-16k-0613": 0.004,
        "gpt-4": 0.06,
        "gpt-4-0613": 0.06,
        "gpt-4-32k": 0.12,
        "gpt-4-turbo": 0.03,
        "gpt-4o": 0.015,
        "gpt-4o-mini": 0.0006,
        "o1-preview": 0.0,
    }
    if model_type not in input_cost_map or model_type not in output_cost_map:
        return -1
    return num_prompt_tokens * input_cost_map[model_type] / 1000.0 + num_completion_tokens * output_cost_map[model_type] / 1000.0
def get_info(dir, log_filepath):
    print("dir:", dir)
    model_type = ""
    version_updates = -1
    num_code_files = -1
    num_png_files = -1
    num_doc_files = -1
    code_lines = -1
    env_lines = -1
    manual_lines = -1
    duration = -1
    num_utterance = -1
    num_reflection = -1
    num_prompt_tokens = -1
    num_completion_tokens = -1
    num_total_tokens = -1
    if os.path.exists(dir):
        filenames = os.listdir(dir)
        num_code_files = len([filename for filename in filenames if filename.endswith(".py")])
        num_png_files = len([filename for filename in filenames if filename.endswith(".png")])
        num_doc_files = 0
        for filename in filenames:
            if filename.endswith(".py") or filename.endswith(".png"):
                continue
            if os.path.isfile(os.path.join(dir, filename)):
                num_doc_files += 1
        if "meta.txt" in filenames:
            lines = open(os.path.join(dir, "meta.txt"), "r", encoding="utf8").read().split("\n")
            version_updates = float([lines[i + 1] for i, line in enumerate(lines) if "Code_Version" in line][0]) + 1
        else:
            version_updates = -1
        if "requirements.txt" in filenames:
            lines = open(os.path.join(dir, "requirements.txt"), "r", encoding="utf8").read().split("\n")
            env_lines = len([line for line in lines if len(line.strip()) > 0])
        else:
            env_lines = -1
        if "manual.md" in filenames:
            lines = open(os.path.join(dir, "manual.md"), "r", encoding="utf8").read().split("\n")
            manual_lines = len([line for line in lines if len(line.strip()) > 0])
        else:
            manual_lines = -1
        code_lines = 0
        for filename in filenames:
            if filename.endswith(".py"):
                lines = open(os.path.join(dir, filename), "r", encoding="utf8").read().split("\n")
                code_lines += len([line for line in lines if len(line.strip()) > 0])
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        sublines = [line for line in lines if "| **model_type** |" in line]
        if len(sublines) > 0:
            model_type = sublines[0].split("| **model_type** | ModelType.")[-1].split(" | ")[0]
            model_type = model_type[:-2]
            if model_type == "GPT_3_5_TURBO" or model_type == "GPT_3_5_TURBO_NEW":
                model_type = "gpt-3.5-turbo"
            elif model_type == "GPT_4":
                model_type = "gpt-4"
            elif model_type == "GPT_4_32k":
                model_type = "gpt-4-32k"
            elif model_type == "GPT_4_TURBO":
                model_type = "gpt-4-turbo"
            elif model_type == "GPT_4O":
                model_type = "gpt-4o"
            elif model_type == "GPT_4O_MINI":
                model_type = "gpt-4o-mini"
            elif model_type == "O1_PREVIEW":
                model_type = "o1-preview"
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        start_lines = [line for line in lines if "**[Start Chat]**" in line]
        chat_lines = [line for line in lines if "<->" in line]
        num_utterance = len(start_lines) + len(chat_lines)
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        sublines = [line for line in lines if line.startswith("prompt_tokens:")]
        if len(sublines) > 0:
            nums = [int(line.split(": ")[-1]) for line in sublines]
            num_prompt_tokens = np.sum(nums)
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        sublines = [line for line in lines if line.startswith("completion_tokens:")]
        if len(sublines) > 0:
            nums = [int(line.split(": ")[-1]) for line in sublines]
            num_completion_tokens = np.sum(nums)
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        sublines = [line for line in lines if line.startswith("total_tokens:")]
        if len(sublines) > 0:
            nums = [int(line.split(": ")[-1]) for line in sublines]
            num_total_tokens = np.sum(nums)
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        lines = open(log_filepath, "r", encoding="utf8").read().split("\n")
        num_reflection = 0
        for line in lines:
            if "on : Reflection" in line:
                num_reflection += 1
    cost = 0.0
    if num_png_files != -1:
        cost += num_png_files * 0.016
    if prompt_cost(model_type, num_prompt_tokens, num_completion_tokens) != -1:
        cost += prompt_cost(model_type, num_prompt_tokens, num_completion_tokens)
    info = "\n\n💰**cost**=${:.6f}\n\n🔨**version_updates**={}\n\n📃**num_code_files**={}\n\n🏞**num_png_files**={}\n\n📚**num_doc_files**={}\n\n📃**code_lines**={}\n\n📋**env_lines**={}\n\n📒**manual_lines**={}\n\n🗣**num_utterances**={}\n\n🤔**num_self_reflections**={}\n\n❓**num_prompt_tokens**={}\n\n❗**num_completion_tokens**={}\n\n🌟**num_total_tokens**={}" \
        .format(cost,
                version_updates,
                num_code_files,
                num_png_files,
                num_doc_files,
                code_lines,
                env_lines,
                manual_lines,
                num_utterance,
                num_reflection,
                num_prompt_tokens,
                num_completion_tokens,
                num_total_tokens)
    return info


/home/brandon/Projects/ChatDev/chatdev/chat_env.py

import os
import re
import shutil
import signal
import subprocess
import time
from typing import Dict
import openai
import requests
from chatdev.codes import Codes
from chatdev.documents import Documents
from chatdev.roster import Roster
from chatdev.utils import log_visualize
from ecl.memory import Memory
try:
    from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall
    from openai.types.chat.chat_completion_message import FunctionCall
    openai_new_api = True  except ImportError:
    openai_new_api = False  class ChatEnvConfig:
    def __init__(self, clear_structure,
                 gui_design,
                 git_management,
                 incremental_develop,
                 background_prompt,
                 with_memory):
        self.clear_structure = clear_structure          self.gui_design = gui_design          self.git_management = git_management          self.incremental_develop = incremental_develop          self.background_prompt = background_prompt          self.with_memory = with_memory     def __str__(self):
        string = ""
        string += "ChatEnvConfig.with_memory: {}\n".format(self.with_memory)
        string += "ChatEnvConfig.clear_structure: {}\n".format(self.clear_structure)
        string += "ChatEnvConfig.git_management: {}\n".format(self.git_management)
        string += "ChatEnvConfig.gui_design: {}\n".format(self.gui_design)
        string += "ChatEnvConfig.incremental_develop: {}\n".format(self.incremental_develop)
        string += "ChatEnvConfig.background_prompt: {}\n".format(self.background_prompt)
        return string
class ChatEnv:
    def __init__(self, chat_env_config: ChatEnvConfig):
        self.config = chat_env_config
        self.roster: Roster = Roster()
        self.codes: Codes = Codes()
        self.memory: Memory = Memory()
        self.proposed_images: Dict[str, str] = {}
        self.incorporated_images: Dict[str, str] = {}
        self.requirements: Documents = Documents()
        self.manuals: Documents = Documents()
        self.env_dict = {
            "directory": "",
            "task_prompt": "",
            "task_description":"",
            "modality": "",
            "ideas": "",
            "language": "",
            "review_comments": "",
            "error_summary": "",
            "test_reports": ""
        }
    @staticmethod
    def fix_module_not_found_error(test_reports):
        if "ModuleNotFoundError" in test_reports:
            for match in re.finditer(r"No module named '(\S+)'", test_reports, re.DOTALL):
                module = match.group(1)
                subprocess.Popen("pip install {}".format(module), shell=True).wait()
                log_visualize("**[CMD Execute]**\n\n[CMD] pip install {}".format(module))
    def set_directory(self, directory):
        assert len(self.env_dict['directory']) == 0
        self.env_dict['directory'] = directory
        self.codes.directory = directory
        self.requirements.directory = directory
        self.manuals.directory = directory
        if os.path.exists(self.env_dict['directory']) and len(os.listdir(directory)) > 0:
            new_directory = "{}.{}".format(directory, time.strftime("%Y%m%d%H%M%S", time.localtime()))
            shutil.copytree(directory, new_directory)
            print("{} Copied to {}".format(directory, new_directory))
        if os.path.exists(self.env_dict['directory']):
            shutil.rmtree(self.env_dict['directory'])
            os.mkdir(self.env_dict['directory'])
            print("{} Created".format(directory))
        else:
            os.mkdir(self.env_dict['directory'])
    def init_memory(self):
        self.memory.id_enabled = True
        self.memory.directory = os.path.join(os.getcwd(),"ecl","memory")
        if not os.path.exists(self.memory.directory):
            os.mkdir(self.memory.directory)
        self.memory.upload()
    def exist_bugs(self) -> tuple[bool, str]:
        directory = self.env_dict['directory']
        success_info = "The software run successfully without errors."
        try:
            if os.name == 'nt':
                command = "cd {} && dir && python main.py".format(directory)
                process = subprocess.Popen(
                    command,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
                )
            else:
                command = "cd {}; ls -l; python3 main.py;".format(directory)
                process = subprocess.Popen(command,
                                           shell=True,
                                           preexec_fn=os.setsid,
                                           stdout=subprocess.PIPE,
                                           stderr=subprocess.PIPE
                                           )
            time.sleep(3)
            return_code = process.returncode
            if process.poll() is None:
                if "killpg" in dir(os):
                    os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                else:
                    os.kill(process.pid, signal.SIGTERM)
                    if process.poll() is None:
                        os.kill(process.pid, signal.CTRL_BREAK_EVENT)
            if return_code == 0:
                return False, success_info
            else:
                error_output = process.stderr.read().decode('utf-8')
                if error_output:
                    if "Traceback".lower() in error_output.lower():
                        errs = error_output.replace(directory + "/", "")
                        return True, errs
                else:
                    return False, success_info
        except subprocess.CalledProcessError as e:
            return True, f"Error: {e}"
        except Exception as ex:
            return True, f"An error occurred: {ex}"
        return False, success_info
    def recruit(self, agent_name: str):
        self.roster._recruit(agent_name)
    def exist_employee(self, agent_name: str) -> bool:
        return self.roster._exist_employee(agent_name)
    def print_employees(self):
        self.roster._print_employees()
    def update_codes(self, generated_content):
        self.codes._update_codes(generated_content)
    def rewrite_codes(self, phase_info=None) -> None:
        self.codes._rewrite_codes(self.config.git_management, phase_info)
    def get_codes(self) -> str:
        return self.codes._get_codes()
    def _load_from_hardware(self, directory) -> None:
        self.codes._load_from_hardware(directory)
    def _update_requirements(self, generated_content):
        self.requirements._update_docs(generated_content)
    def rewrite_requirements(self):
        self.requirements._rewrite_docs()
    def get_requirements(self) -> str:
        return self.requirements._get_docs()
    def _update_manuals(self, generated_content):
        self.manuals._update_docs(generated_content, parse=False, predifined_filename="manual.md")
    def rewrite_manuals(self):
        self.manuals._rewrite_docs()
    def write_meta(self) -> None:
        directory = self.env_dict['directory']
        if not os.path.exists(directory):
            os.mkdir(directory)
            print("{} Created.".format(directory))
        meta_filename = "meta.txt"
        with open(os.path.join(directory, meta_filename), "w", encoding="utf-8") as writer:
            writer.write("{}:\n{}\n\n".format("Task", self.env_dict['task_prompt']))
            writer.write("{}:\n{}\n\n".format("Config", self.config.__str__()))
            writer.write("{}:\n{}\n\n".format("Roster", ", ".join(self.roster.agents)))
            writer.write("{}:\n{}\n\n".format("Modality", self.env_dict['modality']))
            writer.write("{}:\n{}\n\n".format("Ideas", self.env_dict['ideas']))
            writer.write("{}:\n{}\n\n".format("Language", self.env_dict['language']))
            writer.write("{}:\n{}\n\n".format("Code_Version", self.codes.version))
            writer.write("{}:\n{}\n\n".format("Proposed_images", len(self.proposed_images.keys())))
            writer.write("{}:\n{}\n\n".format("Incorporated_images", len(self.incorporated_images.keys())))
        print(os.path.join(directory, meta_filename), "Wrote")
    def generate_images_from_codes(self):
        def download(img_url, file_name):
            r = requests.get(img_url)
            filepath = os.path.join(self.env_dict['directory'], file_name)
            if os.path.exists(filepath):
                os.remove(filepath)
            with open(filepath, "wb") as f:
                f.write(r.content)
                print("{} Downloaded".format(filepath))
        regex = r"(\w+.png)"
        joined_codes = self.get_codes()
        matches = re.finditer(regex, joined_codes, re.DOTALL)
        for match in matches:
            filename = match.group(1).strip()
            if filename in self.proposed_images.keys():
                self.incorporated_images[filename] = self.proposed_images[filename]
            else:
                self.incorporated_images[filename] = filename.replace("_", " ")
        for filename in self.incorporated_images.keys():
            if not os.path.exists(os.path.join(self.env_dict['directory'], filename)):
                desc = self.incorporated_images[filename]
                if desc.endswith(".png"):
                    desc = desc.replace(".png", "")
                print("{}: {}".format(filename, desc))
                if openai_new_api:
                    response = openai.images.generate(
                        prompt=desc,
                        n=1,
                        size="256x256"
                    )
                    image_url = response.data[0].url
                else:
                    response = openai.Image.create(
                        prompt=desc,
                        n=1,
                        size="256x256"
                    )
                    image_url = response['data'][0]['url']
                download(image_url, filename)
    def get_proposed_images_from_message(self, messages):
        def download(img_url, file_name):
            r = requests.get(img_url)
            filepath = os.path.join(self.env_dict['directory'], file_name)
            if os.path.exists(filepath):
                os.remove(filepath)
            with open(filepath, "wb") as f:
                f.write(r.content)
                print("{} Downloaded".format(filepath))
        regex = r"(\w+.png):(.*?)\n"
        matches = re.finditer(regex, messages, re.DOTALL)
        images = {}
        for match in matches:
            filename = match.group(1).strip()
            desc = match.group(2).strip()
            images[filename] = desc
        if len(images.keys()) == 0:
            regex = r"(\w+.png)"
            matches = re.finditer(regex, messages, re.DOTALL)
            images = {}
            for match in matches:
                filename = match.group(1).strip()
                desc = " ".join(filename.replace(".png", "").split("_"))
                images[filename] = desc
                print("{}: {}".format(filename, images[filename]))
        for filename in images.keys():
            if not os.path.exists(os.path.join(self.env_dict['directory'], filename)):
                desc = images[filename]
                if desc.endswith(".png"):
                    desc = desc.replace(".png", "")
                print("{}: {}".format(filename, desc))
                if openai_new_api:
                    response = openai.images.generate(
                        prompt=desc,
                        n=1,
                        size="256x256"
                    )
                    image_url = response.data[0].url
                else:
                    response = openai.Image.create(
                        prompt=desc,
                        n=1,
                        size="256x256"
                    )
                    image_url = response['data'][0]['url']
                download(image_url, filename)
        return images


/home/brandon/Projects/ChatDev/chatdev/composed_phase.py

import importlib
import os
from abc import ABC, abstractmethod
from collections import defaultdict
from camel.typing import ModelType
from chatdev.chat_env import ChatEnv
from chatdev.utils import log_visualize
def check_bool(s):
    return s.lower() == "true"
class ComposedPhase(ABC):
    def __init__(self,
                 phase_name: str = None,
                 cycle_num: int = None,
                 composition: list = None,
                 config_phase: dict = None,
                 config_role: dict = None,
                 model_type: ModelType = ModelType.GPT_3_5_TURBO,
                 log_filepath: str = ""
                 ):
        """
        Args:
            phase_name: name of this phase
            cycle_num: loop times of this phase
            composition: list of SimplePhases in this ComposePhase
            config_phase: configuration of all SimplePhases
            config_role: configuration of all Roles
        """
        self.phase_name = phase_name
        self.cycle_num = cycle_num
        self.composition = composition
        self.model_type = model_type
        self.log_filepath = log_filepath
        self.config_phase = config_phase
        self.config_role = config_role
        self.phase_env = dict()
        self.phase_env["cycle_num"] = cycle_num
        self.chat_turn_limit_default = 10
        self.role_prompts = dict()
        for role in self.config_role:
            self.role_prompts[role] = "\n".join(self.config_role[role])
        self.phases = dict()
        for phase in self.config_phase:
            assistant_role_name = self.config_phase[phase]['assistant_role_name']
            user_role_name = self.config_phase[phase]['user_role_name']
            phase_prompt = "\n".join(self.config_phase[phase]['phase_prompt'])
            phase_module = importlib.import_module("chatdev.phase")
            phase_class = getattr(phase_module, phase)
            phase_instance = phase_class(assistant_role_name=assistant_role_name,
                                         user_role_name=user_role_name,
                                         phase_prompt=phase_prompt,
                                         role_prompts=self.role_prompts,
                                         phase_name=phase,
                                         model_type=self.model_type,
                                         log_filepath=self.log_filepath)
            self.phases[phase] = phase_instance
    @abstractmethod
    def update_phase_env(self, chat_env):
        """
        update self.phase_env (if needed) using chat_env, then the chatting will use self.phase_env to follow the context and fill placeholders in phase prompt
        must be implemented in customized phase
        the usual format is just like:
        ```
            self.phase_env.update({key:chat_env[key]})
        ```
        Args:
            chat_env: global chat chain environment
        Returns: None
        """
        pass
    @abstractmethod
    def update_chat_env(self, chat_env) -> ChatEnv:
        """
        update chan_env based on the results of self.execute, which is self.seminar_conclusion
        must be implemented in customized phase
        the usual format is just like:
        ```
            chat_env.xxx = some_func_for_postprocess(self.seminar_conclusion)
        ```
        Args:
            chat_env:global chat chain environment
        Returns:
            chat_env: updated global chat chain environment
        """
        pass
    @abstractmethod
    def break_cycle(self, phase_env) -> bool:
        """
        special conditions for early break the loop in ComposedPhase
        Args:
            phase_env: phase environment
        Returns: None
        """
        pass
    def execute(self, chat_env) -> ChatEnv:
        """
        similar to Phase.execute, but add control for breaking the loop
        1. receive information from environment(ComposedPhase): update the phase environment from global environment
        2. for each SimplePhase in ComposedPhase
            a) receive information from environment(SimplePhase)
            b) check loop break
            c) execute the chatting
            d) change the environment(SimplePhase)
            e) check loop break
        3. change the environment(ComposedPhase): update the global environment using the conclusion
        Args:
            chat_env: global chat chain environment
        Returns:
        """
        self.update_phase_env(chat_env)
        for cycle_index in range(1, self.cycle_num + 1):
            for phase_item in self.composition:
                assert phase_item["phaseType"] == "SimplePhase"                  phase = phase_item['phase']
                max_turn_step = phase_item['max_turn_step']
                need_reflect = check_bool(phase_item['need_reflect'])
                self.phase_env["cycle_index"] = cycle_index
                log_visualize(
                    f"**[Execute Detail]**\n\nexecute SimplePhase:[{phase}] in ComposedPhase:[{self.phase_name}], cycle {cycle_index}")
                if phase in self.phases:
                    self.phases[phase].phase_env = self.phase_env
                    self.phases[phase].update_phase_env(chat_env)
                    if self.break_cycle(self.phases[phase].phase_env):
                        return chat_env
                    chat_env = self.phases[phase].execute(chat_env,
                                                          self.chat_turn_limit_default if max_turn_step <= 0 else max_turn_step,
                                                          need_reflect)
                    if self.break_cycle(self.phases[phase].phase_env):
                        return chat_env
                else:
                    print(f"Phase '{phase}' is not yet implemented. \
                            Please write its config in phaseConfig.json \
                            and implement it in chatdev.phase")
        chat_env = self.update_chat_env(chat_env)
        return chat_env
class Art(ComposedPhase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        pass
    def update_chat_env(self, chat_env):
        return chat_env
    def break_cycle(self, chat_env) -> bool:
        return False
class CodeCompleteAll(ComposedPhase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        pyfiles = [filename for filename in os.listdir(chat_env.env_dict['directory']) if filename.endswith(".py")]
        num_tried = defaultdict(int)
        num_tried.update({filename: 0 for filename in pyfiles})
        self.phase_env.update({
            "max_num_implement": 5,
            "pyfiles": pyfiles,
            "num_tried": num_tried
        })
    def update_chat_env(self, chat_env):
        return chat_env
    def break_cycle(self, phase_env) -> bool:
        if phase_env['unimplemented_file'] == "":
            return True
        else:
            return False
class CodeReview(ComposedPhase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"modification_conclusion": ""})
    def update_chat_env(self, chat_env):
        return chat_env
    def break_cycle(self, phase_env) -> bool:
        if "<INFO> Finished".lower() in phase_env['modification_conclusion'].lower():
            return True
        else:
            return False
class HumanAgentInteraction(ComposedPhase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"modification_conclusion": "", "comments": ""})
    def update_chat_env(self, chat_env):
        return chat_env
    def break_cycle(self, phase_env) -> bool:
        if "<INFO> Finished".lower() in phase_env['modification_conclusion'].lower() or phase_env["comments"].lower() == "exit":
            return True
        else:
            return False
class Test(ComposedPhase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        pass
    def update_chat_env(self, chat_env):
        return chat_env
    def break_cycle(self, phase_env) -> bool:
        if not phase_env['exist_bugs_flag']:
            log_visualize(f"**[Test Info]**\n\nAI User (Software Test Engineer):\nTest Pass!\n")
            return True
        else:
            return False


/home/brandon/Projects/ChatDev/chatdev/phase.py

import os
import re
from abc import ABC, abstractmethod
from camel.agents import RolePlaying
from camel.messages import ChatMessage
from camel.typing import TaskType, ModelType
from chatdev.chat_env import ChatEnv
from chatdev.statistics import get_info
from chatdev.utils import log_visualize, log_arguments
class Phase(ABC):
    def __init__(self,
                 assistant_role_name,
                 user_role_name,
                 phase_prompt,
                 role_prompts,
                 phase_name,
                 model_type,
                 log_filepath):
        """
        Args:
            assistant_role_name: who receives chat in a phase
            user_role_name: who starts the chat in a phase
            phase_prompt: prompt of this phase
            role_prompts: prompts of all roles
            phase_name: name of this phase
        """
        self.seminar_conclusion = None
        self.assistant_role_name = assistant_role_name
        self.user_role_name = user_role_name
        self.phase_prompt = phase_prompt
        self.phase_env = dict()
        self.phase_name = phase_name
        self.assistant_role_prompt = role_prompts[assistant_role_name]
        self.user_role_prompt = role_prompts[user_role_name]
        self.ceo_prompt = role_prompts["Chief Executive Officer"]
        self.counselor_prompt = role_prompts["Counselor"]
        self.max_retries = 3
        self.reflection_prompt = """Here is a conversation between two roles: {conversations} {question}"""
        self.model_type = model_type
        self.log_filepath = log_filepath
    @log_arguments
    def chatting(
            self,
            chat_env,
            task_prompt: str,
            assistant_role_name: str,
            user_role_name: str,
            phase_prompt: str,
            phase_name: str,
            assistant_role_prompt: str,
            user_role_prompt: str,
            task_type=TaskType.CHATDEV,
            need_reflect=False,
            with_task_specify=False,
            model_type=ModelType.GPT_3_5_TURBO,
            memory=None,
            placeholders=None,
            chat_turn_limit=10
    ) -> str:
        """
        Args:
            chat_env: global chatchain environment
            task_prompt: user query prompt for building the software
            assistant_role_name: who receives the chat
            user_role_name: who starts the chat
            phase_prompt: prompt of the phase
            phase_name: name of the phase
            assistant_role_prompt: prompt of assistant role
            user_role_prompt: prompt of user role
            task_type: task type
            need_reflect: flag for checking reflection
            with_task_specify: with task specify
            model_type: model type
            placeholders: placeholders for phase environment to generate phase prompt
            chat_turn_limit: turn limits in each chat
        Returns:
        """
        if placeholders is None:
            placeholders = {}
        assert 1 <= chat_turn_limit <= 100
        if not chat_env.exist_employee(assistant_role_name):
            raise ValueError(f"{assistant_role_name} not recruited in ChatEnv.")
        if not chat_env.exist_employee(user_role_name):
            raise ValueError(f"{user_role_name} not recruited in ChatEnv.")
        role_play_session = RolePlaying(
            assistant_role_name=assistant_role_name,
            user_role_name=user_role_name,
            assistant_role_prompt=assistant_role_prompt,
            user_role_prompt=user_role_prompt,
            task_prompt=task_prompt,
            task_type=task_type,
            with_task_specify=with_task_specify,
            memory=memory,
            model_type=model_type,
            background_prompt=chat_env.config.background_prompt
        )
        _, input_user_msg = role_play_session.init_chat(None, placeholders, phase_prompt)
        seminar_conclusion = None
        for i in range(chat_turn_limit):
            assistant_response, user_response = role_play_session.step(input_user_msg, chat_turn_limit == 1)
            conversation_meta = "**" + assistant_role_name + "<->" + user_role_name + " on : " + str(
                phase_name) + ", turn " + str(i) + "**\n\n"
            if isinstance(assistant_response.msg, ChatMessage):
                log_visualize(role_play_session.assistant_agent.role_name,
                              conversation_meta + "[" + role_play_session.user_agent.system_message.content + "]\n\n" + assistant_response.msg.content)
                if role_play_session.assistant_agent.info:
                    seminar_conclusion = assistant_response.msg.content
                    break
                if assistant_response.terminated:
                    break
            if isinstance(user_response.msg, ChatMessage):
                log_visualize(role_play_session.user_agent.role_name,
                              conversation_meta + "[" + role_play_session.assistant_agent.system_message.content + "]\n\n" + user_response.msg.content)
                if role_play_session.user_agent.info:
                    seminar_conclusion = user_response.msg.content
                    break
                if user_response.terminated:
                    break
            if chat_turn_limit > 1 and isinstance(user_response.msg, ChatMessage):
                input_user_msg = user_response.msg
            else:
                break
        if need_reflect:
            if seminar_conclusion in [None, ""]:
                seminar_conclusion = "<INFO> " + self.self_reflection(task_prompt, role_play_session, phase_name,
                                                                      chat_env)
            if "recruiting" in phase_name:
                if "Yes".lower() not in seminar_conclusion.lower() and "No".lower() not in seminar_conclusion.lower():
                    seminar_conclusion = "<INFO> " + self.self_reflection(task_prompt, role_play_session,
                                                                          phase_name,
                                                                          chat_env)
            elif seminar_conclusion in [None, ""]:
                seminar_conclusion = "<INFO> " + self.self_reflection(task_prompt, role_play_session, phase_name,
                                                                      chat_env)
        else:
            seminar_conclusion = assistant_response.msg.content
        log_visualize("**[Seminar Conclusion]**:\n\n {}".format(seminar_conclusion))
        seminar_conclusion = seminar_conclusion.split("<INFO>")[-1]
        return seminar_conclusion
    def self_reflection(self,
                        task_prompt: str,
                        role_play_session: RolePlaying,
                        phase_name: str,
                        chat_env: ChatEnv) -> str:
        """
        Args:
            task_prompt: user query prompt for building the software
            role_play_session: role play session from the chat phase which needs reflection
            phase_name: name of the chat phase which needs reflection
            chat_env: global chatchain environment
        Returns:
            reflected_content: str, reflected results
        """
        messages = role_play_session.assistant_agent.stored_messages if len(
            role_play_session.assistant_agent.stored_messages) >= len(
            role_play_session.user_agent.stored_messages) else role_play_session.user_agent.stored_messages
        messages = ["{}: {}".format(message.role_name, message.content.replace("\n\n", "\n")) for message in messages]
        messages = "\n\n".join(messages)
        if "recruiting" in phase_name:
            question = """Answer their final discussed conclusion (Yes or No) in the discussion without any other words, e.g., "Yes" """
        elif phase_name == "DemandAnalysis":
            question = """Answer their final product modality in the discussion without any other words, e.g., "PowerPoint" """
        elif phase_name == "LanguageChoose":
            question = """Conclude the programming language being discussed for software development, in the format: "*" where '*' represents a programming language." """
        elif phase_name == "EnvironmentDoc":
            question = """According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly." """
        else:
            raise ValueError(f"Reflection of phase {phase_name}: Not Assigned.")
        reflected_content = \
            self.chatting(chat_env=chat_env,
                          task_prompt=task_prompt,
                          assistant_role_name="Chief Executive Officer",
                          user_role_name="Counselor",
                          phase_prompt=self.reflection_prompt,
                          phase_name="Reflection",
                          assistant_role_prompt=self.ceo_prompt,
                          user_role_prompt=self.counselor_prompt,
                          placeholders={"conversations": messages, "question": question},
                          need_reflect=False,
                          memory=chat_env.memory,
                          chat_turn_limit=1,
                          model_type=self.model_type)
        if "recruiting" in phase_name:
            if "Yes".lower() in reflected_content.lower():
                return "Yes"
            return "No"
        else:
            return reflected_content
    @abstractmethod
    def update_phase_env(self, chat_env):
        """
        update self.phase_env (if needed) using chat_env, then the chatting will use self.phase_env to follow the context and fill placeholders in phase prompt
        must be implemented in customized phase
        the usual format is just like:
        ```
            self.phase_env.update({key:chat_env[key]})
        ```
        Args:
            chat_env: global chat chain environment
        Returns: None
        """
        pass
    @abstractmethod
    def update_chat_env(self, chat_env) -> ChatEnv:
        """
        update chan_env based on the results of self.execute, which is self.seminar_conclusion
        must be implemented in customized phase
        the usual format is just like:
        ```
            chat_env.xxx = some_func_for_postprocess(self.seminar_conclusion)
        ```
        Args:
            chat_env:global chat chain environment
        Returns:
            chat_env: updated global chat chain environment
        """
        pass
    def execute(self, chat_env, chat_turn_limit, need_reflect) -> ChatEnv:
        """
        execute the chatting in this phase
        1. receive information from environment: update the phase environment from global environment
        2. execute the chatting
        3. change the environment: update the global environment using the conclusion
        Args:
            chat_env: global chat chain environment
            chat_turn_limit: turn limit in each chat
            need_reflect: flag for reflection
        Returns:
            chat_env: updated global chat chain environment using the conclusion from this phase execution
        """
        self.update_phase_env(chat_env)
        self.seminar_conclusion = \
            self.chatting(chat_env=chat_env,
                          task_prompt=chat_env.env_dict['task_prompt'],
                          need_reflect=need_reflect,
                          assistant_role_name=self.assistant_role_name,
                          user_role_name=self.user_role_name,
                          phase_prompt=self.phase_prompt,
                          phase_name=self.phase_name,
                          assistant_role_prompt=self.assistant_role_prompt,
                          user_role_prompt=self.user_role_prompt,
                          chat_turn_limit=chat_turn_limit,
                          placeholders=self.phase_env,
                          memory=chat_env.memory,
                          model_type=self.model_type)
        chat_env = self.update_chat_env(chat_env)
        return chat_env
class DemandAnalysis(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        pass
    def update_chat_env(self, chat_env) -> ChatEnv:
        if len(self.seminar_conclusion) > 0:
            chat_env.env_dict['modality'] = self.seminar_conclusion.split("<INFO>")[-1].lower().replace(".", "").strip()
        return chat_env
class LanguageChoose(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "description": chat_env.env_dict['task_description'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas']})
    def update_chat_env(self, chat_env) -> ChatEnv:
        if len(self.seminar_conclusion) > 0 and "<INFO>" in self.seminar_conclusion:
            chat_env.env_dict['language'] = self.seminar_conclusion.split("<INFO>")[-1].lower().replace(".", "").strip()
        elif len(self.seminar_conclusion) > 0:
            chat_env.env_dict['language'] = self.seminar_conclusion
        else:
            chat_env.env_dict['language'] = "Python"
        return chat_env
class Coding(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        gui = "" if not chat_env.config.gui_design \
            else "The software should be equipped with graphical user interface (GUI) so that user can visually and graphically use it; so you must choose a GUI framework (e.g., in Python, you can implement GUI via tkinter, Pygame, Flexx, PyGUI, etc,)."
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "description": chat_env.env_dict['task_description'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "gui": gui})
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.update_codes(self.seminar_conclusion)
        if len(chat_env.codes.codebooks.keys()) == 0:
            raise ValueError("No Valid Codes.")
        chat_env.rewrite_codes("Finish Coding")
        log_visualize(
            "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class ArtDesign(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env = {"task": chat_env.env_dict['task_prompt'],
                          "description": chat_env.env_dict['task_description'],
                          "language": chat_env.env_dict['language'],
                          "codes": chat_env.get_codes()}
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.proposed_images = chat_env.get_proposed_images_from_message(self.seminar_conclusion)
        log_visualize(
            "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class ArtIntegration(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env = {"task": chat_env.env_dict['task_prompt'],
                          "language": chat_env.env_dict['language'],
                          "codes": chat_env.get_codes(),
                          "images": "\n".join(
                              ["{}: {}".format(filename, chat_env.proposed_images[filename]) for
                               filename in sorted(list(chat_env.proposed_images.keys()))])}
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.update_codes(self.seminar_conclusion)
        chat_env.rewrite_codes("Finish Art Integration")
        log_visualize(
            "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class CodeComplete(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes(),
                               "unimplemented_file": ""})
        unimplemented_file = ""
        for filename in self.phase_env['pyfiles']:
            code_content = open(os.path.join(chat_env.env_dict['directory'], filename)).read()
            lines = [line.strip() for line in code_content.split("\n") if line.strip() == "pass"]
            if len(lines) > 0 and self.phase_env['num_tried'][filename] < self.phase_env['max_num_implement']:
                unimplemented_file = filename
                break
        self.phase_env['num_tried'][unimplemented_file] += 1
        self.phase_env['unimplemented_file'] = unimplemented_file
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.update_codes(self.seminar_conclusion)
        if len(chat_env.codes.codebooks.keys()) == 0:
            raise ValueError("No Valid Codes.")
        chat_env.rewrite_codes("Code Complete #" + str(self.phase_env["cycle_index"]) + " Finished")
        log_visualize(
            "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class CodeReviewComment(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update(
            {"task": chat_env.env_dict['task_prompt'],
             "modality": chat_env.env_dict['modality'],
             "ideas": chat_env.env_dict['ideas'],
             "language": chat_env.env_dict['language'],
             "codes": chat_env.get_codes(),
             "images": ", ".join(chat_env.incorporated_images)})
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.env_dict['review_comments'] = self.seminar_conclusion
        return chat_env
class CodeReviewModification(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes(),
                               "comments": chat_env.env_dict['review_comments']})
    def update_chat_env(self, chat_env) -> ChatEnv:
        if "```".lower() in self.seminar_conclusion.lower():
            chat_env.update_codes(self.seminar_conclusion)
            chat_env.rewrite_codes("Review #" + str(self.phase_env["cycle_index"]) + " Finished")
            log_visualize(
                "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        self.phase_env['modification_conclusion'] = self.seminar_conclusion
        return chat_env
class CodeReviewHuman(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes()})
    def update_chat_env(self, chat_env) -> ChatEnv:
        if "```".lower() in self.seminar_conclusion.lower():
            chat_env.update_codes(self.seminar_conclusion)
            chat_env.rewrite_codes("Human Review #" + str(self.phase_env["cycle_index"]) + " Finished")
            log_visualize(
                "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
    def execute(self, chat_env, chat_turn_limit, need_reflect) -> ChatEnv:
        self.update_phase_env(chat_env)
        log_visualize(
            f"**[Human-Agent-Interaction]**\n\n"
            f"Now you can participate in the development of the software!\n"
            f"The task is:  {chat_env.env_dict['task_prompt']}\n"
            f"Please input your feedback (in multiple lines). It can be bug report or new feature requirement.\n"
            f"You are currently in the #{self.phase_env['cycle_index']} human feedback with a total of {self.phase_env['cycle_num']} feedbacks\n"
            f"Type 'end' on a separate line to submit.\n"
            f"You can type \"Exit\" to quit this mode at any time.\n"
        )
        provided_comments = []
        while True:
            user_input = input(">>>>>>")
            if user_input.strip().lower() == "end":
                break
            if user_input.strip().lower() == "exit":
                provided_comments = ["exit"]
                break
            provided_comments.append(user_input)
        self.phase_env["comments"] = '\n'.join(provided_comments)
        log_visualize(
            f"**[User Provided Comments]**\n\n In the #{self.phase_env['cycle_index']} of total {self.phase_env['cycle_num']} comments: \n\n" +
            self.phase_env["comments"])
        if self.phase_env["comments"].strip().lower() == "exit":
            return chat_env
        self.seminar_conclusion = \
            self.chatting(chat_env=chat_env,
                          task_prompt=chat_env.env_dict['task_prompt'],
                          need_reflect=need_reflect,
                          assistant_role_name=self.assistant_role_name,
                          user_role_name=self.user_role_name,
                          phase_prompt=self.phase_prompt,
                          phase_name=self.phase_name,
                          assistant_role_prompt=self.assistant_role_prompt,
                          user_role_prompt=self.user_role_prompt,
                          chat_turn_limit=chat_turn_limit,
                          placeholders=self.phase_env,
                          memory=chat_env.memory,
                          model_type=self.model_type)
        chat_env = self.update_chat_env(chat_env)
        return chat_env
class TestErrorSummary(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        chat_env.generate_images_from_codes()
        (exist_bugs_flag, test_reports) = chat_env.exist_bugs()
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes(),
                               "test_reports": test_reports,
                               "exist_bugs_flag": exist_bugs_flag})
        log_visualize("**[Test Reports]**:\n\n{}".format(test_reports))
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env.env_dict['error_summary'] = self.seminar_conclusion
        chat_env.env_dict['test_reports'] = self.phase_env['test_reports']
        return chat_env
    def execute(self, chat_env, chat_turn_limit, need_reflect) -> ChatEnv:
        self.update_phase_env(chat_env)
        if "ModuleNotFoundError" in self.phase_env['test_reports']:
            chat_env.fix_module_not_found_error(self.phase_env['test_reports'])
            log_visualize(
                f"Software Test Engineer found ModuleNotFoundError:\n{self.phase_env['test_reports']}\n")
            pip_install_content = ""
            for match in re.finditer(r"No module named '(\S+)'", self.phase_env['test_reports'], re.DOTALL):
                module = match.group(1)
                pip_install_content += "{}\n```{}\n{}\n```\n".format("cmd", "bash", f"pip install {module}")
                log_visualize(f"Programmer resolve ModuleNotFoundError by:\n{pip_install_content}\n")
            self.seminar_conclusion = "nothing need to do"
        else:
            self.seminar_conclusion = \
                self.chatting(chat_env=chat_env,
                              task_prompt=chat_env.env_dict['task_prompt'],
                              need_reflect=need_reflect,
                              assistant_role_name=self.assistant_role_name,
                              user_role_name=self.user_role_name,
                              phase_prompt=self.phase_prompt,
                              phase_name=self.phase_name,
                              assistant_role_prompt=self.assistant_role_prompt,
                              user_role_prompt=self.user_role_prompt,
                              memory=chat_env.memory,
                              chat_turn_limit=chat_turn_limit,
                              placeholders=self.phase_env,
                              model_type=self.model_type)
        chat_env = self.update_chat_env(chat_env)
        return chat_env
class TestModification(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "test_reports": chat_env.env_dict['test_reports'],
                               "error_summary": chat_env.env_dict['error_summary'],
                               "codes": chat_env.get_codes()
                               })
    def update_chat_env(self, chat_env) -> ChatEnv:
        if "```".lower() in self.seminar_conclusion.lower():
            chat_env.update_codes(self.seminar_conclusion)
            chat_env.rewrite_codes("Test #" + str(self.phase_env["cycle_index"]) + " Finished")
            log_visualize(
                "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class EnvironmentDoc(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes()})
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env._update_requirements(self.seminar_conclusion)
        chat_env.rewrite_requirements()
        log_visualize(
            "**[Software Info]**:\n\n {}".format(get_info(chat_env.env_dict['directory'], self.log_filepath)))
        return chat_env
class Manual(Phase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    def update_phase_env(self, chat_env):
        self.phase_env.update({"task": chat_env.env_dict['task_prompt'],
                               "modality": chat_env.env_dict['modality'],
                               "ideas": chat_env.env_dict['ideas'],
                               "language": chat_env.env_dict['language'],
                               "codes": chat_env.get_codes(),
                               "requirements": chat_env.get_requirements()})
    def update_chat_env(self, chat_env) -> ChatEnv:
        chat_env._update_manuals(self.seminar_conclusion)
        chat_env.rewrite_manuals()
        return chat_env


/home/brandon/Projects/ChatDev/chatdev/utils.py

import html
import logging
import re
import time
import markdown
import inspect
from camel.messages.system_messages import SystemMessage
from visualizer.app import send_msg
def now():
    return time.strftime("%Y%m%d%H%M%S", time.localtime())
def log_visualize(role, content=None):
    """
    send the role and content to visualizer server to show log on webpage in real-time
    You can leave the role undefined and just pass the content, i.e. log_visualize("messages"), where the role is "System".
    Args:
        role: the agent that sends message
        content: the content of message
    Returns: None
    """
    if not content:
        logging.info(role + "\n")
        send_msg("System", role)
        print(role + "\n")
    else:
        print(str(role) + ": " + str(content) + "\n")
        logging.info(str(role) + ": " + str(content) + "\n")
        if isinstance(content, SystemMessage):
            records_kv = []
            content.meta_dict["content"] = content.content
            for key in content.meta_dict:
                value = content.meta_dict[key]
                value = escape_string(value)
                records_kv.append([key, value])
            content = "**[SystemMessage**]\n\n" + convert_to_markdown_table(records_kv)
        else:
            role = str(role)
            content = str(content)
        send_msg(role, content)
def convert_to_markdown_table(records_kv):
    header = "| Parameter | Value |\n| --- | --- |"
    rows = [f"| **{key}** | {value} |" for (key, value) in records_kv]
    markdown_table = header + "\n" + '\n'.join(rows)
    return markdown_table
def log_arguments(func):
    def wrapper(*args, **kwargs):
        sig = inspect.signature(func)
        params = sig.parameters
        all_args = {}
        all_args.update({name: value for name, value in zip(params.keys(), args)})
        all_args.update(kwargs)
        records_kv = []
        for name, value in all_args.items():
            if name in ["self", "chat_env", "task_type"]:
                continue
            value = escape_string(value)
            records_kv.append([name, value])
        records = f"**[{func.__name__}]**\n\n" + convert_to_markdown_table(records_kv)
        log_visualize("System", records)
        return func(*args, **kwargs)
    return wrapper
def escape_string(value):
    value = str(value)
    value = html.unescape(value)
    value = markdown.markdown(value)
    value = re.sub(r'<[^>]*>', '', value)
    value = value.replace("\n", " ")
    return value


/home/brandon/Projects/ChatDev/chatdev/chat_chain.py

import importlib
import json
import logging
import os
import shutil
import time
from datetime import datetime
from camel.agents import RolePlaying
from camel.configs import ChatGPTConfig
from camel.typing import TaskType, ModelType
from chatdev.chat_env import ChatEnv, ChatEnvConfig
from chatdev.statistics import get_info
from camel.web_spider import modal_trans
from chatdev.utils import log_visualize, now
def check_bool(s):
    return s.lower() == "true"
class ChatChain:
    def __init__(self,
                 config_path: str = None,
                 config_phase_path: str = None,
                 config_role_path: str = None,
                 task_prompt: str = None,
                 project_name: str = None,
                 org_name: str = None,
                 model_type: ModelType = ModelType.GPT_3_5_TURBO,
                 code_path: str = None) -> None:
        """
        Args:
            config_path: path to the ChatChainConfig.json
            config_phase_path: path to the PhaseConfig.json
            config_role_path: path to the RoleConfig.json
            task_prompt: the user input prompt for software
            project_name: the user input name for software
            org_name: the organization name of the human user
        """
        self.config_path = config_path
        self.config_phase_path = config_phase_path
        self.config_role_path = config_role_path
        self.project_name = project_name
        self.org_name = org_name
        self.model_type = model_type
        self.code_path = code_path
        with open(self.config_path, 'r', encoding="utf8") as file:
            self.config = json.load(file)
        with open(self.config_phase_path, 'r', encoding="utf8") as file:
            self.config_phase = json.load(file)
        with open(self.config_role_path, 'r', encoding="utf8") as file:
            self.config_role = json.load(file)
        self.chain = self.config["chain"]
        self.recruitments = self.config["recruitments"]
        self.web_spider = self.config["web_spider"]
        self.chat_turn_limit_default = 10
        self.chat_env_config = ChatEnvConfig(clear_structure=check_bool(self.config["clear_structure"]),
                                             gui_design=check_bool(self.config["gui_design"]),
                                             git_management=check_bool(self.config["git_management"]),
                                             incremental_develop=check_bool(self.config["incremental_develop"]),
                                             background_prompt=self.config["background_prompt"],
                                             with_memory=check_bool(self.config["with_memory"]))
        self.chat_env = ChatEnv(self.chat_env_config)
        self.task_prompt_raw = task_prompt
        self.task_prompt = ""
        self.role_prompts = dict()
        for role in self.config_role:
            self.role_prompts[role] = "\n".join(self.config_role[role])
        self.start_time, self.log_filepath = self.get_logfilepath()
        self.compose_phase_module = importlib.import_module("chatdev.composed_phase")
        self.phase_module = importlib.import_module("chatdev.phase")
        self.phases = dict()
        for phase in self.config_phase:
            assistant_role_name = self.config_phase[phase]['assistant_role_name']
            user_role_name = self.config_phase[phase]['user_role_name']
            phase_prompt = "\n\n".join(self.config_phase[phase]['phase_prompt'])
            phase_class = getattr(self.phase_module, phase)
            phase_instance = phase_class(assistant_role_name=assistant_role_name,
                                         user_role_name=user_role_name,
                                         phase_prompt=phase_prompt,
                                         role_prompts=self.role_prompts,
                                         phase_name=phase,
                                         model_type=self.model_type,
                                         log_filepath=self.log_filepath)
            self.phases[phase] = phase_instance
    def make_recruitment(self):
        """
        recruit all employees
        Returns: None
        """
        for employee in self.recruitments:
            self.chat_env.recruit(agent_name=employee)
    def execute_step(self, phase_item: dict):
        """
        execute single phase in the chain
        Args:
            phase_item: single phase configuration in the ChatChainConfig.json
        Returns:
        """
        phase = phase_item['phase']
        phase_type = phase_item['phaseType']
        if phase_type == "SimplePhase":
            max_turn_step = phase_item['max_turn_step']
            need_reflect = check_bool(phase_item['need_reflect'])
            if phase in self.phases:
                self.chat_env = self.phases[phase].execute(self.chat_env,
                                                           self.chat_turn_limit_default if max_turn_step <= 0 else max_turn_step,
                                                           need_reflect)
            else:
                raise RuntimeError(f"Phase '{phase}' is not yet implemented in chatdev.phase")
        elif phase_type == "ComposedPhase":
            cycle_num = phase_item['cycleNum']
            composition = phase_item['Composition']
            compose_phase_class = getattr(self.compose_phase_module, phase)
            if not compose_phase_class:
                raise RuntimeError(f"Phase '{phase}' is not yet implemented in chatdev.compose_phase")
            compose_phase_instance = compose_phase_class(phase_name=phase,
                                                         cycle_num=cycle_num,
                                                         composition=composition,
                                                         config_phase=self.config_phase,
                                                         config_role=self.config_role,
                                                         model_type=self.model_type,
                                                         log_filepath=self.log_filepath)
            self.chat_env = compose_phase_instance.execute(self.chat_env)
        else:
            raise RuntimeError(f"PhaseType '{phase_type}' is not yet implemented.")
    def execute_chain(self):
        """
        execute the whole chain based on ChatChainConfig.json
        Returns: None
        """
        for phase_item in self.chain:
            self.execute_step(phase_item)
    def get_logfilepath(self):
        """
        get the log path (under the software path)
        Returns:
            start_time: time for starting making the software
            log_filepath: path to the log
        """
        start_time = now()
        filepath = os.path.dirname(__file__)
        root = os.path.dirname(filepath)
        directory = os.path.join(root, "WareHouse")
        log_filepath = os.path.join(directory,
                                    "{}.log".format("_".join([self.project_name, self.org_name, start_time])))
        return start_time, log_filepath
    def pre_processing(self):
        """
        remove useless files and log some global config settings
        Returns: None
        """
        filepath = os.path.dirname(__file__)
        root = os.path.dirname(filepath)
        directory = os.path.join(root, "WareHouse")
        if self.chat_env.config.clear_structure:
            for filename in os.listdir(directory):
                file_path = os.path.join(directory, filename)
                if os.path.isfile(file_path) and not filename.endswith(".py") and not filename.endswith(".log"):
                    os.remove(file_path)
                    print("{} Removed.".format(file_path))
        software_path = os.path.join(directory, "_".join([self.project_name, self.org_name, self.start_time]))
        self.chat_env.set_directory(software_path)
        if self.chat_env.config.with_memory is True:
            self.chat_env.init_memory()
        shutil.copy(self.config_path, software_path)
        shutil.copy(self.config_phase_path, software_path)
        shutil.copy(self.config_role_path, software_path)
        if check_bool(self.config["incremental_develop"]):
            for root, dirs, files in os.walk(self.code_path):
                relative_path = os.path.relpath(root, self.code_path)
                target_dir = os.path.join(software_path, 'base', relative_path)
                os.makedirs(target_dir, exist_ok=True)
                for file in files:
                    source_file = os.path.join(root, file)
                    target_file = os.path.join(target_dir, file)
                    shutil.copy2(source_file, target_file)
            self.chat_env._load_from_hardware(os.path.join(software_path, 'base'))
        with open(os.path.join(software_path, self.project_name + ".prompt"), "w") as f:
            f.write(self.task_prompt_raw)
        preprocess_msg = "**[Preprocessing]**\n\n"
        chat_gpt_config = ChatGPTConfig()
        preprocess_msg += "**ChatDev Starts** ({})\n\n".format(self.start_time)
        preprocess_msg += "**Timestamp**: {}\n\n".format(self.start_time)
        preprocess_msg += "**config_path**: {}\n\n".format(self.config_path)
        preprocess_msg += "**config_phase_path**: {}\n\n".format(self.config_phase_path)
        preprocess_msg += "**config_role_path**: {}\n\n".format(self.config_role_path)
        preprocess_msg += "**task_prompt**: {}\n\n".format(self.task_prompt_raw)
        preprocess_msg += "**project_name**: {}\n\n".format(self.project_name)
        preprocess_msg += "**Log File**: {}\n\n".format(self.log_filepath)
        preprocess_msg += "**ChatDevConfig**:\n{}\n\n".format(self.chat_env.config.__str__())
        preprocess_msg += "**ChatGPTConfig**:\n{}\n\n".format(chat_gpt_config)
        log_visualize(preprocess_msg)
        if check_bool(self.config['self_improve']):
            self.chat_env.env_dict['task_prompt'] = self.self_task_improve(self.task_prompt_raw)
        else:
            self.chat_env.env_dict['task_prompt'] = self.task_prompt_raw
        if(check_bool(self.web_spider)):
            self.chat_env.env_dict['task_description'] = modal_trans(self.task_prompt_raw)
    def post_processing(self):
        """
        summarize the production and move log files to the software directory
        Returns: None
        """
        self.chat_env.write_meta()
        filepath = os.path.dirname(__file__)
        root = os.path.dirname(filepath)
        if self.chat_env_config.git_management:
            log_git_info = "**[Git Information]**\n\n"
            self.chat_env.codes.version += 1
            os.system("cd {}; git add .".format(self.chat_env.env_dict["directory"]))
            log_git_info += "cd {}; git add .\n".format(self.chat_env.env_dict["directory"])
            os.system("cd {}; git commit -m \"v{} Final Version\"".format(self.chat_env.env_dict["directory"],
                                                                          self.chat_env.codes.version))
            log_git_info += "cd {}; git commit -m \"v{} Final Version\"\n".format(self.chat_env.env_dict["directory"],
                                                                                  self.chat_env.codes.version)
            log_visualize(log_git_info)
            git_info = "**[Git Log]**\n\n"
            import subprocess
            command = "cd {}; git log".format(self.chat_env.env_dict["directory"])
            completed_process = subprocess.run(command, shell=True, text=True, stdout=subprocess.PIPE)
            if completed_process.returncode == 0:
                log_output = completed_process.stdout
            else:
                log_output = "Error when executing " + command
            git_info += log_output
            log_visualize(git_info)
        post_info = "**[Post Info]**\n\n"
        now_time = now()
        time_format = "%Y%m%d%H%M%S"
        datetime1 = datetime.strptime(self.start_time, time_format)
        datetime2 = datetime.strptime(now_time, time_format)
        duration = (datetime2 - datetime1).total_seconds()
        post_info += "Software Info: {}".format(
            get_info(self.chat_env.env_dict['directory'], self.log_filepath) + "\n\n🕑**duration**={:.2f}s\n\n".format(
                duration))
        post_info += "ChatDev Starts ({})".format(self.start_time) + "\n\n"
        post_info += "ChatDev Ends ({})".format(now_time) + "\n\n"
        directory = self.chat_env.env_dict['directory']
        if self.chat_env.config.clear_structure:
            for filename in os.listdir(directory):
                file_path = os.path.join(directory, filename)
                if os.path.isdir(file_path) and file_path.endswith("__pycache__"):
                    shutil.rmtree(file_path, ignore_errors=True)
                    post_info += "{} Removed.".format(file_path) + "\n\n"
        log_visualize(post_info)
        logging.shutdown()
        time.sleep(1)
        shutil.move(self.log_filepath,
                    os.path.join(root + "/WareHouse", "_".join([self.project_name, self.org_name, self.start_time]),
                                 os.path.basename(self.log_filepath)))
    def self_task_improve(self, task_prompt):
        """
        ask agent to improve the user query prompt
        Args:
            task_prompt: original user query prompt
        Returns:
            revised_task_prompt: revised prompt from the prompt engineer agent
        """
        self_task_improve_prompt = """I will give you a short description of a software design requirement, 
please rewrite it into a detailed prompt that can make large language model know how to make this software better based this prompt,
the prompt should ensure LLMs build a software that can be run correctly, which is the most import part you need to consider.
remember that the revised prompt should not contain more than 200 words, 
here is the short description:\"{}\". 
If the revised prompt is revised_version_of_the_description, 
then you should return a message in a format like \"<INFO> revised_version_of_the_description\", do not return messages in other formats.""".format(
            task_prompt)
        role_play_session = RolePlaying(
            assistant_role_name="Prompt Engineer",
            assistant_role_prompt="You are an professional prompt engineer that can improve user input prompt to make LLM better understand these prompts.",
            user_role_prompt="You are an user that want to use LLM to build software.",
            user_role_name="User",
            task_type=TaskType.CHATDEV,
            task_prompt="Do prompt engineering on user query",
            with_task_specify=False,
            model_type=self.model_type,
        )
        _, input_user_msg = role_play_session.init_chat(None, None, self_task_improve_prompt)
        assistant_response, user_response = role_play_session.step(input_user_msg, True)
        revised_task_prompt = assistant_response.msg.content.split("<INFO>")[-1].lower().strip()
        log_visualize(role_play_session.assistant_agent.role_name, assistant_response.msg.content)
        log_visualize(
            "**[Task Prompt Self Improvement]**\n**Original Task Prompt**: {}\n**Improved Task Prompt**: {}".format(
                task_prompt, revised_task_prompt))
        return revised_task_prompt


/home/brandon/Projects/ChatDev/chatdev/documents.py

import re
import os
import time
from colorama import Fore
class Documents():
    def __init__(self, generated_content = "", parse = True, predifined_filename = None):
        self.directory: str = None
        self.generated_content = generated_content
        self.docbooks = {}
        if generated_content != "":
            if parse:
                regex = r"```\n(.*?)```"
                matches = re.finditer(regex, self.generated_content, re.DOTALL)
                for match in matches:
                    filename = "requirements.txt"
                    doc = match.group(1)
                    self.docbooks[filename] = doc
            else:
                self.docbooks[predifined_filename] = self.generated_content
    def _update_docs(self, generated_content, parse = True, predifined_filename = ""):
        new_docs = Documents(generated_content, parse, predifined_filename)
        for key in new_docs.docbooks.keys():
            if key not in self.docbooks.keys() or self.docbooks[key] != new_docs.docbooks[key]:
                print("{} updated.".format(key))
                print(Fore.WHITE + "------Old:\n{}\n------New:\n{}".format(self.docbooks[key] if key in self.docbooks.keys() else "# None", new_docs.docbooks[key]))
                self.docbooks[key] = new_docs.docbooks[key]
    def _rewrite_docs(self):
        directory = self.directory
        if not os.path.exists(directory):
            os.mkdir(directory)
            print("{} Created.".format(directory))
        for filename in self.docbooks.keys():
            with open(os.path.join(directory, filename), "w", encoding="utf-8") as writer:
                writer.write(self.docbooks[filename])
                print(os.path.join(directory, filename), "Writen")
    def _get_docs(self):
        content = ""
        for filename in self.docbooks.keys():
            content += "{}\n```\n{}\n```\n\n".format(filename, self.docbooks[filename])
        return content


/home/brandon/Projects/ChatDev/chatdev/roster.py

class Roster():
    def __init__(self) -> None:
        self.agents = list()
    def _recruit(self, agent_name: str):
        self.agents.append(agent_name)
    def _exist_employee(self, agent_name: str):
        names = self.agents + [agent_name]
        names = [name.lower().strip() for name in names]
        names = [name.replace(" ", "").replace("_", "") for name in names]
        agent_name = names[-1]
        if agent_name in names[:-1]:
            return True
        return False
    def _print_employees(self):
        names = self.agents
        names = [name.lower().strip() for name in names]
        print("Employees: {}".format(names))


/home/brandon/Projects/ChatDev/chatdev/codes.py

import difflib
import os
import re
import subprocess
from chatdev.utils import log_visualize
class Codes:
    def __init__(self, generated_content=""):
        self.directory: str = None
        self.version: float = 0.0
        self.generated_content: str = generated_content
        self.codebooks = {}
        def extract_filename_from_line(lines):
            file_name = ""
            for candidate in re.finditer(r"(\w+\.\w+)", lines, re.DOTALL):
                file_name = candidate.group()
                file_name = file_name.lower()
            return file_name
        def extract_filename_from_code(code):
            file_name = ""
            regex_extract = r"class (\S+?):\n"
            matches_extract = re.finditer(regex_extract, code, re.DOTALL)
            for match_extract in matches_extract:
                file_name = match_extract.group(1)
            file_name = file_name.lower().split("(")[0] + ".py"
            return file_name
        if generated_content != "":
            regex = r"(.+?)\n```.*?\n(.*?)```"
            matches = re.finditer(regex, self.generated_content, re.DOTALL)
            for match in matches:
                code = match.group(2)
                if "CODE" in code:
                    continue
                group1 = match.group(1)
                filename = extract_filename_from_line(group1)
                if "__main__" in code:
                    filename = "main.py"
                if filename == "":                      filename = extract_filename_from_code(code)
                assert filename != ""
                if filename is not None and code is not None and len(filename) > 0 and len(code) > 0:
                    self.codebooks[filename] = self._format_code(code)
    def _format_code(self, code):
        code = "\n".join([line for line in code.split("\n") if len(line.strip()) > 0])
        return code
    def _update_codes(self, generated_content):
        new_codes = Codes(generated_content)
        differ = difflib.Differ()
        for key in new_codes.codebooks.keys():
            if key not in self.codebooks.keys() or self.codebooks[key] != new_codes.codebooks[key]:
                update_codes_content = "**[Update Codes]**\n\n"
                update_codes_content += "{} updated.\n".format(key)
                old_codes_content = self.codebooks[key] if key in self.codebooks.keys() else "# None"
                new_codes_content = new_codes.codebooks[key]
                lines_old = old_codes_content.splitlines()
                lines_new = new_codes_content.splitlines()
                unified_diff = difflib.unified_diff(lines_old, lines_new, lineterm='', fromfile='Old', tofile='New')
                unified_diff = '\n'.join(unified_diff)
                update_codes_content = update_codes_content + "\n\n" + """```
'''
'''\n""" + unified_diff + "\n```"
                log_visualize(update_codes_content)
                self.codebooks[key] = new_codes.codebooks[key]
    def _rewrite_codes(self, git_management, phase_info=None) -> None:
        directory = self.directory
        rewrite_codes_content = "**[Rewrite Codes]**\n\n"
        if os.path.exists(directory) and len(os.listdir(directory)) > 0:
            self.version += 1.0
        if not os.path.exists(directory):
            os.mkdir(self.directory)
            rewrite_codes_content += "{} Created\n".format(directory)
        for filename in self.codebooks.keys():
            filepath = os.path.join(directory, filename)
            with open(filepath, "w", encoding="utf-8") as writer:
                writer.write(self.codebooks[filename])
                rewrite_codes_content += os.path.join(directory, filename) + " Wrote\n"
        if git_management:
            if not phase_info:
                phase_info = ""
            log_git_info = "**[Git Information]**\n\n"
            if self.version == 1.0:
                os.system("cd {}; git init".format(self.directory))
                log_git_info += "cd {}; git init\n".format(self.directory)
            os.system("cd {}; git add .".format(self.directory))
            log_git_info += "cd {}; git add .\n".format(self.directory)
            completed_process = subprocess.run("cd {}; git status".format(self.directory), shell=True, text=True,
                                               stdout=subprocess.PIPE)
            if "nothing to commit" in completed_process.stdout:
                self.version -= 1.0
                return
            os.system("cd {}; git commit -m \"v{}\"".format(self.directory, str(self.version) + " " + phase_info))
            log_git_info += "cd {}; git commit -m \"v{}\"\n".format(self.directory,
                                                                      str(self.version) + " " + phase_info)
            if self.version == 1.0:
                os.system("cd {}; git submodule add ./{} {}".format(os.path.dirname(os.path.dirname(self.directory)),
                                                                    "WareHouse/" + os.path.basename(self.directory),
                                                                    "WareHouse/" + os.path.basename(self.directory)))
                log_git_info += "cd {}; git submodule add ./{} {}\n".format(
                    os.path.dirname(os.path.dirname(self.directory)),
                    "WareHouse/" + os.path.basename(self.directory),
                    "WareHouse/" + os.path.basename(self.directory))
                log_visualize(rewrite_codes_content)
            log_visualize(log_git_info)
    def _get_codes(self) -> str:
        content = ""
        for filename in self.codebooks.keys():
            content += "{}\n```{}\n{}\n```\n\n".format(filename,
                                                       "python" if filename.endswith(".py") else filename.split(".")[
                                                           -1], self.codebooks[filename])
        return content
    def _load_from_hardware(self, directory) -> None:
        assert len([filename for filename in os.listdir(directory) if filename.endswith(".py")]) > 0
        for root, directories, filenames in os.walk(directory):
            for filename in filenames:
                if filename.endswith(".py"):
                    code = open(os.path.join(directory, filename), "r", encoding="utf-8").read()
                    self.codebooks[filename] = self._format_code(code)
        log_visualize("{} files read from {}".format(len(self.codebooks.keys()), directory))


/home/brandon/Projects/ChatDev/ecl/graph.py

import os
import subprocess
import hashlib
from queue import Queue
import re
from utils import cmd,log_and_print_online
class Node:
    def __init__(self):
        self.code = None
        self.version = None
        self.commitMessage = None
        self.mID = None
        self.role = None
        self.degree = 0
        self.value = 0.0
        self.embedding = None
    def create_from_warehouse(self, directory) -> None:
        def _format_code(code):
            code = "\n".join([line for line in code.split("\n") if len(line.strip()) > 0])
            return code
        codebooks = {}
        assert len([filename for filename in os.listdir(directory) if filename.endswith(".py")]) > 0
        for root, directories, filenames in os.walk(directory):
            for filename in filenames:
                if filename.endswith(".py"):
                    codebooks[filename] = _format_code(open(os.path.join(directory, filename), "r", encoding="utf-8").read())
        code = ""
        for filename in codebooks.keys():
            filepath = os.path.join(directory, filename)
            code += "{}\n```Python\n{}\n```\n\n".format(filename, codebooks[filename])
        self.code = code
        self.mID = hashlib.md5(self.code.encode(encoding='UTF-8')).hexdigest()
        content = cmd("cd {} && git log --oneline".format(directory)).replace("(HEAD -> main)", "").replace("  ", " ")
        self.commitMessage = " ".join(content.split("\n")[0].split(" ")[1:])
        self.version = float(content.split("\n")[0].split(" ")[1].replace("v", ""))
class Edge:
    def __init__(self, sourceMID, targetMID, instruction, role):
        self.sourceMID = sourceMID
        self.targetMID = targetMID
        self.instruction = instruction
        self.role = role
        self.edgeId = None
        self.embedding = None
class Graph:
    def __init__(self):
        self.task = ""
        self.task_embedding = None
        self.nodes = {}
        self.edges = []
        self.directory:str = None
    def addNode(self, node: Node):
        if node.mID not in self.nodes.keys():
            self.nodes[node.mID] = node
    def addEdge(self, edge: Edge):
        num = "edge_{}".format(len(self.edges))
        edge.edgeId = hashlib.md5(num.encode(encoding='UTF-8')).hexdigest()
        self.edges.append(edge)
    def exists_edge(self, mid1: str, mid2: str):
        for edge in self.edges:
            if edge.sourceMID == mid1 and edge.targetMID == mid2:
                return True
        return False
    def create_from_warehouse(self, directory) -> None:
        self.directory = directory
        content = cmd("cd {} && git log --oneline".format(directory))
        cIDs = ["0" * 7] + [line.split(" ")[0] for line in content.split("\n") if len(line)>0][::-1]         log_cID = cIDs[-1]
        cIDs = cIDs[:-1]
        log_and_print_online("commit history:"+ str(cIDs)+ "\nlog commit:"+ str(log_cID))
        try:
            cID2mID = {}
            output = ""
            for cID in cIDs:
                if cID == "0" * 7:
                    node = Node()
                    node.code = ""
                    node.mID = hashlib.md5("".encode(encoding='UTF-8')).hexdigest()
                    node.commitMessage = ""
                    node.version = "v0.0"
                    cID2mID[cID] = node.mID
                    self.addNode(node)
                    output += ("Node: {} -> {}\n".format("0" * 7, node.mID))
                else:
                    content = cmd("cd {} && git reset --hard {}".format(directory, cID))
                    node = Node()
                    node.create_from_warehouse(directory)
                    cID2mID[cID] = node.mID
                    self.addNode(node)
                    output += ("Node: {} -> {}\n".format(cID, node.mID))
        finally:
            cmd("cd {} && git reset --hard {}".format(directory, log_cID))
        log_and_print_online(output)
        for i in range(1, len(cIDs), 1):
            sourceCID = cIDs[i-1]
            targetCID = cIDs[i]
            sourceMID = cID2mID[sourceCID]
            targetMID = cID2mID[targetCID]
            edge = Edge(sourceMID, targetMID, instruction="", role="")
            self.addEdge(edge)
        self._create_instruction_and_roles_from_log(directory)
    def create_from_log(self, directory) -> None:
        def update_codebook(utterance, codebook):
            def extract_filename_from_line(lines):
                file_name = ""
                for candidate in re.finditer(r"(\w+\.\w+)", lines, re.DOTALL):
                    file_name = candidate.group()
                    file_name = file_name.lower()
                return file_name
            def extract_filename_from_code(code):
                file_name = ""
                regex_extract = r"class (\S+?):\n"
                matches_extract = re.finditer(regex_extract, code, re.DOTALL)
                for match_extract in matches_extract:
                    file_name = match_extract.group(1)
                file_name = file_name.lower().split("(")[0] + ".py"
                return file_name
            def _format_code(code):
                code = "\n".join([line for line in code.split("\n") if len(line.strip()) > 0])
                return code
            regex = r"(.+?)\n```.*?\n(.*?)```"
            matches = re.finditer(regex, utterance, re.DOTALL)
            for match in matches:
                code = match.group(2)
                if "CODE" in code:
                    continue
                group1 = match.group(1)
                filename = extract_filename_from_line(group1)
                if "__main__" in code:
                    filename = "main.py"
                if filename == "":
                    filename = extract_filename_from_code(code)
                assert filename != ""
                if filename is not None and code is not None and len(filename) > 0 and len(code) > 0:
                    codebook[filename] = _format_code(code)
        def get_codes(codebook):
            content = ""
            for filename in codebook.keys():
                content += "{}\n```{}\n{}\n```\n\n".format(filename, "python" if filename.endswith(".py") else
                filename.split(".")[-1], codebook[filename])
            return content
        self.directory = directory
        logdir = [filename for filename in os.listdir(directory) if filename.endswith(".log")]
        if len(logdir) > 0:
            log_filename = logdir[0]
            print("log_filename:", log_filename)
        else:
            return
        content = open(os.path.join(directory, log_filename), "r", encoding='UTF-8').read()
        utterances = []
        regex = r"\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \w+)\] ([.\s\S\n\r\d\D\t]*?)(?=\n\[\d|$)"
        matches = re.finditer(regex, content, re.DOTALL)
        for match in matches:
            group1 = match.group(1)
            group2 = match.group(2)
            utterances.append("[{}] {}".format(group1, group2))
        utterances = [utterance for utterance in utterances if
                      "flask app.py" not in utterance and "OpenAI_Usage_Info" not in utterance]
        index = [i for i, utterance in enumerate(utterances) if
                 "Programmer<->Chief Technology Officer on : EnvironmentDoc" in utterance]
        if len(index) > 0:
            utterances = utterances[:index[0] - 1]
        utterances_code= [utterance for utterance in utterances if
                           "Programmer<->" in utterance and "EnvironmentDoc" not in utterance and "TestErrorSummary" not in utterance]
        print("len(utterances_code):", len(utterances_code))
        codebook, fingerprints, pre_mid = {}, set(), ""
        for utterance in utterances_code:
            update_codebook(utterance, codebook)
            node = Node()
            node.mID = hashlib.md5(get_codes(codebook).encode(encoding='UTF-8')).hexdigest()
            node.commitMessage = ""
            node.code = get_codes(codebook)
            node.version = float(len(fingerprints))
            if node.mID not in fingerprints:
                fingerprints.add(node.mID)
                self.addNode(node)
            if pre_mid != "":
                sourceMID = pre_mid
                targetMID = node.mID
                edge = Edge(sourceMID, targetMID, instruction="", role="")
                self.addEdge(edge)
            pre_mid = node.mID
        self._create_instruction_and_roles_from_log(directory)
    def _create_instruction_and_roles_from_log(self, directory) -> None:
        logdir = [filename for filename in os.listdir(directory) if filename.endswith(".log")]
        if len(logdir)>0:
            log_filename = logdir[0]
            log_and_print_online("log_filename:"+log_filename)
        else :
            return 
        content = open(os.path.join(directory, log_filename), "r", encoding='UTF-8').read()
        utterances = []
        regex = r"\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \w+)\] ([.\s\S\n\r\d\D\t]*?)(?=\n\[\d|$)"
        matches = re.finditer(regex, content, re.DOTALL)
        for match in matches:
            group1 = match.group(1)
            group2 = match.group(2)
            utterances.append(group2)
        utterances = [utterance for utterance in utterances if "Chief Technology Officer: **[Start Chat]**" in utterance or "Code Reviewer: **[Start Chat]**" in utterance or "Software Test Engineer: **[Start Chat]**" in utterance]
        if "Test Pass!" in content:
            utterances.append("Software Test Engineer: **[Start Chat]**\n\nTest Pass!")
        instructions, roles = [], []
        for utterance in utterances:
            utterance = utterance.lower()
            instruction = ""
            if "Chief Technology Officer: **[Start Chat]**".lower() in utterance:
                instruction = "write one or multiple files and make sure that every detail of the architecture is implemented as code"
            elif "Code Reviewer: **[Start Chat]**".lower() in utterance:
                instruction = utterance.split("Comments on Codes:".lower())[-1].split("In the software,".lower())[0]
                instruction = instruction.replace("<comment>".lower(), "")
            elif "Software Test Engineer: **[Start Chat]**".lower() in utterance:
                if "Test Pass!".lower() in utterance:
                    instruction = "Test Pass!"
                else:
                    instruction = utterance.split("Error Summary of Test Reports:".lower())[-1].split("Note that each file must strictly follow a markdown code block format".lower())[0]
            else:
                assert False
            role = utterance.split(": **")[0]
            instruction = instruction.strip()
            if instruction.startswith("\""):
                instruction = instruction[1:]
            if instruction.endswith("\""):
                instruction = instruction[:-1]
            instruction = instruction.strip()
            instructions.append(instruction)
            role = role.strip()
            roles.append(role)
        for i in range(len(self.edges)):
            self.edges[i].instruction = instructions[i]
            self.edges[i].role = roles[i]
    def find_shortest_path(self, uMID=None, vMID=None):
        if uMID == None:
            uMID = self.edges[0].sourceMID
        if vMID == None:
            vMID = self.edges[-1].targetMID
        Q, visit, preMID, preEdge = Queue(), {}, {}, {}
        Q.put(uMID)
        visit[uMID] = True
        while not Q.empty():
            mID = Q.get()
            if mID == vMID:
                id, pathNodes, pathEdges = vMID, [], []
                while id != uMID:
                    pathNodes.append(id)
                    pathEdges.append(preEdge[id])
                    id = preMID[id]
                pathNodes.append(uMID)
                pathNodes = pathNodes[::-1]
                pathEdges = pathEdges[::-1]
                return pathNodes, pathEdges
            nextMIDs = [edge.targetMID for edge in self.edges if edge.sourceMID == mID]
            nextEdges = [edge for edge in self.edges if edge.sourceMID == mID]
            for i in range(len(nextMIDs)):
                nextMID = nextMIDs[i]
                nextEdge = nextEdges[i]
                if nextMID not in visit.keys():
                    Q.put(nextMID)
                    visit[nextMID] = True
                    preMID[nextMID] = mID
                    preEdge[nextMID] = nextEdge
    def print(self):
        output = "\n"+"*" * 50 + " Graph " + "*" * 50 + "\n"
        output += "{} Nodes:\n".format(len(self.nodes.keys()))
        for key in self.nodes.keys():
            node = self.nodes[key]
            output += "{}, {}, {}\n".format(node.mID, node.version, node.commitMessage)
        output += "{} Edges:\n".format(len(self.edges))
        for edge in self.edges:
            output += "{}: {} -> {} ({}: {})\n".format(edge.edgeId, edge.sourceMID, edge.targetMID, edge.role, edge.instruction[:60])
        output += "*" * 50 + " Graph " + "*" * 50
        log_and_print_online(output)
    def to_dict(self):
        merged_node_dict = []
        merged_edge_dict = []
        for k,v in self.nodes.items():
            merged_node_dict.append(v.__dict__)
        for index,e in enumerate(self.edges):
            merged_edge_dict.append(e.__dict__ )
        return merged_node_dict,merged_edge_dict


/home/brandon/Projects/ChatDev/ecl/utils.py

import subprocess
import json
import yaml
import time
import logging
from easydict import EasyDict
import openai
from openai import OpenAI
import numpy as np
import os
from abc import ABC, abstractmethod
import tiktoken
from typing import Any, Dict
from tenacity import (
    retry,
    stop_after_attempt,
    wait_exponential
)
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if 'BASE_URL' in os.environ:
    BASE_URL = os.environ['BASE_URL']
else:
    BASE_URL = None
def getFilesFromType(sourceDir, filetype):
    files = []
    for root, directories, filenames in os.walk(sourceDir):
        for filename in filenames:
            if filename.endswith(filetype):
                files.append(os.path.join(root, filename))
    return files
def cmd(command: str):
    print(">> {}".format(command))
    text = subprocess.run(command, shell=True, text=True, stdout=subprocess.PIPE).stdout
    return text
def get_easyDict_from_filepath(path: str):
    if path.endswith('.json'):
        with open(path, 'r', encoding="utf-8") as file:
            config_map = json.load(file, strict=False)
            config_easydict = EasyDict(config_map)
            return config_easydict
    if path.endswith('.yaml'):
        file_data = open(path, 'r', encoding="utf-8").read()
        config_map = yaml.load(file_data, Loader=yaml.FullLoader)
        config_easydict = EasyDict(config_map)
        return config_easydict
    return None
def calc_max_token(messages, model):
    string = "\n".join([message["content"] for message in messages])
    encoding = tiktoken.encoding_for_model(model)
    num_prompt_tokens = len(encoding.encode(string))
    gap_between_send_receive = 50
    num_prompt_tokens += gap_between_send_receive
    num_max_token_map = {
        "gpt-3.5-turbo": 4096,
        "gpt-3.5-turbo-16k": 16384,
        "gpt-3.5-turbo-0613": 4096,
        "gpt-3.5-turbo-16k-0613": 16384,
        "gpt-4": 8192,
        "gpt-4-0613": 8192,
        "gpt-4-32k": 32768,
        "gpt-4o": 4096,         "gpt-4o-mini": 16384,     }
    num_max_token = num_max_token_map[model]
    num_max_completion_tokens = num_max_token - num_prompt_tokens
    return num_max_completion_tokens
class ModelBackend(ABC):
    r"""Base class for different model backends.
    May be OpenAI API, a local LLM, a stub for unit tests, etc."""
    @abstractmethod
    def run(self, *args, **kwargs) -> Dict[str, Any]:
        r"""Runs the query to the backend model.
        Raises:
            RuntimeError: if the return value from OpenAI API
            is not a dict that is expected.
        Returns:
            Dict[str, Any]: All backends must return a dict in OpenAI format.
        """
        pass
class OpenAIModel(ModelBackend):
    r"""OpenAI API in a unified ModelBackend interface."""
    def __init__(self, model_type, model_config_dict: Dict=None) -> None:
        super().__init__()
        self.model_type = model_type
        self.model_config_dict = model_config_dict
        if self.model_config_dict == None:
            self.model_config_dict = {"temperature": 0.2,
                                "top_p": 1.0,
                                "n": 1,
                                "stream": False,
                                "frequency_penalty": 0.0,
                                "presence_penalty": 0.0,
                                "logit_bias": {},
                                }
        self.prompt_tokens = 0
        self.completion_tokens = 0
        self.total_tokens = 0
    @retry(wait=wait_exponential(min=5, max=60), stop=stop_after_attempt(5))
    def run(self, messages) :
        if BASE_URL:
            client = openai.OpenAI(
                api_key=OPENAI_API_KEY,
                base_url=BASE_URL,
            )
        else:
            client = openai.OpenAI(
                api_key=OPENAI_API_KEY
            )
        current_retry = 0
        max_retry = 5
        string = "\n".join([message["content"] for message in messages])
        encoding = tiktoken.encoding_for_model(self.model_type)
        num_prompt_tokens = len(encoding.encode(string))
        gap_between_send_receive = 15 * len(messages)
        num_prompt_tokens += gap_between_send_receive
        num_max_token_map = {
            "gpt-3.5-turbo": 4096,
            "gpt-3.5-turbo-16k": 16384,
            "gpt-3.5-turbo-0613": 4096,
            "gpt-3.5-turbo-16k-0613": 16384,
            "gpt-4": 8192,
            "gpt-4-0613": 8192,
            "gpt-4-32k": 32768,
            "gpt-4o": 4096,             "gpt-4o-mini": 16384,         }
        response = client.chat.completions.create(messages = messages,
        model = "gpt-3.5-turbo-16k",
        temperature = 0.2,
        top_p = 1.0,
        n = 1,
        stream = False,
        frequency_penalty = 0.0,
        presence_penalty = 0.0,
        logit_bias = {},
        ).model_dump()
        response_text = response['choices'][0]['message']['content']
        num_max_token = num_max_token_map[self.model_type]
        num_max_completion_tokens = num_max_token - num_prompt_tokens
        self.model_config_dict['max_completion_tokens'] = num_max_completion_tokens
        log_and_print_online(
            "InstructionStar generation:\n**[OpenAI_Usage_Info Receive]**\nprompt_tokens: {}\ncompletion_tokens: {}\ntotal_tokens: {}\n".format(
                response["usage"]["prompt_tokens"], response["usage"]["completion_tokens"],
                response["usage"]["total_tokens"]))
        self.prompt_tokens += response["usage"]["prompt_tokens"]
        self.completion_tokens += response["usage"]["completion_tokens"]
        self.total_tokens += response["usage"]["total_tokens"]
        if not isinstance(response, Dict):
            raise RuntimeError("Unexpected return from OpenAI API")
        return response
def now():
    return time.strftime("%Y%m%d%H%M%S", time.localtime())
def log_and_print_online(content=None):
    if  content is not None:
        print(content)
        logging.info(content)


/home/brandon/Projects/ChatDev/ecl/experience.py

import os
import time
from graph import Graph, Node, Edge
import sys
import openai
import numpy as np
from codes import Codes
from utils import get_easyDict_from_filepath,OpenAIModel,log_and_print_online
from embedding import OpenAIEmbedding
sys.path.append(os.path.join(os.getcwd(),"ecl"))
class Shortcut:
    def __init__(self, sourceMID, targetMID, valueGain,instructionStar,edgeIDPath):
        self.sourceMID = sourceMID
        self.targetMID = targetMID
        self.valueGain = valueGain
        self.embedding  = None
        self.instructionStar = instructionStar
        self.edgeIDPath = edgeIDPath
    def __str__(self):
        return "{} -> {}  valueGain={:.6f} len(instructionPath)={} instructionStar={}".format(self.sourceMID, self.targetMID, self.valueGain, len(self.edgeIDPath), self.instructionStar[:100].replace("\n", ""))
class Experience:
    def __init__(self, graph: Graph, directory: str):
        cfg = get_easyDict_from_filepath("./ecl/config.yaml")
        self.graph: Graph = graph
        self.directory = directory
        self.threshold = cfg.experience.threshold
        self.upperLimit = cfg.experience.upper_limit
        self.experiences = []
        self.model = OpenAIModel(model_type="gpt-3.5-turbo-16k")
        self.embedding_method = OpenAIEmbedding()
        for edge in self.graph.edges:
            node = self.graph.nodes[edge.targetMID]
            node.degree += 1
        assert len(self.graph.edges) * 1 == sum([self.graph.nodes[mid].degree for mid in self.graph.nodes.keys()])         for mid in self.graph.nodes.keys():
            node = self.graph.nodes[mid]
            node.value = 1.0
    def reap_zombie(self):
        pathNodes, pathEdges = self.graph.find_shortest_path()
        zombieEdges = [edge for edge in self.graph.edges if edge not in pathEdges]
        zombieNodes = [self.graph.nodes[mid] for mid in self.graph.nodes.keys() if mid not in pathNodes]
        log_zombieedges = "ZOMBIE EDGES: \n"
        log_zombienodes = "ZOMBIE NODES: \n"
        for edge in zombieEdges:
            self.graph.edges.remove(edge)
            log_zombieedges += "Zombie Edge {} -> {} Removed\n".format(edge.sourceMID, edge.targetMID)
        log_and_print_online(log_zombieedges)
        for node in zombieNodes:
            del self.graph.nodes[node.mID]
            log_zombienodes += "Zombie Node {} Removed\n".format(node.mID)
        log_and_print_online(log_zombienodes)
    def estimate(self):
        if len(self.graph.edges) == 0:
            return
        for mid in self.graph.nodes.keys():
            node = self.graph.nodes[mid]
            if len(node.code) == 0:
                node.value *= 0.0
        log_and_print_online()
        vn = self.graph.nodes[self.graph.edges[-1].targetMID]
        for mid in self.graph.nodes.keys():
            vi = self.graph.nodes[mid]
            vi.value = self._pairwise_estimate(vi, vn)
        log_and_print_online("Init value:"+ str({mid: self.graph.nodes[mid].value for mid in self.graph.nodes.keys()})+"\n\nEstimated value:"+str({mid: self.graph.nodes[mid].value for mid in self.graph.nodes.keys()}))
    def get_cosine_similarity(self, embeddingi, embeddingj):
        embeddingi = np.array(embeddingi)
        embeddingj = np.array(embeddingj)
        cos_sim = embeddingi.dot(embeddingj) / (np.linalg.norm(embeddingi) * np.linalg.norm(embeddingj))
        return cos_sim
    def _pairwise_estimate(self, vi: Node, vj: Node):
        if vi.value == 0.0:
            return 0.0
        pathNodes, pathEdges = self.graph.find_shortest_path(vi.mID, vj.mID)
        distance_weight = 1.0 / len(pathEdges) if len(pathEdges) != 0 else 1.0
        codes = Codes(vi.code)
        codes._rewrite_codes()
        (exist_bugs_flag, test_reports) = codes._run_codes()
        compile_weight = 0.0 if exist_bugs_flag else 1.0
        if compile_weight == 0.0:
            return 0.0
        maximum_degree = max([self.graph.nodes[mid].degree for mid in self.graph.nodes.keys()])
        degree_weight = vi.degree * 1.0 / maximum_degree
        if degree_weight == 0.0:
            return 0.0
        start_time = time.time()
        vi_code_emb = self.embedding_method.get_code_embedding(vi.code) if vi.embedding is None else vi.embedding
        if vi.embedding is None:
            end_time =time.time()
            log_and_print_online("DONE:get node embedding\ntime cost:{}\n".format(end_time-start_time))
        vi.embedding = vi_code_emb
        start_time = time.time()
        vj_code_emb = self.embedding_method.get_code_embedding(vj.code) if vj.embedding is None else vj.embedding
        if vj.embedding is None:
            end_time =time.time()
            log_and_print_online("DONE:get node embedding\ntime cost:{}\n".format(end_time-start_time))
        vj.embedding = vj_code_emb
        code_code_cos_sim = self.get_cosine_similarity(vi_code_emb, vj_code_emb)
        if code_code_cos_sim == 0.0:
            return 0.0
        filenames = os.listdir(self.directory)
        filename = [filename for filename in filenames if filename.endswith(".prompt")][0]
        task_prompt = open(os.path.join(self.directory, filename), "r").read().strip()
        start_time = time.time()
        task_emb = self.embedding_method.get_text_embedding(task_prompt) if self.graph.task_embedding is None else self.graph.task_embedding
        if self.graph.task_embedding is None:
            end_time =time.time()
            log_and_print_online("DONE:get task prompt embedding\ntime cost:{}\n".format(end_time-start_time))
        self.graph.task = task_prompt
        self.graph.task_embedding = task_emb
        code_text_cos_sim = self.get_cosine_similarity(vi_code_emb, task_emb)
        if code_text_cos_sim == 0.0:
            return 0.0
        assert distance_weight >= 0.0 and distance_weight <= 1.0
        assert compile_weight >= 0.0 and compile_weight <= 1.0
        assert degree_weight >= 0.0 and degree_weight <= 1.0
        distance = vj.version - vi.version
        if distance == 0:
            return 1
        else:
            return code_code_cos_sim * 1.0 / distance * code_text_cos_sim * compile_weight * degree_weight
    def get_transitive_closure(self):
        def print_matrix(matrix):
            for nodei in matrix.keys():
                for nodej in matrix.keys():
                    print(matrix[nodei][nodej], end=" ")
                print()
            print()
        matrix = {}
        for mid1 in self.graph.nodes:
            for mid2 in self.graph.nodes:
                if mid1 not in matrix.keys():
                    matrix[mid1] = {}
                matrix[mid1][mid2] = 0
        pathNodes, pathEdges = self.graph.find_shortest_path()
        for edge in pathEdges:
            matrix[edge.sourceMID][edge.targetMID] = 1
        print("Init Adjacent Matrix:")
        print_matrix(matrix)
        for nodek in matrix.keys():
            for nodei in matrix.keys():
                for nodej in matrix.keys():
                    if matrix[nodei][nodej] == 1 or (matrix[nodei][nodek] == 1 and matrix[nodek][nodej] == 1):
                        matrix[nodei][nodej] = 1
        print("Transitive Closure:")
        print_matrix(matrix)
        return matrix
    def extract_thresholded_experiences(self):
        if len(self.graph.edges) == 0:
            return []
        if len(self.graph.nodes) < 2:
            return []
        assert len(self.graph.nodes.keys()) >= 2
        matrix = self.get_transitive_closure()
        experiences = []
        pathNodes, _ = self.graph.find_shortest_path()
        for id1 in pathNodes:
            for id2 in pathNodes:
                valueGain = self.graph.nodes[id2].value - self.graph.nodes[id1].value
                flag0 = id1 != id2
                flag1 = self.graph.exists_edge(id1, id2) == False
                flag2 = matrix[id1][id2] == 1
                flag3 = valueGain >= self.threshold
                code_lines = [line.lower().strip() for line in self.graph.nodes[id2].code.split("\n")]
                flag4 = not ("pass".lower() in code_lines or "TODO".lower() in code_lines)
                if flag0 and flag1 and flag2 and flag3 and flag4:
                    _, edges = self.graph.find_shortest_path(uMID=id1, vMID=id2)
                    edgeIDPath = [edge.edgeId for edge in edges]
                    sourcecode=self.graph.nodes[id1].code
                    targetcode=self.graph.nodes[id2].code
                    shortcut = Shortcut(sourceMID=id1, targetMID=id2, valueGain=valueGain,instructionStar="", edgeIDPath=edgeIDPath)
                    experiences.append(shortcut)
        experiences = sorted(experiences, key=lambda item: item.valueGain, reverse = True)
        if len(experiences) > self.upperLimit:
            log_and_print_online("{} experieces truncated.".format(len(experiences) - self.upperLimit))
            experiences = experiences[:self.upperLimit]
        prompt_template0 = """Provide detailed instructions to generate the following code:
{targetcode}
The instructions should encompass:
Modules and Classes:
- Enumerate necessary modules.
- Detail the classes, their attributes, and methods within these modules.
- Articulate the purpose and operation of each class.
Data Structures:
- Identify the requisite data structures.
- Describe their names, attributes, and operations.
Main Program Flow:
- Outline the principal progression of the program.
- Highlight the sequence for initializing and invoking other modules, classes, and methods within the primary file (e.g., main.py).
- Clarify the logical progression during runtime.
Input and Output:
- Specify the method by which the program accepts input, be it from users or external sources.
- Elaborate on the projected outputs or actions of the software.
Exception Handling:
- Instruct on the approach to manage potential anomalies or exceptions during execution to ascertain stability and robustness.
External Libraries and Dependencies:
- Explicitly list the necessary external libraries or dependencies, their versions, and their functionalities.
Please output the instructions directly."""
        prompt_template1 = """Please provide detailed instructions on how to transition from the initial code version represented by source code to the final version indicated by target code.
Source Code:
{sourcecode}
Target Code:
{targetcode}
The instructions should encompass:
Modules and Classes: Detail the modules to be incorporated, along with the names, attributes, and operations of any classes to be added or amended. Furthermore, describe the intended function and utility of these new or altered classes.
Data Structures: Clearly define any data structures that need introduction or alteration, elucidating their names, attributes, and functionalities.
Main Program Flow: Outline the program's primary sequence of operations, highlighting the procedures to initialize and invoke other modules, classes, and methods in the primary file (e.g., main.py). Describe the program's logic sequence during its execution.
Input and Output: Define the methodology by which the program will acquire input, whether from users or external data sources. Also, characterize the projected outputs or behaviors of the application.
Exception Handling: Provide guidance on managing potential discrepancies or exceptions that might emerge during the software's operation, ensuring its resilience and reliability.
External Libraries and Dependencies: If the implementation requires external libraries or dependencies, specify their names, versions, and their respective purposes explicitly."""
        for shortcut in experiences:
            sourcecode = self.graph.nodes[shortcut.sourceMID].code
            targetcode = self.graph.nodes[shortcut.targetMID].code
            if sourcecode == "":
                prompt = prompt_template0.replace("{targetcode}", targetcode)
                response = self.model.run(messages=[{"role": "system", "content": prompt}])
                print("instructionstar generated")
            else:
                prompt = prompt_template1.replace("{sourcecode}", sourcecode).replace("{targetcode}", targetcode)
                response = self.model.run(messages=[{"role": "system", "content": prompt}])
                print("instructionstar generated")
            shortcut.instructionStar = response["choices"][0]["message"]["content"]
        output = "Sorted-and-Truncated Experiences (with instructionStar):"
        self.experiences = experiences
        for experience in experiences:
            output += str(experience)
        log_and_print_online(output)
        log_and_print_online("[Conclusion]:\nprompt_tokens:{}, completion_tokens:{}, total_tokens:{}".format(self.model.prompt_tokens,self.model.completion_tokens,self.model.total_tokens))
        log_and_print_online("[Conclusion]:\ntext_prompt_tokens:{}, text_total_tokens:{}\ncode_prompt_tokens:{}, code_total_tokens:{}\nprompt_tokens:{}, total_tokens:{}".format(self.embedding_method.text_prompt_tokens,
                                                                                                                                                                                self.embedding_method.text_total_tokens,
                                                                                                                                                                                self.embedding_method.code_prompt_tokens,
                                                                                                                                                                                self.embedding_method.code_total_tokens,
                                                                                                                                                                                self.embedding_method.prompt_tokens,
                                                                                                                                                                                self.embedding_method.total_tokens))
        return experiences
    def to_dict(self):
        merged_data = []
        for index, ex in enumerate(self.experiences):
            merged_data.append(ex.__dict__)
        return merged_data


/home/brandon/Projects/ChatDev/ecl/embedding.py

import os
import openai
from openai import OpenAI
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if 'BASE_URL' in os.environ:
    BASE_URL = os.environ['BASE_URL']
else:
    BASE_URL = None
import sys
import time
from tenacity import (
    retry,
    stop_after_attempt,
    wait_random_exponential,
    wait_fixed
)
from utils import log_and_print_online
sys.path.append(os.path.join(os.getcwd(),"ecl"))
class OpenAIEmbedding:
    def __init__(self, **params):
        self.code_prompt_tokens = 0
        self.text_prompt_tokens = 0
        self.code_total_tokens = 0
        self.text_total_tokens = 0
        self.prompt_tokens = 0
        self.total_tokens = 0
    @retry(wait=wait_random_exponential(min=2, max=5), stop=stop_after_attempt(10))
    def get_text_embedding(self,text: str):
            if BASE_URL:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY,
                    base_url=BASE_URL,
                )
            else:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY
                )
            if len(text)>8191:
                  text = text[:8190]
            response = client.embeddings.create(input = text, model="text-embedding-ada-002").model_dump()
            embedding = response['data'][0]['embedding']
            log_and_print_online(
            "Get text embedding from {}:\n**[OpenAI_Usage_Info Receive]**\nprompt_tokens: {}\ntotal_tokens: {}\n".format(
                response["model"],response["usage"]["prompt_tokens"],response["usage"]["total_tokens"]))
            self.text_prompt_tokens += response["usage"]["prompt_tokens"]
            self.text_total_tokens += response["usage"]["total_tokens"]
            self.prompt_tokens += response["usage"]["prompt_tokens"]
            self.total_tokens += response["usage"]["total_tokens"]
            return embedding
    @retry(wait=wait_random_exponential(min=10, max=60), stop=stop_after_attempt(10))
    def get_code_embedding(self,code: str):
            if BASE_URL:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY,
                    base_url=BASE_URL,
                )
            else:
                client = openai.OpenAI(
                    api_key=OPENAI_API_KEY
                )
            if len(code) == 0:
                  code = "#"
            elif len(code) >8191:
                  code = code[0:8190]
            response = client.embeddings.create(input=code, model="text-embedding-ada-002").model_dump()
            embedding = response['data'][0]['embedding']
            log_and_print_online(
            "Get code embedding from {}:\n**[OpenAI_Usage_Info Receive]**\nprompt_tokens: {}\ntotal_tokens: {}\n".format(
                response["model"],response["usage"]["prompt_tokens"],response["usage"]["total_tokens"]))
            self.code_prompt_tokens += response["usage"]["prompt_tokens"]
            self.code_total_tokens += response["usage"]["total_tokens"]
            self.prompt_tokens += response["usage"]["prompt_tokens"]
            self.total_tokens += response["usage"]["total_tokens"]
            return embedding


/home/brandon/Projects/ChatDev/ecl/memory.py

from dataclasses import dataclass
from typing import Any, Dict, List, Optional
from abc import ABC, abstractmethod
import json
import time
import math
import os
import sys
import openai
import faiss
import numpy as np
from datetime import datetime
sys.path.append(os.path.join(os.getcwd(),"ecl"))
from utils import get_easyDict_from_filepath,log_and_print_online
from embedding import OpenAIEmbedding
class MemoryBase(ABC):
    def __init__(self, directory: str) -> None:
        self.directory: str = directory
        cfg = get_easyDict_from_filepath("./ecl/config.yaml")
        self.top_k_code = cfg.retrieval.top_k_code
        self.top_k_text = cfg.retrieval.top_k_text
        self.code_thresh = cfg.retrieval.searchcode_thresh
        self.text_thresh = cfg.retrieval.searchtext_thresh
        self.embedding_method = None
        if cfg.embedding_method == "OpenAI":
            self.embedding_method = OpenAIEmbedding()
        self.content = None
        if os.path.exists(self.directory) and self.directory.endswith('.json'):
            with open(self.directory) as file:
                self.content = json.load(file)
        elif os.path.exists(self.directory) is False:
            with open(self.directory, 'w') as file:
                json.dump({}, file)              file.close()
            print(f"Now the memory file '{self.directory}' is created")
        if self.content is None:
            print("Empty Memory")
    @abstractmethod
    def memory_retrieval(self) -> str:
        pass
    def _get_memory_count(self) ->int:
        if isinstance(self.content,list):
            return self.content[-1].get("total")
        else:
            return 0
class AllMemory(MemoryBase):
    def __init__(self, directory: str):
        super().__init__(directory)
    def _init_explist(self):
        self.exp_list = None
        if self.content == None:
            self.exp_list = None
        else :
            for t in self.content:
                for experience in t.get("experineces"):
                    self.exp_list.append(experience)
    def _memory_clear(self) ->None:
        if os.path.exists(self.directory) and self.directory.endswith('.json'):
            with open(self.directory) as file:
                json.dump({},file)
                file.close()
        self.content = None
    def get_codesample(self) ->str:
        if self._get_memory_count() >=1:
            return self.content[-1].get("nodes")[-1]["code"]
        else:
            return None
    def get_textsample(self) ->str:
        if self._get_memory_count() >=1:
            return self.content[-1].get("edges")[-1].get("instruction")
        else:
            return None
    def _get_codeembedding(self,mid) :
        for t in self.content:
            for node in t["nodes"]:
                if node["mID"] == mid:
                    return node.get("embedding")
    def _get_instructionstar(self,mid):
        max_valueGain = -1
        for t in self.content:
            for experience in t["experiences"]:
                if experience == None :
                    pass
                elif experience["sourceMID"] == mid:
                    if experience.get("valueGain") >= max_valueGain:
                        instructionstar = experience.get("instructionStar")
        return instructionstar
    def _get_task_from_source(self,mid):
        task = None
        task_dir = None
        for t in self.content:
            for experience in t["experiences"]:
                if experience == None :
                    pass
                elif experience["sourceMID"] == mid:
                    task = t["task"]
                    task_dir = t["dir"]
        return task,task_dir
    def _get_task_from_target(self,mid):
        task = None
        task_dir = None
        for t in self.content:
            for experience in t["experiences"]:
                if experience == None :
                    pass
                elif experience["targetMID"] == mid:
                    task = t["task"]
                    task_dir = t["dir"]
        return task,task_dir
    def memory_retrieval(self,input_message:str, type:str, k = None) :
        if k == None:
            if type == "code":
                return self.search_code(input_message,self.top_k_code)
            elif type == "text":
                return self.search_text(input_message,self.top_k_text)
            else:
                return None
        else:
            if type == "code":
                return self.search_code(input_message, k)
            elif type == "text":
                return self.search_text(input_message, k)
            else:
                return None
    def search_text(self, code_query, k:int):
        """
        search instructionStar from a code query
        Keyword arguments:
        code_query -- code input
        k -- the number of instructions to search 
        Return: 
        (best k instructionStar, k)
        """
        if self._get_memory_count() == 0 or code_query == None or k == 0:
            return None            
        else :
            code_query =  self.embedding_method.get_code_embedding(code_query)
            if isinstance(code_query,list):
                code_query=np.array(code_query,dtype=np.float32)
            code_query = code_query.reshape(1,-1)
            sourcecodemid_list = []            code_embeddings = []            for t in self.content :
                for experience in t["experiences"]:
                    sourcecodemid_list.append(experience.get("sourceMID"))
            sourcecodemid_list = list(set(sourcecodemid_list))            for mid in sourcecodemid_list:
                code_embeddings.append(self._get_codeembedding(mid))
            code_embedding_data = np.array(code_embeddings, dtype=np.float32)
            faiss.normalize_L2(code_embedding_data)
            faiss.normalize_L2(code_query)
            index = faiss.IndexFlatL2(code_embedding_data.shape[1])
            index.add(code_embedding_data)
            distances, indices = index.search(code_query, k)
            similarities = 1-(1/2)*distances
            task_list = []
            task_dir_list = []
            instructionStar_list = []
            sourceMIDS = []
            for i in range(k):
                index = indices[0][i]
                similarity = similarities[0][i]
                if index != -1 and similarity >= self.text_thresh:
                        task, task_dir = self._get_task_from_source(sourcecodemid_list[index])
                        sourceMIDS.append(sourcecodemid_list[index])
                        task_list.append(task)
                        task_dir_list.append(task_dir)
                        instructionStar_list.append(self._get_instructionstar(sourcecodemid_list[index]))
            filtered_similarities = np.array2string(similarities[:,:k])
            return instructionStar_list, filtered_similarities, sourceMIDS, task_list, task_dir_list
    def search_code(self, text_query, k:int):
        """search best code from a text query
        Keyword arguments:
        text_query -- text input
        k -- the number of code to search 
        Return: (best k code, k)
        """
        if self._get_memory_count() == 0 or text_query == None or k == 0:
            return None            
        else :
            text_query = self.embedding_method.get_text_embedding(text_query)
            if isinstance(text_query,list):
                text_query=np.array(text_query,dtype=np.float32)
            text_query = text_query.reshape(1,-1)
            text_embeddings = [exp.get("embedding") for t in self.content for exp in t["experiences"]]
            text_embedding_data = np.array(text_embeddings, dtype=np.float32)
            faiss.normalize_L2(text_embedding_data)
            faiss.normalize_L2(text_query)
            total_instructionStar = text_embedding_data.shape[0]
            index = faiss.IndexFlatL2(text_embedding_data.shape[1])
            index.add(text_embedding_data)
            distances, indices = index.search(text_query, total_instructionStar)
            similarities = 1-(1/2)*distances
            code_node_list = [node for t in self.content for node in t["nodes"]]
            targetMIDs = []
            target_code = []
            task_list = []
            task_dir_list = []
            filtered_similarities = []
            experience_list = [experience for t in self.content for experience in t["experiences"]]
            counter = 0
            added_set = set()
            for i in range(total_instructionStar):
                index =  indices[0][i]
                similarity = similarities[0][i]
                if index != -1 and counter < k:
                    if similarity <= self.code_thresh:
                        break
                    else:
                        mid = experience_list[index].get("targetMID")
                        if mid not in added_set:
                            targetMIDs.append(mid)
                            added_set.add(mid)
                            counter += 1
                            filtered_similarities.append(str(similarity))
                else:
                    break
            for targetMID in targetMIDs:
                for code_node in code_node_list:
                    if targetMID == code_node.get("mID"):
                        target_code.append(code_node.get("code"))
                        task, task_dir = self._get_task_from_target(targetMID)
                        task_list.append(task)
                        task_dir_list.append(task_dir)
            filtered_similarities = ",".join(filtered_similarities)
            return target_code, filtered_similarities, targetMIDs, task_list, task_dir_list
class Memory:
    def __init__(self):
        self.directory: str = None
        self.id_enabled : bool = False
        self.user_memory_filepath: str = None
        self.assistant_memory_filepath: str = None
        self.update_count = 0
        self.memory_keys: List[str] = ["All"]
        self.memory_data = {}
    def __str__(self) -> str:
        if self.memory_data.get("All") == None:
            return "No existed memory"
        else:
            return "Current memory length:{}".format(self.memory_data["All"]._get_memory_count())
    def _set_embedding(self,experience):
        graph = experience.graph
        edge_start_time = time.time()
        for edge in graph.edges:
            if edge.embedding is None:
                start_time =time.time()
                edge.embedding = self.memory_data["All"].embedding_method.get_text_embedding(edge.instruction)
                end_time = time.time()
                log_and_print_online("DONE: get edge embedding\ntime cost:{}\n".format(end_time-start_time))
        edge_duration =  time.time() - edge_start_time
        log_and_print_online("DONE: got all EDGE embeddings\nEDGE embedding time cost:{}\n".format(edge_duration))
        node_start_time =  time.time()
        for node_id in graph.nodes:
            node = graph.nodes[node_id]
            if node.embedding is None:
                start_time = time.time()
                node.embedding = self.memory_data["All"].embedding_method.get_code_embedding(node.code)
                end_time = time.time()
                log_and_print_online("DONE: get node embedding\ntime cost:{}\n".format(end_time-start_time))
        node_duration = ( time.time() - node_start_time)
        log_and_print_online("DONE: got all NODE embeddings\nNODE embedding time cost:{}\n".format(node_duration))
        exp_start_time = time.time()
        for exp in experience.experiences:
            if exp.embedding is None:
                start_time = time.time()
                exp.embedding = self.memory_data["All"].embedding_method.get_text_embedding(exp.instructionStar)
                end_time = time.time()
                log_and_print_online("DONE: get exprience embedding\ntime cost:{}\n".format(end_time-start_time))
        exp_duration = ( time.time() - exp_start_time)
        log_and_print_online("DONE: got all EXPERIENCE embeddings\nEXPERIENCE embedding time cost:{}\n".format(exp_duration))
        duration = edge_duration + node_duration + exp_duration
        log_and_print_online("All embedding DONE\ntime cost:{}\n".format(duration))
    def upload(self):
        self.directory = os.path.join(os.getcwd(),"ecl","memory")
        if os.path.exists(self.directory) is False:
            os.mkdir(self.directory)
        for key in self.memory_keys:
            if key =="All":
                path = os.path.join(self.directory,"MemoryCards.json")
                self.memory_data[key] = AllMemory(path)
    def upload_from_experience(self, experience):
        self._set_embedding(experience)
        with open(self.memory_data["All"].directory, 'w') as file:
            node_data,edge_data = experience.graph.to_dict()
            experience_data = experience.to_dict()
            merged_dic = []
            index = 0
            previous_memory = []
            if self.memory_data["All"].content != None and  len(self.memory_data["All"].content) != 0 :
                previous_memory = self.memory_data["All"].content
            log_and_print_online("len(previous_memory)={}".format(len(previous_memory)))
            if len(previous_memory) != 0 and isinstance(previous_memory,list):
                for index,t in enumerate(previous_memory):
                    if isinstance(t,list):
                        for subindex,subt in enumerate(t):
                            if len(subt)!=0:
                                merged_dic.append(subt)
                    elif len(t)!=0 :
                        merged_dic.append(t)
                index = merged_dic[-1]["total"]
            elif len(previous_memory) != 0 :
                merged_dic.append(previous_memory)
                index = 1
            dirList = [t["dir"] for t in merged_dic]
            combined_json_str = {}
            combined_json_str["index"] = index
            combined_json_str["dir"] = experience.graph.directory
            combined_json_str["task"] = experience.graph.task
            combined_json_str["nodes"] = node_data
            combined_json_str["edges"] = edge_data
            combined_json_str["experiences"] = experience_data
            combined_json_str["total"] = combined_json_str["index"]+1
            if self.memory_data["All"].content != None and len(self.memory_data["All"].content)!=0:
                    merged_dic.append(combined_json_str)
            else :
                merged_dic.append(combined_json_str)
            json.dump(merged_dic, file)
            log_and_print_online("len(merged_dic)={}".format(len(merged_dic))+"\n merged_dic dumped to {}".format(self.memory_data["All"].directory))
            log_and_print_online("[Conclusion]:\ntext_prompt_tokens:{}, text_total_tokens:{}\ncode_prompt_tokens:{}, code_total_tokens:{}\nprompt_tokens:{}, total_tokens:{}".format(self.memory_data["All"].embedding_method.text_prompt_tokens,
                                                                                                                                                                                self.memory_data["All"].embedding_method.text_total_tokens,
                                                                                                                                                                                self.memory_data["All"].embedding_method.code_prompt_tokens,
                                                                                                                                                                                self.memory_data["All"].embedding_method.code_total_tokens,
                                                                                                                                                                                self.memory_data["All"].embedding_method.prompt_tokens,
                                                                                                                                                                                self.memory_data["All"].embedding_method.total_tokens))
            file.close()
    def delete_memroy(self,idx:int):
        with open(self.memory_data["All"].directory, 'w') as file:
            merged_dic = []
            index = 0
            previous_memory = []
            if self.memory_data["All"].content != None and  len(self.memory_data["All"].content) != 0 :
                previous_memory = self.memory_data["All"].content
            if len(previous_memory) != 0 and isinstance(previous_memory,list):
                for index,t in enumerate(previous_memory):
                    if isinstance(t,list):
                        for subindex,subt in enumerate(t):
                            if len(subt)!=0:
                                merged_dic.append(subt)
                    elif len(t)!=0 :
                        merged_dic.append(t)
                index = merged_dic[-1]["total"]
            elif len(previous_memory) != 0 :
                merged_dic.append(previous_memory)
                index = 1
            if idx >= len(merged_dic):
                json.dump(merged_dic,file)
            else :
                merged_dic.pop(idx)
                json.dump(merged_dic,file)
            file.close()


/home/brandon/Projects/ChatDev/ecl/ece.py

import os
import json
import re
import numpy as np
import argparse
point = 0.95
eliminate_threshold = 0.95
def retrieve_eliminate(Path_directory,UsedMemory_directory,Evolved_directory):
    experiences_use = []
    content = []
    content1 = []
    experiences_total = []
    usetime_total = []
    exp_dict = {}
    eliminated_exp = []
    directories = [os.path.join(Path_directory, d) for d in os.listdir(Path_directory) if os.path.isdir(os.path.join(Path_directory, d))]
    for subdir in directories:
        directory = subdir
        logdir = [filename for filename in os.listdir(directory) if filename.endswith(".log")]
        logdir = os.path.join(directory, logdir[0])
        content1 = open(logdir, "r", encoding='UTF-8').read()
        pattern1 = re.compile(r'the source code MIDs is (.*?),', re.S)
        experiences_sourceMIDs = re.findall(pattern1, content1)
        pattern2 = re.compile(r'the target code MIDs is (.*?)\n',re.S)
        experiences_targetMIDs = re.findall(pattern2, content1)
        pattern3 = re.compile(r'And the (.*?) similarity is',re.S)
        experiences_type = re.findall(pattern3,content1)
        for i in range(0,len(experiences_sourceMIDs)):
            sourceMID = experiences_sourceMIDs[i]
            targetMID = experiences_targetMIDs[i]
            type = experiences_type[i]
            experiences_use.append((sourceMID,targetMID,type))
    with open(UsedMemory_directory) as file:
        content1 = json.load(file)
        new_content = []
        for memorypiece in content1:
            experiences = memorypiece.get("experiences")
            if experiences != None:
                experiences_total.extend(experiences)
                for experience in experiences:
                    experience["use_time"] = 0
        for experience in experiences_use:
            for experience_t in experiences_total:
                if experience[0] == experience_t["sourceMID"] and experience[1] == experience_t["targetMID"]:
                    experience_t["use_time"] += 1
        for i,experience_t in enumerate(experiences_total):
            usetime_total.append(experience_t["use_time"])
            exp_dict[i] = experience_t["use_time"]
        file.close()
    usetime_sort = sorted(usetime_total)[::-1]
    total = np.sum(usetime_sort)
    for i in range(len(usetime_sort)):
        if np.sum(usetime_sort[:i])/total >= point:
            alpha= i
            break
    index=0
    for k in sorted(exp_dict,key=exp_dict.__getitem__,reverse=True):
        if index <= alpha:
            eliminated_exp.append(experiences_total[k])
            index += 1
        else:
            break
    for memorypiece in content1:
        experiences = memorypiece.get("experiences")
        retrieve_eliminated_experienceList = []
        if experiences != None:
            for experience in experiences:
                if experience in eliminated_exp:
                    retrieve_eliminated_experienceList.append(experience)
        memorypiece["experiences"] = retrieve_eliminated_experienceList
        new_content.append(memorypiece)
    with open(Evolved_directory, 'w') as file:
        json.dump(new_content, file)
def gain_eliminate(NewMemory_directory,Evolved_directory):
    content2 = []
    with open(NewMemory_directory) as file:
        content2 = json.load(file)
        new_content2 = []
        for memorypiece in content2:
            experiences = memorypiece.get("experiences")
            gain_eliminated_experienceList = []
            if experiences != None:
                for experience in experiences:
                    valueGain = experience.get("valueGain")
                    if valueGain >= eliminate_threshold:
                        gain_eliminated_experienceList.append(experience)
                memorypiece["experiences"] = gain_eliminated_experienceList
                new_content2.append(memorypiece)
            else:
                new_content2.append(memorypiece)
        file.close()
    with open(Evolved_directory, 'r') as file:
        new_content = json.load(file)
    new_content = new_content + new_content2
    with open(Evolved_directory, 'w') as file:
        json.dump(new_content, file)
def recount_experience(Evolved_directory):
    with open(Evolved_directory, 'r') as file:
        content = json.load(file)
    with open(Evolved_directory, 'w') as file:
        i = 0
        for memorypiece in content:
            memorypiece["total"] = i
            i += 1
        json.dump(content, file)
def main():
    parser = argparse.ArgumentParser(description="Process memory with some directories.")
    parser.add_argument("Path_directory", type = str, help="The directory of software")
    parser.add_argument("UsedMemory_directory", type=str, help="The directory of MemoryCards")
    parser.add_argument("NewMemory_directory", type=str, help="The directory of NewMemoryCards")
    parser.add_argument("Evolved_directory", type= str, help="The directory for output")
    args = parser.parse_args()
    retrieve_eliminate(args.Path_directory,args.UsedMemory_directory,args.Evolved_directory)
    gain_eliminate(args.NewMemory_directory,args.Evolved_directory)
    recount_experience(args.Evolved_directory)
if __name__ == "__main__":
    main()


/home/brandon/Projects/ChatDev/ecl/ecl.py

import argparse
from graph import Graph
from experience import Experience
from utils import get_easyDict_from_filepath,now ,log_and_print_online
from memory import Memory
import sys
import os 
import logging
sys.path.append(os.path.join(os.getcwd(),"ecl"))
def memorize(directory):
    print(directory)
    cfg = get_easyDict_from_filepath("./ecl/config.yaml")
    folder_path = "ecl/logs"
    if not os.path.exists(folder_path):
        os.mkdir(folder_path)
    log_filename = folder_path+"/ecl_{}.log".format(os.path.basename(directory))
    print(log_filename)
    root_logger = logging.getLogger()
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    file_handler = logging.FileHandler(log_filename, mode='w', encoding='utf-8')
    formatter = logging.Formatter('[%(asctime)s %(levelname)s] %(message)s', datefmt='%Y-%d-%m %H:%M:%S')
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    root_logger.setLevel(logging.INFO)
    log_and_print_online("[Config]:"+str(cfg))
    graph = Graph()
    graph.create_from_log(directory)
    graph.print()
    experience = Experience(graph, directory)
    if len(graph.nodes)==0 or len(graph.edges) == 0:
        log_and_print_online("No node or no edges constrcuted from the task execution process, maybe due to a unfinished software production or sometimes single node appears")
    else:
        if cfg.experience.reap_zombie:
            experience.reap_zombie()
            graph.print()
    experience.estimate()
    experiences = experience.extract_thresholded_experiences()
    memory = Memory()
    memory.upload()
    memory.upload_from_experience(experience)
def process_directory(directory):
    for root, dirs, files in os.walk(directory):
        for directory in dirs:
            file_path = os.path.join(root, directory)
            memorize(file_path)
def main():
    parser = argparse.ArgumentParser(description="Memorize one software or softwares from the directory.")
    parser.add_argument("path", help="The file or directory to process")
    parser.add_argument("-d", "--directory", action="store_true", help="Process all files in the given directory.")
    args = parser.parse_args()
    if args.directory:
        process_directory(args.path)
    else:
        memorize(args.path)
if __name__ == "__main__":
    main()

/home/brandon/Projects/ChatDev/ecl/codes.py

import difflib
import os
import re
import subprocess
import shutil
import time
import signal
from utils import get_easyDict_from_filepath
class Codes:
    def __init__(self, generated_content=""):
        cfg = get_easyDict_from_filepath("./ecl/config.yaml")
        self.directory: str = cfg.codes.tmp_directory
        self.main_script: str = cfg.codes.main_script
        self.generated_content: str = generated_content
        self.codebooks = {}
        def extract_filename_from_line(lines):
            file_name = ""
            for candidate in re.finditer(r"(\w+\.\w+)", lines, re.DOTALL):
                file_name = candidate.group()
                file_name = file_name.lower()
            return file_name
        def extract_filename_from_code(code):
            file_name = ""
            regex_extract = r"class (\S+?):\n"
            matches_extract = re.finditer(regex_extract, code, re.DOTALL)
            for match_extract in matches_extract:
                file_name = match_extract.group(1)
            file_name = file_name.lower().split("(")[0] + ".py"
            return file_name
        if generated_content != "":
            regex = r"(.+?)\n```.*?\n(.*?)```"
            matches = re.finditer(regex, self.generated_content, re.DOTALL)
            for match in matches:
                code = match.group(2)
                if "CODE" in code:
                    continue
                group1 = match.group(1)
                filename = extract_filename_from_line(group1)
                if "__main__" in code:
                    filename = "main.py"
                if filename == "":                      filename = extract_filename_from_code(code)
                assert filename != ""
                if filename is not None and code is not None and len(filename) > 0 and len(code) > 0:
                    self.codebooks[filename] = self._format_code(code)
    def _format_code(self, code):
        code = "\n".join([line for line in code.split("\n") if len(line.strip()) > 0])
        return code
    def _update_codes(self, generated_content):
        new_codes = Codes(generated_content)
        differ = difflib.Differ()
        for key in new_codes.codebooks.keys():
            if key not in self.codebooks.keys() or self.codebooks[key] != new_codes.codebooks[key]:
                update_codes_content = "**[Update Codes]**\n\n"
                update_codes_content += "{} updated.\n".format(key)
                old_codes_content = self.codebooks[key] if key in self.codebooks.keys() else "# None"
                new_codes_content = new_codes.codebooks[key]
                lines_old = old_codes_content.splitlines()
                lines_new = new_codes_content.splitlines()
                unified_diff = difflib.unified_diff(lines_old, lines_new, lineterm='', fromfile='Old', tofile='New')
                unified_diff = '\n'.join(unified_diff)
                update_codes_content = update_codes_content + "\n\n" + """```
'''
'''\n""" + unified_diff + "\n```"
                self.codebooks[key] = new_codes.codebooks[key]
    def _rewrite_codes(self) -> None:
        directory = self.directory
        rewrite_codes_content = "**[Rewrite Codes]**\n"
        if os.path.exists(directory):
            shutil.rmtree(self.directory)
        if not os.path.exists(directory):
            os.mkdir(self.directory)
            rewrite_codes_content += "{} Created\n".format(directory)
        for filename in self.codebooks.keys():
            filepath = os.path.join(directory, filename)
            with open(filepath, "w", encoding="utf-8") as writer:
                writer.write(self.codebooks[filename])
                rewrite_codes_content += os.path.join(directory, filename) + " Wrote\n"
    def _run_codes(self) -> None:
        directory = os.path.abspath(self.directory)
        if self.main_script not in os.listdir(directory):
            return False, "{} Not Found".format(self.main_script)
        success_info = "The software run successfully without errors."
        try:
            if os.name == 'nt':
                command = "cd {} && dir && python {}".format(directory, self.main_script)
                process = subprocess.Popen(
                    command,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
                )
            else:
                command = "cd {}; ls -l; python3 {};".format(directory, self.main_script)
                process = subprocess.Popen(command,
                                           shell=True,
                                           preexec_fn=os.setsid,
                                           stdout=subprocess.PIPE,
                                           stderr=subprocess.PIPE
                                           )
            time.sleep(3)
            return_code = process.returncode
            if process.poll() is None:
                if "killpg" in dir(os):
                    os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                else:
                    os.kill(process.pid, signal.SIGTERM)
                    if process.poll() is None:
                        os.kill(process.pid, signal.CTRL_BREAK_EVENT)
            if return_code == 0:
                return False, success_info
            else:
                error_output = process.stderr.read().decode('utf-8')
                if error_output:
                    if "Traceback".lower() in error_output.lower():
                        errs = error_output.replace(directory + "/", "")
                        return True, errs
                else:
                    return False, success_info
        except subprocess.CalledProcessError as e:
            return True, f"Error: {e}"
        except Exception as ex:
            return True, f"An error occurred: {ex}"
        return False, success_info
    def _get_codes(self) -> str:
        content = ""
        for filename in self.codebooks.keys():
            content += "{}\n```{}\n{}\n```\n\n".format(filename,
                                                       "python" if filename.endswith(".py") else filename.split(".")[
                                                           -1], self.codebooks[filename])
        return content
    def _load_from_hardware(self, directory) -> None:
        assert len([filename for filename in os.listdir(directory) if filename.endswith(".py")]) > 0
        for root, directories, filenames in os.walk(directory):
            for filename in filenames:
                if filename.endswith(".py"):
                    code = open(os.path.join(directory, filename), "r", encoding="utf-8").read()
                    self.codebooks[filename] = self._format_code(code)
        print("{} files read from {}".format(len(self.codebooks.keys()), directory))


/home/brandon/Projects/ChatDev/ecl/post_process/memory_filter.py

import json  
import os
import argparse
filter_threshold = 0.9
def filter_valuegain(directory, filtered_directory): 
    """filter memory by experience's valueGain, delete experience whose valueGain is smaller than filter_threshold  
    Keyword arguments:
    directory -- the input directory of MemoryCards, like "./ecl/memory/MemoryCards.json"
    filtered_directory -- the output directory of filtered MemoryCards, like "./ecl/memory/MemoryCards.json"
    """
    with open(directory) as file:
        content = json.load(file)
        new_content = []
        for memorypiece in content:
            experiences = memorypiece.get("experiences")
            filtered_experienceList = []
            if experiences != None:
                print("origin:",len(experiences))
                for experience in experiences:
                    valueGain = experience.get("valueGain")
                    print(valueGain)
                    if valueGain >= filter_threshold:
                        filtered_experienceList.append(experience)
                print(len(experiences))
                memorypiece["experiences"] = filtered_experienceList
                new_content.append(memorypiece)
            else:
                new_content.append(memorypiece)
        file.close()
    with open(filtered_directory, 'w') as file:
        json.dump(content, file)
        file.close()
def main():
    parser = argparse.ArgumentParser(description="Process some directories.")
    parser.add_argument("threshold", type=float, help="The filtered threshold for experiences")
    parser.add_argument("directory", type = str, help="The directory to process")
    parser.add_argument("filtered_directory", type= str, help="The directory for output")
    args = parser.parse_args()
    filter_threshold = args.threshold 
    filter_valuegain(args.directory, args.filtered_directory)
if __name__ == "__main__":
    main()